
Atmega32-Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000032e  000003c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080007c  0080007c  000003de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b46  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067e  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051b  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003aa  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000524  00000000  00000000  00001fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002506  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  8a:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:

void lcd_clear()
{
	LCD_Command(0x01);
	_delay_ms(3);
	LCD_Command(0x80);
  92:	98 b3       	in	r25, 0x18	; 24
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	98 bb       	out	0x18, r25	; 24
  9e:	98 b3       	in	r25, 0x18	; 24
  a0:	9e 7f       	andi	r25, 0xFE	; 254
  a2:	98 bb       	out	0x18, r25	; 24
  a4:	98 b3       	in	r25, 0x18	; 24
  a6:	92 60       	ori	r25, 0x02	; 2
  a8:	98 bb       	out	0x18, r25	; 24
  aa:	32 e0       	ldi	r19, 0x02	; 2
  ac:	3a 95       	dec	r19
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_Command+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_Command+0x20>
  b2:	98 b3       	in	r25, 0x18	; 24
  b4:	9d 7f       	andi	r25, 0xFD	; 253
  b6:	98 bb       	out	0x18, r25	; 24
  b8:	e7 ec       	ldi	r30, 0xC7	; 199
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_Command+0x2a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_Command+0x30>
  c2:	00 00       	nop
  c4:	28 b3       	in	r18, 0x18	; 24
  c6:	f0 e1       	ldi	r31, 0x10	; 16
  c8:	8f 9f       	mul	r24, r31
  ca:	c0 01       	movw	r24, r0
  cc:	11 24       	eor	r1, r1
  ce:	92 2f       	mov	r25, r18
  d0:	9f 70       	andi	r25, 0x0F	; 15
  d2:	89 2b       	or	r24, r25
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	88 bb       	out	0x18, r24	; 24
  dc:	32 e0       	ldi	r19, 0x02	; 2
  de:	3a 95       	dec	r19
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Command+0x4c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_Command+0x52>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	8f e9       	ldi	r24, 0x9F	; 159
  ec:	9f e0       	ldi	r25, 0x0F	; 15
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Command+0x5c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_Command+0x62>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <LCD_Char>:
  f8:	98 b3       	in	r25, 0x18	; 24
  fa:	9f 70       	andi	r25, 0x0F	; 15
  fc:	28 2f       	mov	r18, r24
  fe:	20 7f       	andi	r18, 0xF0	; 240
 100:	92 2b       	or	r25, r18
 102:	98 bb       	out	0x18, r25	; 24
 104:	98 b3       	in	r25, 0x18	; 24
 106:	91 60       	ori	r25, 0x01	; 1
 108:	98 bb       	out	0x18, r25	; 24
 10a:	98 b3       	in	r25, 0x18	; 24
 10c:	92 60       	ori	r25, 0x02	; 2
 10e:	98 bb       	out	0x18, r25	; 24
 110:	32 e0       	ldi	r19, 0x02	; 2
 112:	3a 95       	dec	r19
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Char+0x1a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_Char+0x20>
 118:	98 b3       	in	r25, 0x18	; 24
 11a:	9d 7f       	andi	r25, 0xFD	; 253
 11c:	98 bb       	out	0x18, r25	; 24
 11e:	e7 ec       	ldi	r30, 0xC7	; 199
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Char+0x2a>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_Char+0x30>
 128:	00 00       	nop
 12a:	28 b3       	in	r18, 0x18	; 24
 12c:	f0 e1       	ldi	r31, 0x10	; 16
 12e:	8f 9f       	mul	r24, r31
 130:	c0 01       	movw	r24, r0
 132:	11 24       	eor	r1, r1
 134:	92 2f       	mov	r25, r18
 136:	9f 70       	andi	r25, 0x0F	; 15
 138:	89 2b       	or	r24, r25
 13a:	88 bb       	out	0x18, r24	; 24
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	88 bb       	out	0x18, r24	; 24
 142:	32 e0       	ldi	r19, 0x02	; 2
 144:	3a 95       	dec	r19
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_Char+0x4c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_Char+0x52>
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	8d 7f       	andi	r24, 0xFD	; 253
 14e:	88 bb       	out	0x18, r24	; 24
 150:	8f e9       	ldi	r24, 0x9F	; 159
 152:	9f e0       	ldi	r25, 0x0F	; 15
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Char+0x5c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_Char+0x62>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <LCD_Init>:
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	87 bb       	out	0x17, r24	; 23
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	9c e9       	ldi	r25, 0x9C	; 156
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Init+0x8>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_Init+0xe>
 16c:	00 00       	nop
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 174:	88 e2       	ldi	r24, 0x28	; 40
 176:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 17a:	8c e0       	ldi	r24, 0x0C	; 12
 17c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 186:	82 e8       	ldi	r24, 0x82	; 130
 188:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 18c:	08 95       	ret

0000018e <LCD_String>:
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	8c 01       	movw	r16, r24
 198:	c0 e0       	ldi	r28, 0x00	; 0
 19a:	d0 e0       	ldi	r29, 0x00	; 0
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <LCD_String+0x16>
 19e:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_Char>
 1a2:	21 96       	adiw	r28, 0x01	; 1
 1a4:	f8 01       	movw	r30, r16
 1a6:	ec 0f       	add	r30, r28
 1a8:	fd 1f       	adc	r31, r29
 1aa:	80 81       	ld	r24, Z
 1ac:	81 11       	cpse	r24, r1
 1ae:	f7 cf       	rjmp	.-18     	; 0x19e <LCD_String+0x10>
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	08 95       	ret

000001ba <LCD_String_xy>:
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	ea 01       	movw	r28, r20
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	31 f4       	brne	.+12     	; 0x1d0 <LCD_String_xy+0x16>
 1c4:	86 2f       	mov	r24, r22
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <LCD_String_xy+0x24>
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	29 f4       	brne	.+10     	; 0x1de <LCD_String_xy+0x24>
 1d4:	86 2f       	mov	r24, r22
 1d6:	8f 70       	andi	r24, 0x0F	; 15
 1d8:	80 6c       	ori	r24, 0xC0	; 192
 1da:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1de:	ce 01       	movw	r24, r28
 1e0:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_String>
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <keyfind>:

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;                /* set port direction as input-output */
 1ea:	80 ef       	ldi	r24, 0xF0	; 240
 1ec:	8a bb       	out	0x1a, r24	; 26
		KEY_PRT = 0xFF;
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	8b bb       	out	0x1b, r24	; 27

		do
		{
			KEY_PRT &= 0x0F;           /* mask PORT for column read only */
 1f2:	8b b3       	in	r24, 0x1b	; 27
 1f4:	8f 70       	andi	r24, 0x0F	; 15
 1f6:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
 1f8:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); /* read status of column */
 1fa:	89 b3       	in	r24, 0x19	; 25
 1fc:	8f 70       	andi	r24, 0x0F	; 15
 1fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		}while(colloc != 0x0F);
 202:	8f 30       	cpi	r24, 0x0F	; 15
 204:	b1 f7       	brne	.-20     	; 0x1f2 <keyfind+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 206:	8f e3       	ldi	r24, 0x3F	; 63
 208:	9c e9       	ldi	r25, 0x9C	; 156
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <keyfind+0x20>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <keyfind+0x26>
 210:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);			   /* 20ms key debounce time */
				colloc = (KEY_PIN & 0x0F); /* read status of column */
 212:	89 b3       	in	r24, 0x19	; 25
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
			}while(colloc == 0x0F);        /* check for any key press */
 21a:	8f 30       	cpi	r24, 0x0F	; 15
 21c:	a1 f3       	breq	.-24     	; 0x206 <keyfind+0x1c>
 21e:	9f ef       	ldi	r25, 0xFF	; 255
 220:	29 ef       	ldi	r18, 0xF9	; 249
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	91 50       	subi	r25, 0x01	; 1
 226:	20 40       	sbci	r18, 0x00	; 0
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <keyfind+0x3a>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <keyfind+0x44>
 22e:	00 00       	nop
			
			_delay_ms (40);				   /* 20 ms key debounce time */
			colloc = (KEY_PIN & 0x0F);
 230:	89 b3       	in	r24, 0x19	; 25
 232:	8f 70       	andi	r24, 0x0F	; 15
 234:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		}while(colloc == 0x0F);
 238:	8f 30       	cpi	r24, 0x0F	; 15
 23a:	29 f3       	breq	.-54     	; 0x206 <keyfind+0x1c>

	/* now check for rows */
		KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
 23c:	8f ee       	ldi	r24, 0xEF	; 239
 23e:	8b bb       	out	0x1b, r24	; 27
		asm("NOP");
 240:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 242:	89 b3       	in	r24, 0x19	; 25
 244:	8f 70       	andi	r24, 0x0F	; 15
 246:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		if(colloc != 0x0F)
 24a:	8f 30       	cpi	r24, 0x0F	; 15
 24c:	19 f0       	breq	.+6      	; 0x254 <keyfind+0x6a>
		{
			rowloc = 0;
 24e:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <rowloc>
			break;
 252:	27 c0       	rjmp	.+78     	; 0x2a2 <keyfind+0xb8>
		}

		KEY_PRT = 0xDF;			  /* check for pressed key in 2nd row */
 254:	8f ed       	ldi	r24, 0xDF	; 223
 256:	8b bb       	out	0x1b, r24	; 27
		asm("NOP");
 258:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 25a:	89 b3       	in	r24, 0x19	; 25
 25c:	8f 70       	andi	r24, 0x0F	; 15
 25e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		if(colloc != 0x0F)
 262:	8f 30       	cpi	r24, 0x0F	; 15
 264:	21 f0       	breq	.+8      	; 0x26e <keyfind+0x84>
		{
			rowloc = 1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <rowloc>
			break;
 26c:	1a c0       	rjmp	.+52     	; 0x2a2 <keyfind+0xb8>
		}
		
		KEY_PRT = 0xBF;			  /* check for pressed key in 3rd row */
 26e:	8f eb       	ldi	r24, 0xBF	; 191
 270:	8b bb       	out	0x1b, r24	; 27
		asm("NOP");
 272:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 274:	89 b3       	in	r24, 0x19	; 25
 276:	8f 70       	andi	r24, 0x0F	; 15
 278:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		if(colloc != 0x0F)
 27c:	8f 30       	cpi	r24, 0x0F	; 15
 27e:	21 f0       	breq	.+8      	; 0x288 <keyfind+0x9e>
		{
			rowloc = 2;
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <rowloc>
			break;
 286:	0d c0       	rjmp	.+26     	; 0x2a2 <keyfind+0xb8>
		}

		KEY_PRT = 0x7F;			  /* check for pressed key in 4th row */
 288:	8f e7       	ldi	r24, 0x7F	; 127
 28a:	8b bb       	out	0x1b, r24	; 27
		asm("NOP");
 28c:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 28e:	89 b3       	in	r24, 0x19	; 25
 290:	8f 70       	andi	r24, 0x0F	; 15
 292:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		if(colloc != 0x0F)
 296:	8f 30       	cpi	r24, 0x0F	; 15
 298:	09 f4       	brne	.+2      	; 0x29c <keyfind+0xb2>
 29a:	a7 cf       	rjmp	.-178    	; 0x1ea <keyfind>
		{
			rowloc = 3;
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <rowloc>
			break;
		}
	}

	if(colloc == 0x0E)
 2a2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 2a6:	8e 30       	cpi	r24, 0x0E	; 14
 2a8:	59 f4       	brne	.+22     	; 0x2c0 <keyfind+0xd6>
		return(keypad[rowloc][0]);
 2aa:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <rowloc>
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	e0 5a       	subi	r30, 0xA0	; 160
 2ba:	ff 4f       	sbci	r31, 0xFF	; 255
 2bc:	80 81       	ld	r24, Z
 2be:	08 95       	ret
	else if(colloc == 0x0D)
 2c0:	8d 30       	cpi	r24, 0x0D	; 13
 2c2:	59 f4       	brne	.+22     	; 0x2da <keyfind+0xf0>
		return(keypad[rowloc][1]);
 2c4:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <rowloc>
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	ee 0f       	add	r30, r30
 2d0:	ff 1f       	adc	r31, r31
 2d2:	e0 5a       	subi	r30, 0xA0	; 160
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	81 81       	ldd	r24, Z+1	; 0x01
 2d8:	08 95       	ret
	else if(colloc == 0x0B)
 2da:	8b 30       	cpi	r24, 0x0B	; 11
 2dc:	59 f4       	brne	.+22     	; 0x2f4 <keyfind+0x10a>
		return(keypad[rowloc][2]);
 2de:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <rowloc>
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	ee 0f       	add	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	e0 5a       	subi	r30, 0xA0	; 160
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	82 81       	ldd	r24, Z+2	; 0x02
 2f2:	08 95       	ret
	else
		return(keypad[rowloc][3]);
 2f4:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <rowloc>
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	ee 0f       	add	r30, r30
 2fc:	ff 1f       	adc	r31, r31
 2fe:	ee 0f       	add	r30, r30
 300:	ff 1f       	adc	r31, r31
 302:	e0 5a       	subi	r30, 0xA0	; 160
 304:	ff 4f       	sbci	r31, 0xFF	; 255
 306:	83 81       	ldd	r24, Z+3	; 0x03
}
 308:	08 95       	ret

0000030a <main>:

int main(void)
{
	LCD_Init();
 30a:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Init>
	LCD_String_xy(1,0,"Press a key");
 30e:	40 e7       	ldi	r20, 0x70	; 112
 310:	50 e0       	ldi	r21, 0x00	; 0
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_String_xy>
    while(1)
	{
		LCD_Command(0xc0);
 31a:	80 ec       	ldi	r24, 0xC0	; 192
 31c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
		LCD_Char(keyfind());             /* Display which key is pressed */
 320:	0e 94 f5 00 	call	0x1ea	; 0x1ea <keyfind>
 324:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_Char>
 328:	f8 cf       	rjmp	.-16     	; 0x31a <main+0x10>

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
