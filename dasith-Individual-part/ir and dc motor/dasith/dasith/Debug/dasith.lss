
dasith.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069d  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a9  00000000  00000000  00000889  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000302  00000000  00000000  00000e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000339  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000044  00000000  00000000  000014d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001519  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initDCMotors>:
 */ 
#define F_CPU 16000000UL
#include "dcmotor.h"

void initDCMotors(){
	DDRB |= (1<<PB0) | (1<<PB1);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	87 bb       	out	0x17, r24	; 23
  72:	08 95       	ret

00000074 <rotateDCMotors>:
}

void rotateDCMotors(int direction)
{
	if (direction != 0)
  74:	89 2b       	or	r24, r25
  76:	39 f0       	breq	.+14     	; 0x86 <rotateDCMotors+0x12>
	{
		// Rotate DC motor Clockwise ?
		PORTB &= ~(1 << PB0);
  78:	88 b3       	in	r24, 0x18	; 24
  7a:	8e 7f       	andi	r24, 0xFE	; 254
  7c:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB1);
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	82 60       	ori	r24, 0x02	; 2
  82:	88 bb       	out	0x18, r24	; 24
  84:	08 95       	ret
	}
	else
	{
		// Else rotate DC motor Counterclockwise
		PORTB |= (1 << PB0);
  86:	88 b3       	in	r24, 0x18	; 24
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	88 bb       	out	0x18, r24	; 24
		PORTB &= ~(1 << PB1);
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	8d 7f       	andi	r24, 0xFD	; 253
  90:	88 bb       	out	0x18, r24	; 24
  92:	08 95       	ret

00000094 <stopDCMotors>:
}

void stopDCMotors()
{
	// stop Rotation DC motor
	PORTB &= ~(1 << PB0);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~(1 << PB1);
  9a:	88 b3       	in	r24, 0x18	; 24
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	88 bb       	out	0x18, r24	; 24
  a0:	08 95       	ret

000000a2 <main>:

#include "dcmotor.h"

int main(void)
{
    initDCMotors();
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <initDCMotors>
	while (1) 
    {
		
		if ((PIND & 1 << PD5) && (PIND & 1 << PD6)){ // if both Ir sensor-2,3 are detected pipe
  a6:	85 9b       	sbis	0x10, 5	; 16
  a8:	09 c0       	rjmp	.+18     	; 0xbc <main+0x1a>
  aa:	86 9b       	sbis	0x10, 6	; 16
  ac:	07 c0       	rjmp	.+14     	; 0xbc <main+0x1a>
			rotateDCMotors(1);
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 3a 00 	call	0x74	; 0x74 <rotateDCMotors>
			while (PIND & (1 << PD6));
  b6:	86 99       	sbic	0x10, 6	; 16
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x14>
  ba:	0a c0       	rjmp	.+20     	; 0xd0 <main+0x2e>
		}
		else if (!(PIND & 1 << PD5) && !(PIND & 1 << PD6)){ // else if both Ir sensor-2,3 are not detected pipe
  bc:	85 99       	sbic	0x10, 5	; 16
  be:	08 c0       	rjmp	.+16     	; 0xd0 <main+0x2e>
  c0:	86 99       	sbic	0x10, 6	; 16
  c2:	06 c0       	rjmp	.+12     	; 0xd0 <main+0x2e>
			rotateDCMotors(0);
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 3a 00 	call	0x74	; 0x74 <rotateDCMotors>
			while (!(PIND & (1 << PD5)));
  cc:	85 9b       	sbis	0x10, 5	; 16
  ce:	fe cf       	rjmp	.-4      	; 0xcc <main+0x2a>
		}
		stopDCMotors();
  d0:	0e 94 4a 00 	call	0x94	; 0x94 <stopDCMotors>
    }
  d4:	e8 cf       	rjmp	.-48     	; 0xa6 <main+0x4>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
