
Reciver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000721  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000620  00000000  00000000  000009c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036d  00000000  00000000  00000fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039b  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000093  00000000  00000000  0000175b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000017ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
static uint8_t data;

int main(void)
{

	initUSART(9600);
  7c:	60 e8       	ldi	r22, 0x80	; 128
  7e:	75 e2       	ldi	r23, 0x25	; 37
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 65 00 	call	0xca	; 0xca <initUSART>
	DDRA =0x0F;
  88:	8f e0       	ldi	r24, 0x0F	; 15
  8a:	8a bb       	out	0x1a, r24	; 26
	
	while(1){
		
		data=getReceivedData();
  8c:	0e 94 93 00 	call	0x126	; 0x126 <getReceivedData>
  90:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		if (data == START){
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	19 f4       	brne	.+6      	; 0x9e <main+0x22>
			PORTA |= (1 << PA0);
  98:	8b b3       	in	r24, 0x1b	; 27
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	8b bb       	out	0x1b, r24	; 27
		}
		if (data==STOP)
  9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a2:	81 11       	cpse	r24, r1
  a4:	03 c0       	rjmp	.+6      	; 0xac <main+0x30>
		{
			PORTA |= (1 << PA1);
  a6:	8b b3       	in	r24, 0x1b	; 27
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8b bb       	out	0x1b, r24	; 27
		}
		if (data==HIGH_SPEED)
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	19 f4       	brne	.+6      	; 0xba <main+0x3e>
		{
			PORTA |= (1 << PA2);
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	8b bb       	out	0x1b, r24	; 27
		}
		if (data==LOW_SPEED)
  ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	29 f7       	brne	.-54     	; 0x8c <main+0x10>
		{
			PORTA |= (1 << PA3);
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	e1 cf       	rjmp	.-62     	; 0x8c <main+0x10>

000000ca <initUSART>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	21 b3       	in	r18, 0x11	; 17
  cc:	22 60       	ori	r18, 0x02	; 2
  ce:	21 bb       	out	0x11, r18	; 17
  d0:	dc 01       	movw	r26, r24
  d2:	cb 01       	movw	r24, r22
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	aa 1f       	adc	r26, r26
  da:	bb 1f       	adc	r27, r27
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	aa 1f       	adc	r26, r26
  e2:	bb 1f       	adc	r27, r27
  e4:	9c 01       	movw	r18, r24
  e6:	ad 01       	movw	r20, r26
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	44 1f       	adc	r20, r20
  ee:	55 1f       	adc	r21, r21
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	44 1f       	adc	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	74 e2       	ldi	r23, 0x24	; 36
  fc:	84 ef       	ldi	r24, 0xF4	; 244
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 97 00 	call	0x12e	; 0x12e <__udivmodsi4>
 104:	da 01       	movw	r26, r20
 106:	c9 01       	movw	r24, r18
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	a1 09       	sbc	r26, r1
 10c:	b1 09       	sbc	r27, r1
 10e:	89 2f       	mov	r24, r25
 110:	9a 2f       	mov	r25, r26
 112:	ab 2f       	mov	r26, r27
 114:	bb 27       	eor	r27, r27
 116:	80 bd       	out	0x20, r24	; 32
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	29 b9       	out	0x09, r18	; 9
 11c:	88 e1       	ldi	r24, 0x18	; 24
 11e:	8a b9       	out	0x0a, r24	; 10
 120:	8e e0       	ldi	r24, 0x0E	; 14
 122:	80 bd       	out	0x20, r24	; 32
 124:	08 95       	ret

00000126 <getReceivedData>:
	// Get that data out here!
	_delay_ms(5);
}

uint8_t getReceivedData(){
	while (!(UCSRA & (1 << RXC)));/* Wait till data is received */
 126:	5f 9b       	sbis	0x0b, 7	; 11
 128:	fe cf       	rjmp	.-4      	; 0x126 <getReceivedData>
	return UDR;		/* Return the byte */
 12a:	8c b1       	in	r24, 0x0c	; 12
}
 12c:	08 95       	ret

0000012e <__udivmodsi4>:
 12e:	a1 e2       	ldi	r26, 0x21	; 33
 130:	1a 2e       	mov	r1, r26
 132:	aa 1b       	sub	r26, r26
 134:	bb 1b       	sub	r27, r27
 136:	fd 01       	movw	r30, r26
 138:	0d c0       	rjmp	.+26     	; 0x154 <__udivmodsi4_ep>

0000013a <__udivmodsi4_loop>:
 13a:	aa 1f       	adc	r26, r26
 13c:	bb 1f       	adc	r27, r27
 13e:	ee 1f       	adc	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	a2 17       	cp	r26, r18
 144:	b3 07       	cpc	r27, r19
 146:	e4 07       	cpc	r30, r20
 148:	f5 07       	cpc	r31, r21
 14a:	20 f0       	brcs	.+8      	; 0x154 <__udivmodsi4_ep>
 14c:	a2 1b       	sub	r26, r18
 14e:	b3 0b       	sbc	r27, r19
 150:	e4 0b       	sbc	r30, r20
 152:	f5 0b       	sbc	r31, r21

00000154 <__udivmodsi4_ep>:
 154:	66 1f       	adc	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	88 1f       	adc	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	1a 94       	dec	r1
 15e:	69 f7       	brne	.-38     	; 0x13a <__udivmodsi4_loop>
 160:	60 95       	com	r22
 162:	70 95       	com	r23
 164:	80 95       	com	r24
 166:	90 95       	com	r25
 168:	9b 01       	movw	r18, r22
 16a:	ac 01       	movw	r20, r24
 16c:	bd 01       	movw	r22, r26
 16e:	cf 01       	movw	r24, r30
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
