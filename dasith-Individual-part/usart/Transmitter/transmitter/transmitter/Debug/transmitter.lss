
transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000734  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000643  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000367  00000000  00000000  00000f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039d  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  000016c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>
#include "usart.h"


int main(void){
	initUSART();
  6c:	0e 94 51 00 	call	0xa2	; 0xa2 <initUSART>
	sei();
  70:	78 94       	sei
	
	while (1){
		
		if (PINA & (1<<PA0)){
  72:	c8 9b       	sbis	0x19, 0	; 25
  74:	04 c0       	rjmp	.+8      	; 0x7e <main+0x12>
			sendData(START);
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	0e 94 5c 00 	call	0xb8	; 0xb8 <sendData>
  7c:	fa cf       	rjmp	.-12     	; 0x72 <main+0x6>
		}else if (PINA & (1<<PA1))
  7e:	c9 9b       	sbis	0x19, 1	; 25
  80:	04 c0       	rjmp	.+8      	; 0x8a <main+0x1e>
		{
			sendData(STOP);
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	0e 94 5c 00 	call	0xb8	; 0xb8 <sendData>
  88:	f4 cf       	rjmp	.-24     	; 0x72 <main+0x6>
		}else if (PINA & (1<<PA2))
  8a:	ca 9b       	sbis	0x19, 2	; 25
  8c:	04 c0       	rjmp	.+8      	; 0x96 <main+0x2a>
		{
			sendData(HIGH_SPEED);
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	0e 94 5c 00 	call	0xb8	; 0xb8 <sendData>
  94:	ee cf       	rjmp	.-36     	; 0x72 <main+0x6>
		}else if (PINA & (1<<PA3))
  96:	cb 9b       	sbis	0x19, 3	; 25
  98:	ec cf       	rjmp	.-40     	; 0x72 <main+0x6>
		{
			sendData(LOW_SPEED);
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	0e 94 5c 00 	call	0xb8	; 0xb8 <sendData>
  a0:	e8 cf       	rjmp	.-48     	; 0x72 <main+0x6>

000000a2 <initUSART>:
#include "usart.h"


void initUSART(){
	
	DDRD |= 1 << PIND1;//pin1 of portD as OUTPUT
  a2:	81 b3       	in	r24, 0x11	; 17
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	81 bb       	out	0x11, r24	; 17
	
	int UBBRValue = 25;//AS described before setting baud rate

	//Put the upper part of the baud number here (bits 8 to 11)

	UBRRH = (unsigned char) (UBBRValue >> 8);
  a8:	10 bc       	out	0x20, r1	; 32

	//Put the remaining part of the baud number here

	UBRRL = (unsigned char) UBBRValue;
  aa:	89 e1       	ldi	r24, 0x19	; 25
  ac:	89 b9       	out	0x09, r24	; 9

	//Enable the receiver, transmitter and receiver interrupt
	UCSRB = (1 << RXEN) | (1 << TXEN);
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	8a b9       	out	0x0a, r24	; 10

	//Set 2 stop bits and data bit length is 8-bit

	UCSRC = (1 << USBS) | (3 << UCSZ0);
  b2:	8e e0       	ldi	r24, 0x0E	; 14
  b4:	80 bd       	out	0x20, r24	; 32
  b6:	08 95       	ret

000000b8 <sendData>:
	
}

void sendData(uint8_t byte){
	while (! (UCSRA & (1 << UDRE)) );
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <sendData>

	{
		UDR = byte;//once transmitter is ready sent eight bit data
  bc:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8f e1       	ldi	r24, 0x1F	; 31
  c0:	9e e4       	ldi	r25, 0x4E	; 78
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <sendData+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <sendData+0x10>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
