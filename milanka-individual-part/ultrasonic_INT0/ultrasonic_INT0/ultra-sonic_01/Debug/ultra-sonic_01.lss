
ultra-sonic_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000450  000004e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080007a  0080007a  000004fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e03  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083e  00000000  00000000  000013f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000640  00000000  00000000  00001c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00002278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000470  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000646  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002e66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  8a:	0c 94 26 02 	jmp	0x44c	; 0x44c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initUltrasonic>:
static volatile int i = 0;
int timerOverFlow=0;
static volatile int ult_count=NULL;

void initUltrasonic(){
	GICR |= (1<<INT0); //enabling interupt 0
  92:	8b b7       	in	r24, 0x3b	; 59
  94:	80 64       	ori	r24, 0x40	; 64
  96:	8b bf       	out	0x3b, r24	; 59
	//General Interrupt Control Register
	MCUCR|= (1<<ISC00); //setting interrupt triggering logic change
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	85 bf       	out	0x35, r24	; 53
	// MCU control Register
	TIMSK|=(1<<TOIE0);
  9e:	89 b7       	in	r24, 0x39	; 57
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	89 bf       	out	0x39, r24	; 57
	
	TCCR0 = 0;
  a4:	13 be       	out	0x33, r1	; 51
  a6:	08 95       	ret

000000a8 <getUltrasonic_1_distance>:
}

int getUltrasonic_1_distance(){
	int pulse;
	PORTD |= (1<<PIND7);
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	85 e0       	ldi	r24, 0x05	; 5
  b0:	8a 95       	dec	r24
  b2:	f1 f7       	brne	.-4      	; 0xb0 <getUltrasonic_1_distance+0x8>
	_delay_us(15); //triggering the sensor for 15usec
	PORTD &= (~(1<<PIND7));
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	8f 77       	andi	r24, 0x7F	; 127
  b8:	82 bb       	out	0x12, r24	; 18
	
	while(ult_count==NULL);
  ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
  be:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
  c2:	89 2b       	or	r24, r25
  c4:	d1 f3       	breq	.-12     	; 0xba <getUltrasonic_1_distance+0x12>
	
	pulse=ult_count;
  c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
  ca:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
	ult_count=NULL;
  ce:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__data_end+0x1>
  d2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
	return (pulse/58)+1;
  d6:	6a e3       	ldi	r22, 0x3A	; 58
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	0e 94 c9 01 	call	0x392	; 0x392 <__divmodhi4>
}
  de:	cb 01       	movw	r24, r22
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	08 95       	ret

000000e4 <__vector_1>:

ISR(INT0_vect) //interrupt service routine when there is a change in logic level

{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25

	if (i==1)//when logic from HIGH to LOW
  f4:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <i>
  f8:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <i+0x1>
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	89 f4       	brne	.+34     	; 0x122 <__vector_1+0x3e>

	{

		TCCR0=0; //disabling counter
 100:	13 be       	out	0x33, r1	; 51

		ult_count=TCNT0+timerOverFlow;//count memory is updated to intege
 102:	22 b7       	in	r18, 0x32	; 50
 104:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <timerOverFlow>
 108:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <timerOverFlow+0x1>
 10c:	82 0f       	add	r24, r18
 10e:	91 1d       	adc	r25, r1
 110:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 114:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
		
		TCNT0=0;//resetting the counter memory
 118:	12 be       	out	0x32, r1	; 50

		i=0;
 11a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <i+0x1>
 11e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <i>

	}

	if (i==0)//when logic change from LOW to HIGH
 122:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <i>
 126:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <i+0x1>
 12a:	89 2b       	or	r24, r25
 12c:	49 f4       	brne	.+18     	; 0x140 <__vector_1+0x5c>

	{

		TCCR0|=(1<<CS10);//enabling counter
 12e:	83 b7       	in	r24, 0x33	; 51
 130:	81 60       	ori	r24, 0x01	; 1
 132:	83 bf       	out	0x33, r24	; 51

		i=1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <i+0x1>
 13c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <i>

	}
	timerOverFlow=0;
 140:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <timerOverFlow+0x1>
 144:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <timerOverFlow>

}
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
	timerOverFlow+=256;
 166:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <timerOverFlow>
 16a:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <timerOverFlow+0x1>
 16e:	93 95       	inc	r25
 170:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <timerOverFlow+0x1>
 174:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <timerOverFlow>
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <LCD_Command>:


void LCD_Clear()
{
	LCD_Command (0x01);		/* clear display */
	LCD_Command (0x80);		/* cursor at home position */
 186:	98 b3       	in	r25, 0x18	; 24
 188:	9f 70       	andi	r25, 0x0F	; 15
 18a:	28 2f       	mov	r18, r24
 18c:	20 7f       	andi	r18, 0xF0	; 240
 18e:	92 2b       	or	r25, r18
 190:	98 bb       	out	0x18, r25	; 24
 192:	98 b3       	in	r25, 0x18	; 24
 194:	9e 7f       	andi	r25, 0xFE	; 254
 196:	98 bb       	out	0x18, r25	; 24
 198:	98 b3       	in	r25, 0x18	; 24
 19a:	92 60       	ori	r25, 0x02	; 2
 19c:	98 bb       	out	0x18, r25	; 24
 19e:	35 e0       	ldi	r19, 0x05	; 5
 1a0:	3a 95       	dec	r19
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_Command+0x1a>
 1a4:	00 00       	nop
 1a6:	98 b3       	in	r25, 0x18	; 24
 1a8:	9d 7f       	andi	r25, 0xFD	; 253
 1aa:	98 bb       	out	0x18, r25	; 24
 1ac:	ef e1       	ldi	r30, 0x1F	; 31
 1ae:	f3 e0       	ldi	r31, 0x03	; 3
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_Command+0x2a>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCD_Command+0x30>
 1b6:	00 00       	nop
 1b8:	28 b3       	in	r18, 0x18	; 24
 1ba:	f0 e1       	ldi	r31, 0x10	; 16
 1bc:	8f 9f       	mul	r24, r31
 1be:	c0 01       	movw	r24, r0
 1c0:	11 24       	eor	r1, r1
 1c2:	92 2f       	mov	r25, r18
 1c4:	9f 70       	andi	r25, 0x0F	; 15
 1c6:	89 2b       	or	r24, r25
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	88 b3       	in	r24, 0x18	; 24
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	88 bb       	out	0x18, r24	; 24
 1d0:	35 e0       	ldi	r19, 0x05	; 5
 1d2:	3a 95       	dec	r19
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_Command+0x4c>
 1d6:	00 00       	nop
 1d8:	88 b3       	in	r24, 0x18	; 24
 1da:	8d 7f       	andi	r24, 0xFD	; 253
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	9f e1       	ldi	r25, 0x1F	; 31
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_Command+0x5c>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCD_Command+0x62>
 1e8:	00 00       	nop
 1ea:	08 95       	ret

000001ec <LCD_Char>:
 1ec:	98 b3       	in	r25, 0x18	; 24
 1ee:	9f 70       	andi	r25, 0x0F	; 15
 1f0:	28 2f       	mov	r18, r24
 1f2:	20 7f       	andi	r18, 0xF0	; 240
 1f4:	92 2b       	or	r25, r18
 1f6:	98 bb       	out	0x18, r25	; 24
 1f8:	98 b3       	in	r25, 0x18	; 24
 1fa:	91 60       	ori	r25, 0x01	; 1
 1fc:	98 bb       	out	0x18, r25	; 24
 1fe:	98 b3       	in	r25, 0x18	; 24
 200:	92 60       	ori	r25, 0x02	; 2
 202:	98 bb       	out	0x18, r25	; 24
 204:	35 e0       	ldi	r19, 0x05	; 5
 206:	3a 95       	dec	r19
 208:	f1 f7       	brne	.-4      	; 0x206 <LCD_Char+0x1a>
 20a:	00 00       	nop
 20c:	98 b3       	in	r25, 0x18	; 24
 20e:	9d 7f       	andi	r25, 0xFD	; 253
 210:	98 bb       	out	0x18, r25	; 24
 212:	ef e1       	ldi	r30, 0x1F	; 31
 214:	f3 e0       	ldi	r31, 0x03	; 3
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_Char+0x2a>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_Char+0x30>
 21c:	00 00       	nop
 21e:	28 b3       	in	r18, 0x18	; 24
 220:	f0 e1       	ldi	r31, 0x10	; 16
 222:	8f 9f       	mul	r24, r31
 224:	c0 01       	movw	r24, r0
 226:	11 24       	eor	r1, r1
 228:	92 2f       	mov	r25, r18
 22a:	9f 70       	andi	r25, 0x0F	; 15
 22c:	89 2b       	or	r24, r25
 22e:	88 bb       	out	0x18, r24	; 24
 230:	88 b3       	in	r24, 0x18	; 24
 232:	82 60       	ori	r24, 0x02	; 2
 234:	88 bb       	out	0x18, r24	; 24
 236:	35 e0       	ldi	r19, 0x05	; 5
 238:	3a 95       	dec	r19
 23a:	f1 f7       	brne	.-4      	; 0x238 <LCD_Char+0x4c>
 23c:	00 00       	nop
 23e:	88 b3       	in	r24, 0x18	; 24
 240:	8d 7f       	andi	r24, 0xFD	; 253
 242:	88 bb       	out	0x18, r24	; 24
 244:	8f e3       	ldi	r24, 0x3F	; 63
 246:	9f e1       	ldi	r25, 0x1F	; 31
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_Char+0x5c>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_Char+0x62>
 24e:	00 00       	nop
 250:	08 95       	ret

00000252 <LCD_Init>:
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	87 bb       	out	0x17, r24	; 23
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	89 ef       	ldi	r24, 0xF9	; 249
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <LCD_Init+0xa>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_Init+0x14>
 266:	00 00       	nop
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_Command>
 26e:	88 e2       	ldi	r24, 0x28	; 40
 270:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_Command>
 274:	8c e0       	ldi	r24, 0x0C	; 12
 276:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_Command>
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_Command>
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_Command>
 286:	8f e3       	ldi	r24, 0x3F	; 63
 288:	9f e1       	ldi	r25, 0x1F	; 31
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <LCD_Init+0x38>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <LCD_Init+0x3e>
 290:	00 00       	nop
 292:	08 95       	ret

00000294 <LCD_String>:
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	8c 01       	movw	r16, r24
 29e:	c0 e0       	ldi	r28, 0x00	; 0
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <LCD_String+0x16>
 2a4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCD_Char>
 2a8:	21 96       	adiw	r28, 0x01	; 1
 2aa:	f8 01       	movw	r30, r16
 2ac:	ec 0f       	add	r30, r28
 2ae:	fd 1f       	adc	r31, r29
 2b0:	80 81       	ld	r24, Z
 2b2:	81 11       	cpse	r24, r1
 2b4:	f7 cf       	rjmp	.-18     	; 0x2a4 <LCD_String+0x10>
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	08 95       	ret

000002c0 <LCD_String_xy>:
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ea 01       	movw	r28, r20
 2c6:	81 11       	cpse	r24, r1
 2c8:	08 c0       	rjmp	.+16     	; 0x2da <LCD_String_xy+0x1a>
 2ca:	60 31       	cpi	r22, 0x10	; 16
 2cc:	30 f4       	brcc	.+12     	; 0x2da <LCD_String_xy+0x1a>
 2ce:	86 2f       	mov	r24, r22
 2d0:	8f 70       	andi	r24, 0x0F	; 15
 2d2:	80 68       	ori	r24, 0x80	; 128
 2d4:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_Command>
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <LCD_String_xy+0x2c>
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	39 f4       	brne	.+14     	; 0x2ec <LCD_String_xy+0x2c>
 2de:	60 31       	cpi	r22, 0x10	; 16
 2e0:	28 f4       	brcc	.+10     	; 0x2ec <LCD_String_xy+0x2c>
 2e2:	86 2f       	mov	r24, r22
 2e4:	8f 70       	andi	r24, 0x0F	; 15
 2e6:	80 6c       	ori	r24, 0xC0	; 192
 2e8:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_Command>
 2ec:	ce 01       	movw	r24, r28
 2ee:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_String>
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <main>:

#include "ultrasonic.h"
#include "LCD.h"

int main(void)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	60 97       	sbiw	r28, 0x10	; 16
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
 30c:	0e 94 29 01 	call	0x252	; 0x252 <LCD_Init>
	DDRD = 0b11111011;
 310:	8b ef       	ldi	r24, 0xFB	; 251
 312:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 314:	2f ef       	ldi	r18, 0xFF	; 255
 316:	80 e7       	ldi	r24, 0x70	; 112
 318:	92 e0       	ldi	r25, 0x02	; 2
 31a:	21 50       	subi	r18, 0x01	; 1
 31c:	80 40       	sbci	r24, 0x00	; 0
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <main+0x22>
 322:	00 c0       	rjmp	.+0      	; 0x324 <main+0x2c>
 324:	00 00       	nop
	_delay_ms(50);
	
	initUltrasonic();
 326:	0e 94 49 00 	call	0x92	; 0x92 <initUltrasonic>
 
    static int16_t count_a = 0;
    char show_a[16];
	sei();
 32a:	78 94       	sei
	
	while(1)
	{
		
		count_a =getUltrasonic_1_distance();
 32c:	0e 94 54 00 	call	0xa8	; 0xa8 <getUltrasonic_1_distance>
 330:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <count_a.2046+0x1>
 334:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <count_a.2046>
		
		LCD_String_xy(0, 0, "Ultrasonic");
 338:	40 e6       	ldi	r20, 0x60	; 96
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_String_xy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 344:	4a e0       	ldi	r20, 0x0A	; 10
 346:	be 01       	movw	r22, r28
 348:	6f 5f       	subi	r22, 0xFF	; 255
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <count_a.2046>
 350:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <count_a.2046+0x1>
 354:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__itoa_ncheck>
        itoa(count_a,show_a,10);
		LCD_String_xy(1, 0, "Distance= ");
 358:	4b e6       	ldi	r20, 0x6B	; 107
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_String_xy>
		LCD_String_xy(1, 10, show_a);
 364:	ae 01       	movw	r20, r28
 366:	4f 5f       	subi	r20, 0xFF	; 255
 368:	5f 4f       	sbci	r21, 0xFF	; 255
 36a:	6a e0       	ldi	r22, 0x0A	; 10
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_String_xy>
		LCD_String_xy(1, 13, "cm");
 372:	46 e7       	ldi	r20, 0x76	; 118
 374:	50 e0       	ldi	r21, 0x00	; 0
 376:	6d e0       	ldi	r22, 0x0D	; 13
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_String_xy>
 37e:	2f ef       	ldi	r18, 0xFF	; 255
 380:	83 ec       	ldi	r24, 0xC3	; 195
 382:	99 e0       	ldi	r25, 0x09	; 9
 384:	21 50       	subi	r18, 0x01	; 1
 386:	80 40       	sbci	r24, 0x00	; 0
 388:	90 40       	sbci	r25, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <main+0x8c>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <main+0x96>
 38e:	00 00       	nop
 390:	cd cf       	rjmp	.-102    	; 0x32c <main+0x34>

00000392 <__divmodhi4>:
 392:	97 fb       	bst	r25, 7
 394:	07 2e       	mov	r0, r23
 396:	16 f4       	brtc	.+4      	; 0x39c <__divmodhi4+0xa>
 398:	00 94       	com	r0
 39a:	07 d0       	rcall	.+14     	; 0x3aa <__divmodhi4_neg1>
 39c:	77 fd       	sbrc	r23, 7
 39e:	09 d0       	rcall	.+18     	; 0x3b2 <__divmodhi4_neg2>
 3a0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__udivmodhi4>
 3a4:	07 fc       	sbrc	r0, 7
 3a6:	05 d0       	rcall	.+10     	; 0x3b2 <__divmodhi4_neg2>
 3a8:	3e f4       	brtc	.+14     	; 0x3b8 <__divmodhi4_exit>

000003aa <__divmodhi4_neg1>:
 3aa:	90 95       	com	r25
 3ac:	81 95       	neg	r24
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	08 95       	ret

000003b2 <__divmodhi4_neg2>:
 3b2:	70 95       	com	r23
 3b4:	61 95       	neg	r22
 3b6:	7f 4f       	sbci	r23, 0xFF	; 255

000003b8 <__divmodhi4_exit>:
 3b8:	08 95       	ret

000003ba <__udivmodhi4>:
 3ba:	aa 1b       	sub	r26, r26
 3bc:	bb 1b       	sub	r27, r27
 3be:	51 e1       	ldi	r21, 0x11	; 17
 3c0:	07 c0       	rjmp	.+14     	; 0x3d0 <__udivmodhi4_ep>

000003c2 <__udivmodhi4_loop>:
 3c2:	aa 1f       	adc	r26, r26
 3c4:	bb 1f       	adc	r27, r27
 3c6:	a6 17       	cp	r26, r22
 3c8:	b7 07       	cpc	r27, r23
 3ca:	10 f0       	brcs	.+4      	; 0x3d0 <__udivmodhi4_ep>
 3cc:	a6 1b       	sub	r26, r22
 3ce:	b7 0b       	sbc	r27, r23

000003d0 <__udivmodhi4_ep>:
 3d0:	88 1f       	adc	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	5a 95       	dec	r21
 3d6:	a9 f7       	brne	.-22     	; 0x3c2 <__udivmodhi4_loop>
 3d8:	80 95       	com	r24
 3da:	90 95       	com	r25
 3dc:	bc 01       	movw	r22, r24
 3de:	cd 01       	movw	r24, r26
 3e0:	08 95       	ret

000003e2 <__itoa_ncheck>:
 3e2:	bb 27       	eor	r27, r27
 3e4:	4a 30       	cpi	r20, 0x0A	; 10
 3e6:	31 f4       	brne	.+12     	; 0x3f4 <__itoa_ncheck+0x12>
 3e8:	99 23       	and	r25, r25
 3ea:	22 f4       	brpl	.+8      	; 0x3f4 <__itoa_ncheck+0x12>
 3ec:	bd e2       	ldi	r27, 0x2D	; 45
 3ee:	90 95       	com	r25
 3f0:	81 95       	neg	r24
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__utoa_common>

000003f8 <__utoa_ncheck>:
 3f8:	bb 27       	eor	r27, r27

000003fa <__utoa_common>:
 3fa:	fb 01       	movw	r30, r22
 3fc:	55 27       	eor	r21, r21
 3fe:	aa 27       	eor	r26, r26
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	aa 1f       	adc	r26, r26
 406:	a4 17       	cp	r26, r20
 408:	10 f0       	brcs	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	a4 1b       	sub	r26, r20
 40c:	83 95       	inc	r24
 40e:	50 51       	subi	r21, 0x10	; 16
 410:	b9 f7       	brne	.-18     	; 0x400 <__EEPROM_REGION_LENGTH__>
 412:	a0 5d       	subi	r26, 0xD0	; 208
 414:	aa 33       	cpi	r26, 0x3A	; 58
 416:	08 f0       	brcs	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 418:	a9 5d       	subi	r26, 0xD9	; 217
 41a:	a1 93       	st	Z+, r26
 41c:	00 97       	sbiw	r24, 0x00	; 0
 41e:	79 f7       	brne	.-34     	; 0x3fe <__utoa_common+0x4>
 420:	b1 11       	cpse	r27, r1
 422:	b1 93       	st	Z+, r27
 424:	11 92       	st	Z+, r1
 426:	cb 01       	movw	r24, r22
 428:	0c 94 16 02 	jmp	0x42c	; 0x42c <strrev>

0000042c <strrev>:
 42c:	dc 01       	movw	r26, r24
 42e:	fc 01       	movw	r30, r24
 430:	67 2f       	mov	r22, r23
 432:	71 91       	ld	r23, Z+
 434:	77 23       	and	r23, r23
 436:	e1 f7       	brne	.-8      	; 0x430 <strrev+0x4>
 438:	32 97       	sbiw	r30, 0x02	; 2
 43a:	04 c0       	rjmp	.+8      	; 0x444 <strrev+0x18>
 43c:	7c 91       	ld	r23, X
 43e:	6d 93       	st	X+, r22
 440:	70 83       	st	Z, r23
 442:	62 91       	ld	r22, -Z
 444:	ae 17       	cp	r26, r30
 446:	bf 07       	cpc	r27, r31
 448:	c8 f3       	brcs	.-14     	; 0x43c <strrev+0x10>
 44a:	08 95       	ret

0000044c <_exit>:
 44c:	f8 94       	cli

0000044e <__stop_program>:
 44e:	ff cf       	rjmp	.-2      	; 0x44e <__stop_program>
