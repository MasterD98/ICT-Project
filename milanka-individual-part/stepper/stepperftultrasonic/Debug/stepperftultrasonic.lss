
stepperftultrasonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000031c  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  0000034b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e01  00000000  00000000  00000393  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000628  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003a3  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000078  00000000  00000000  00001b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b3  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000048c  00000000  00000000  00001d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00002217  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000002c4  000002c4  00000318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002258  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    0000001a  0000028e  0000028e  000002e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.initSteppers 00000008  000002bc  000002bc  00000310  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.rotateStepper_3 00000160  0000006c  0000006c  000000c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.avrlibc.fplib 0000000a  000002a8  000002a8  000002fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.avrlibc.fplib 0000007a  000001cc  000001cc  00000220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.avrlibc.fplib 00000048  00000246  00000246  0000029a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.avrlibc.fplib 0000000a  000002b2  000002b2  00000306  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
   8:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
   c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  10:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  14:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  18:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  1c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  20:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  24:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  28:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  2c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  30:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  34:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  38:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  3c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  40:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  44:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  48:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  4c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>
  50:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 47 01 	call	0x28e	; 0x28e <main>
  64:	0c 94 34 00 	jmp	0x68	; 0x68 <_exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000002c4 <__bad_interrupt>:
 2c4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000028e <main>:

#include "stepper.h"

int main(void){

	initSteppers();
 28e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <initSteppers>
	rotateStepper_3(1,1);
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	60 e8       	ldi	r22, 0x80	; 128
 298:	7f e3       	ldi	r23, 0x3F	; 63
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
}
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	08 95       	ret

Disassembly of section .text.initSteppers:

000002bc <initSteppers>:
 */ 

#include "stepper.h"

void initSteppers(){
	DDRA = 0xFF;
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 2c0:	84 bb       	out	0x14, r24	; 20
 2c2:	08 95       	ret

Disassembly of section .text.rotateStepper_3:

0000006c <rotateStepper_3>:
}

void rotateStepper_3(int direction, float distance){
  6c:	cf 92       	push	r12
  6e:	df 92       	push	r13
  70:	ef 92       	push	r14
  72:	ff 92       	push	r15
  74:	cf 93       	push	r28
  76:	df 93       	push	r29
  78:	6a 01       	movw	r12, r20
  7a:	7b 01       	movw	r14, r22
	// Counterclockwise-0
	// 1 distance unit = 1 rotating

	int period;
	period = 100;
	if (direction == 1)
  7c:	01 97       	sbiw	r24, 0x01	; 1
  7e:	d9 f1       	breq	.+118    	; 0xf6 <rotateStepper_3+0x8a>
  80:	c0 e0       	ldi	r28, 0x00	; 0
  82:	d0 e0       	ldi	r29, 0x00	; 0
  84:	86 c0       	rjmp	.+268    	; 0x192 <rotateStepper_3+0x126>
	{
		/* Rotate  clockwise */
		for(int i=0;i<distance;i++)
		{
			PORTC = 0x03;
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	31 ee       	ldi	r19, 0xE1	; 225
  8e:	94 e0       	ldi	r25, 0x04	; 4
  90:	21 50       	subi	r18, 0x01	; 1
  92:	30 40       	sbci	r19, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <rotateStepper_3+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <rotateStepper_3+0x2e>
  9a:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x06;
  9c:	96 e0       	ldi	r25, 0x06	; 6
  9e:	95 bb       	out	0x15, r25	; 21
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	31 ee       	ldi	r19, 0xE1	; 225
  a4:	94 e0       	ldi	r25, 0x04	; 4
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <rotateStepper_3+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <rotateStepper_3+0x44>
  b0:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x0c;
  b2:	9c e0       	ldi	r25, 0x0C	; 12
  b4:	95 bb       	out	0x15, r25	; 21
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	31 ee       	ldi	r19, 0xE1	; 225
  ba:	94 e0       	ldi	r25, 0x04	; 4
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	30 40       	sbci	r19, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <rotateStepper_3+0x50>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <rotateStepper_3+0x5a>
  c6:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x09;
  c8:	99 e0       	ldi	r25, 0x09	; 9
  ca:	95 bb       	out	0x15, r25	; 21
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	31 ee       	ldi	r19, 0xE1	; 225
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	30 40       	sbci	r19, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <rotateStepper_3+0x66>
  da:	00 c0       	rjmp	.+0      	; 0xdc <rotateStepper_3+0x70>
  dc:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x03;
  de:	85 bb       	out	0x15, r24	; 21
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	31 ee       	ldi	r19, 0xE1	; 225
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	30 40       	sbci	r19, 0x00	; 0
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <rotateStepper_3+0x7a>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <rotateStepper_3+0x84>
  f0:	00 00       	nop
	int period;
	period = 100;
	if (direction == 1)
	{
		/* Rotate  clockwise */
		for(int i=0;i<distance;i++)
  f2:	21 96       	adiw	r28, 0x01	; 1
  f4:	02 c0       	rjmp	.+4      	; 0xfa <rotateStepper_3+0x8e>
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	be 01       	movw	r22, r28
  fc:	0d 2e       	mov	r0, r29
  fe:	00 0c       	add	r0, r0
 100:	88 0b       	sbc	r24, r24
 102:	99 0b       	sbc	r25, r25
 104:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <__floatsisf>
 108:	a7 01       	movw	r20, r14
 10a:	96 01       	movw	r18, r12
 10c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__cmpsf2>
 110:	88 23       	and	r24, r24
 112:	0c f4       	brge	.+2      	; 0x116 <rotateStepper_3+0xaa>
 114:	b8 cf       	rjmp	.-144    	; 0x86 <rotateStepper_3+0x1a>
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	9c e9       	ldi	r25, 0x9C	; 156
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <rotateStepper_3+0xae>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <rotateStepper_3+0xb4>
 120:	00 00       	nop
 122:	4d c0       	rjmp	.+154    	; 0x1be <rotateStepper_3+0x152>
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < distance; i++)
		{
			PORTC = 0x03;
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	85 bb       	out	0x15, r24	; 21
 128:	9f ef       	ldi	r25, 0xFF	; 255
 12a:	21 ee       	ldi	r18, 0xE1	; 225
 12c:	34 e0       	ldi	r19, 0x04	; 4
 12e:	91 50       	subi	r25, 0x01	; 1
 130:	20 40       	sbci	r18, 0x00	; 0
 132:	30 40       	sbci	r19, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <rotateStepper_3+0xc2>
 136:	00 c0       	rjmp	.+0      	; 0x138 <rotateStepper_3+0xcc>
 138:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x09;
 13a:	99 e0       	ldi	r25, 0x09	; 9
 13c:	95 bb       	out	0x15, r25	; 21
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	21 ee       	ldi	r18, 0xE1	; 225
 142:	34 e0       	ldi	r19, 0x04	; 4
 144:	91 50       	subi	r25, 0x01	; 1
 146:	20 40       	sbci	r18, 0x00	; 0
 148:	30 40       	sbci	r19, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <rotateStepper_3+0xd8>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <rotateStepper_3+0xe2>
 14e:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x0c;
 150:	9c e0       	ldi	r25, 0x0C	; 12
 152:	95 bb       	out	0x15, r25	; 21
 154:	9f ef       	ldi	r25, 0xFF	; 255
 156:	21 ee       	ldi	r18, 0xE1	; 225
 158:	34 e0       	ldi	r19, 0x04	; 4
 15a:	91 50       	subi	r25, 0x01	; 1
 15c:	20 40       	sbci	r18, 0x00	; 0
 15e:	30 40       	sbci	r19, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <rotateStepper_3+0xee>
 162:	00 c0       	rjmp	.+0      	; 0x164 <rotateStepper_3+0xf8>
 164:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x06;
 166:	96 e0       	ldi	r25, 0x06	; 6
 168:	95 bb       	out	0x15, r25	; 21
 16a:	9f ef       	ldi	r25, 0xFF	; 255
 16c:	21 ee       	ldi	r18, 0xE1	; 225
 16e:	34 e0       	ldi	r19, 0x04	; 4
 170:	91 50       	subi	r25, 0x01	; 1
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <rotateStepper_3+0x104>
 178:	00 c0       	rjmp	.+0      	; 0x17a <rotateStepper_3+0x10e>
 17a:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x03;
 17c:	85 bb       	out	0x15, r24	; 21
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	91 ee       	ldi	r25, 0xE1	; 225
 182:	24 e0       	ldi	r18, 0x04	; 4
 184:	81 50       	subi	r24, 0x01	; 1
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	20 40       	sbci	r18, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <rotateStepper_3+0x118>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <rotateStepper_3+0x122>
 18e:	00 00       	nop
		_delay_ms(10);
	}
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < distance; i++)
 190:	21 96       	adiw	r28, 0x01	; 1
 192:	be 01       	movw	r22, r28
 194:	0d 2e       	mov	r0, r29
 196:	00 0c       	add	r0, r0
 198:	88 0b       	sbc	r24, r24
 19a:	99 0b       	sbc	r25, r25
 19c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <__floatsisf>
 1a0:	9b 01       	movw	r18, r22
 1a2:	ac 01       	movw	r20, r24
 1a4:	c7 01       	movw	r24, r14
 1a6:	b6 01       	movw	r22, r12
 1a8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__gesf2>
 1ac:	18 16       	cp	r1, r24
 1ae:	0c f4       	brge	.+2      	; 0x1b2 <rotateStepper_3+0x146>
 1b0:	b9 cf       	rjmp	.-142    	; 0x124 <rotateStepper_3+0xb8>
 1b2:	8f e3       	ldi	r24, 0x3F	; 63
 1b4:	9c e9       	ldi	r25, 0x9C	; 156
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <rotateStepper_3+0x14a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <rotateStepper_3+0x150>
 1bc:	00 00       	nop
			_delay_ms(period);
		}

		_delay_ms(10);
	}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	ff 90       	pop	r15
 1c4:	ef 90       	pop	r14
 1c6:	df 90       	pop	r13
 1c8:	cf 90       	pop	r12
 1ca:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000002a8 <__cmpsf2>:
 2a8:	0e 94 23 01 	call	0x246	; 0x246 <__fp_cmp>
 2ac:	08 f4       	brcc	.+2      	; 0x2b0 <__cmpsf2+0x8>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000001cc <__floatunsisf>:
 1cc:	e8 94       	clt
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <__floatsisf+0x12>

000001d0 <__floatsisf>:
 1d0:	97 fb       	bst	r25, 7
 1d2:	3e f4       	brtc	.+14     	; 0x1e2 <__floatsisf+0x12>
 1d4:	90 95       	com	r25
 1d6:	80 95       	com	r24
 1d8:	70 95       	com	r23
 1da:	61 95       	neg	r22
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255
 1de:	8f 4f       	sbci	r24, 0xFF	; 255
 1e0:	9f 4f       	sbci	r25, 0xFF	; 255
 1e2:	99 23       	and	r25, r25
 1e4:	a9 f0       	breq	.+42     	; 0x210 <__floatsisf+0x40>
 1e6:	f9 2f       	mov	r31, r25
 1e8:	96 e9       	ldi	r25, 0x96	; 150
 1ea:	bb 27       	eor	r27, r27
 1ec:	93 95       	inc	r25
 1ee:	f6 95       	lsr	r31
 1f0:	87 95       	ror	r24
 1f2:	77 95       	ror	r23
 1f4:	67 95       	ror	r22
 1f6:	b7 95       	ror	r27
 1f8:	f1 11       	cpse	r31, r1
 1fa:	f8 cf       	rjmp	.-16     	; 0x1ec <__floatsisf+0x1c>
 1fc:	fa f4       	brpl	.+62     	; 0x23c <__floatsisf+0x6c>
 1fe:	bb 0f       	add	r27, r27
 200:	11 f4       	brne	.+4      	; 0x206 <__floatsisf+0x36>
 202:	60 ff       	sbrs	r22, 0
 204:	1b c0       	rjmp	.+54     	; 0x23c <__floatsisf+0x6c>
 206:	6f 5f       	subi	r22, 0xFF	; 255
 208:	7f 4f       	sbci	r23, 0xFF	; 255
 20a:	8f 4f       	sbci	r24, 0xFF	; 255
 20c:	9f 4f       	sbci	r25, 0xFF	; 255
 20e:	16 c0       	rjmp	.+44     	; 0x23c <__floatsisf+0x6c>
 210:	88 23       	and	r24, r24
 212:	11 f0       	breq	.+4      	; 0x218 <__floatsisf+0x48>
 214:	96 e9       	ldi	r25, 0x96	; 150
 216:	11 c0       	rjmp	.+34     	; 0x23a <__floatsisf+0x6a>
 218:	77 23       	and	r23, r23
 21a:	21 f0       	breq	.+8      	; 0x224 <__floatsisf+0x54>
 21c:	9e e8       	ldi	r25, 0x8E	; 142
 21e:	87 2f       	mov	r24, r23
 220:	76 2f       	mov	r23, r22
 222:	05 c0       	rjmp	.+10     	; 0x22e <__floatsisf+0x5e>
 224:	66 23       	and	r22, r22
 226:	71 f0       	breq	.+28     	; 0x244 <__floatsisf+0x74>
 228:	96 e8       	ldi	r25, 0x86	; 134
 22a:	86 2f       	mov	r24, r22
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	2a f0       	brmi	.+10     	; 0x23c <__floatsisf+0x6c>
 232:	9a 95       	dec	r25
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	88 1f       	adc	r24, r24
 23a:	da f7       	brpl	.-10     	; 0x232 <__floatsisf+0x62>
 23c:	88 0f       	add	r24, r24
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	97 f9       	bld	r25, 7
 244:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00000246 <__fp_cmp>:
 246:	99 0f       	add	r25, r25
 248:	00 08       	sbc	r0, r0
 24a:	55 0f       	add	r21, r21
 24c:	aa 0b       	sbc	r26, r26
 24e:	e0 e8       	ldi	r30, 0x80	; 128
 250:	fe ef       	ldi	r31, 0xFE	; 254
 252:	16 16       	cp	r1, r22
 254:	17 06       	cpc	r1, r23
 256:	e8 07       	cpc	r30, r24
 258:	f9 07       	cpc	r31, r25
 25a:	c0 f0       	brcs	.+48     	; 0x28c <__fp_cmp+0x46>
 25c:	12 16       	cp	r1, r18
 25e:	13 06       	cpc	r1, r19
 260:	e4 07       	cpc	r30, r20
 262:	f5 07       	cpc	r31, r21
 264:	98 f0       	brcs	.+38     	; 0x28c <__fp_cmp+0x46>
 266:	62 1b       	sub	r22, r18
 268:	73 0b       	sbc	r23, r19
 26a:	84 0b       	sbc	r24, r20
 26c:	95 0b       	sbc	r25, r21
 26e:	39 f4       	brne	.+14     	; 0x27e <__fp_cmp+0x38>
 270:	0a 26       	eor	r0, r26
 272:	61 f0       	breq	.+24     	; 0x28c <__fp_cmp+0x46>
 274:	23 2b       	or	r18, r19
 276:	24 2b       	or	r18, r20
 278:	25 2b       	or	r18, r21
 27a:	21 f4       	brne	.+8      	; 0x284 <__fp_cmp+0x3e>
 27c:	08 95       	ret
 27e:	0a 26       	eor	r0, r26
 280:	09 f4       	brne	.+2      	; 0x284 <__fp_cmp+0x3e>
 282:	a1 40       	sbci	r26, 0x01	; 1
 284:	a6 95       	lsr	r26
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	81 1d       	adc	r24, r1
 28a:	81 1d       	adc	r24, r1
 28c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000002b2 <__gesf2>:
 2b2:	0e 94 23 01 	call	0x246	; 0x246 <__fp_cmp>
 2b6:	08 f4       	brcc	.+2      	; 0x2ba <__gesf2+0x8>
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	08 95       	ret
