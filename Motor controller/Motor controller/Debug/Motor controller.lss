
Motor controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000019f4  00001a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800066  00800066  00001a8e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ac0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036f9  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8e  00000000  00000000  00005325  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c7e  00000000  00000000  00005db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00007a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000625  00000000  00000000  00007d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003963  00000000  00000000  00008335  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000bc98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__vector_1>
       8:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__vector_2>
       c:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fd 09 	call	0x13fa	; 0x13fa <main>
      8a:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initDCMotors>:
 *  Author: Dasith
 */ 
#include "dcmotor.h"

void initDCMotors(){
	DDRB |= (1<<PB0) | (1<<PB1);
      92:	87 b3       	in	r24, 0x17	; 23
      94:	83 60       	ori	r24, 0x03	; 3
      96:	87 bb       	out	0x17, r24	; 23
      98:	08 95       	ret

0000009a <rotateDCMotors>:
}

void rotateDCMotors(int direction)
{
	if (direction != 0)
      9a:	89 2b       	or	r24, r25
      9c:	39 f0       	breq	.+14     	; 0xac <rotateDCMotors+0x12>
	{
		// Rotate DC motor Clockwise ?
		PORTB &= ~(1 << PB0);
      9e:	88 b3       	in	r24, 0x18	; 24
      a0:	8e 7f       	andi	r24, 0xFE	; 254
      a2:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PB1);
      a4:	88 b3       	in	r24, 0x18	; 24
      a6:	82 60       	ori	r24, 0x02	; 2
      a8:	88 bb       	out	0x18, r24	; 24
      aa:	08 95       	ret
	}
	else
	{
		// Else rotate DC motor Counterclockwise
		PORTB |= (1 << PB0);
      ac:	88 b3       	in	r24, 0x18	; 24
      ae:	81 60       	ori	r24, 0x01	; 1
      b0:	88 bb       	out	0x18, r24	; 24
		PORTB &= ~(1 << PB1);
      b2:	88 b3       	in	r24, 0x18	; 24
      b4:	8d 7f       	andi	r24, 0xFD	; 253
      b6:	88 bb       	out	0x18, r24	; 24
      b8:	08 95       	ret

000000ba <stopDCMotors>:
}

void stopDCMotors()
{
	// stop Rotation DC motor
	PORTB &= ~(1 << PB0);
      ba:	88 b3       	in	r24, 0x18	; 24
      bc:	8e 7f       	andi	r24, 0xFE	; 254
      be:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~(1 << PB1);
      c0:	88 b3       	in	r24, 0x18	; 24
      c2:	8d 7f       	andi	r24, 0xFD	; 253
      c4:	88 bb       	out	0x18, r24	; 24
      c6:	08 95       	ret

000000c8 <initSteppers>:
 */ 

#include "stepper.h"

void initSteppers(){
	DDRA = 0xFF;
      c8:	8f ef       	ldi	r24, 0xFF	; 255
      ca:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
      cc:	84 bb       	out	0x14, r24	; 20
      ce:	08 95       	ret

000000d0 <rotateStepper_1>:
}

void rotateStepper_1(int distance)
{
      d0:	ac 01       	movw	r20, r24
	// Counterclockwise-0
	// 1 distance unit = 1 rotating

	int period;
	period = 100;
	if (distance>0)
      d2:	18 16       	cp	r1, r24
      d4:	19 06       	cpc	r1, r25
      d6:	e4 f1       	brlt	.+120    	; 0x150 <rotateStepper_1+0x80>
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	76 c0       	rjmp	.+236    	; 0x1ca <rotateStepper_1+0xfa>
	{
		for (int i = 0; i <distance; i++)
		{
			PORTA = 0x03;
      de:	93 e0       	ldi	r25, 0x03	; 3
      e0:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e2:	6f ef       	ldi	r22, 0xFF	; 255
      e4:	71 ee       	ldi	r23, 0xE1	; 225
      e6:	84 e0       	ldi	r24, 0x04	; 4
      e8:	61 50       	subi	r22, 0x01	; 1
      ea:	70 40       	sbci	r23, 0x00	; 0
      ec:	80 40       	sbci	r24, 0x00	; 0
      ee:	e1 f7       	brne	.-8      	; 0xe8 <rotateStepper_1+0x18>
      f0:	00 c0       	rjmp	.+0      	; 0xf2 <rotateStepper_1+0x22>
      f2:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x06;
      f4:	86 e0       	ldi	r24, 0x06	; 6
      f6:	8b bb       	out	0x1b, r24	; 27
      f8:	6f ef       	ldi	r22, 0xFF	; 255
      fa:	71 ee       	ldi	r23, 0xE1	; 225
      fc:	84 e0       	ldi	r24, 0x04	; 4
      fe:	61 50       	subi	r22, 0x01	; 1
     100:	70 40       	sbci	r23, 0x00	; 0
     102:	80 40       	sbci	r24, 0x00	; 0
     104:	e1 f7       	brne	.-8      	; 0xfe <rotateStepper_1+0x2e>
     106:	00 c0       	rjmp	.+0      	; 0x108 <rotateStepper_1+0x38>
     108:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x0c;
     10a:	8c e0       	ldi	r24, 0x0C	; 12
     10c:	8b bb       	out	0x1b, r24	; 27
     10e:	6f ef       	ldi	r22, 0xFF	; 255
     110:	71 ee       	ldi	r23, 0xE1	; 225
     112:	84 e0       	ldi	r24, 0x04	; 4
     114:	61 50       	subi	r22, 0x01	; 1
     116:	70 40       	sbci	r23, 0x00	; 0
     118:	80 40       	sbci	r24, 0x00	; 0
     11a:	e1 f7       	brne	.-8      	; 0x114 <rotateStepper_1+0x44>
     11c:	00 c0       	rjmp	.+0      	; 0x11e <rotateStepper_1+0x4e>
     11e:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x09;
     120:	89 e0       	ldi	r24, 0x09	; 9
     122:	8b bb       	out	0x1b, r24	; 27
     124:	6f ef       	ldi	r22, 0xFF	; 255
     126:	71 ee       	ldi	r23, 0xE1	; 225
     128:	84 e0       	ldi	r24, 0x04	; 4
     12a:	61 50       	subi	r22, 0x01	; 1
     12c:	70 40       	sbci	r23, 0x00	; 0
     12e:	80 40       	sbci	r24, 0x00	; 0
     130:	e1 f7       	brne	.-8      	; 0x12a <rotateStepper_1+0x5a>
     132:	00 c0       	rjmp	.+0      	; 0x134 <rotateStepper_1+0x64>
     134:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x03;
     136:	9b bb       	out	0x1b, r25	; 27
     138:	9f ef       	ldi	r25, 0xFF	; 255
     13a:	61 ee       	ldi	r22, 0xE1	; 225
     13c:	74 e0       	ldi	r23, 0x04	; 4
     13e:	91 50       	subi	r25, 0x01	; 1
     140:	60 40       	sbci	r22, 0x00	; 0
     142:	70 40       	sbci	r23, 0x00	; 0
     144:	e1 f7       	brne	.-8      	; 0x13e <rotateStepper_1+0x6e>
     146:	00 c0       	rjmp	.+0      	; 0x148 <rotateStepper_1+0x78>
     148:	00 00       	nop

	int period;
	period = 100;
	if (distance>0)
	{
		for (int i = 0; i <distance; i++)
     14a:	2f 5f       	subi	r18, 0xFF	; 255
     14c:	3f 4f       	sbci	r19, 0xFF	; 255
     14e:	02 c0       	rjmp	.+4      	; 0x154 <rotateStepper_1+0x84>
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	24 17       	cp	r18, r20
     156:	35 07       	cpc	r19, r21
     158:	14 f2       	brlt	.-124    	; 0xde <rotateStepper_1+0xe>
     15a:	08 95       	ret
	}
	else
	{
		for (int i = 0; i < abs(distance); i++)
		{
			PORTA = 0x03;
     15c:	23 e0       	ldi	r18, 0x03	; 3
     15e:	2b bb       	out	0x1b, r18	; 27
     160:	3f ef       	ldi	r19, 0xFF	; 255
     162:	61 ee       	ldi	r22, 0xE1	; 225
     164:	74 e0       	ldi	r23, 0x04	; 4
     166:	31 50       	subi	r19, 0x01	; 1
     168:	60 40       	sbci	r22, 0x00	; 0
     16a:	70 40       	sbci	r23, 0x00	; 0
     16c:	e1 f7       	brne	.-8      	; 0x166 <rotateStepper_1+0x96>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <rotateStepper_1+0xa0>
     170:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x09;
     172:	39 e0       	ldi	r19, 0x09	; 9
     174:	3b bb       	out	0x1b, r19	; 27
     176:	3f ef       	ldi	r19, 0xFF	; 255
     178:	61 ee       	ldi	r22, 0xE1	; 225
     17a:	74 e0       	ldi	r23, 0x04	; 4
     17c:	31 50       	subi	r19, 0x01	; 1
     17e:	60 40       	sbci	r22, 0x00	; 0
     180:	70 40       	sbci	r23, 0x00	; 0
     182:	e1 f7       	brne	.-8      	; 0x17c <rotateStepper_1+0xac>
     184:	00 c0       	rjmp	.+0      	; 0x186 <rotateStepper_1+0xb6>
     186:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x0c;
     188:	3c e0       	ldi	r19, 0x0C	; 12
     18a:	3b bb       	out	0x1b, r19	; 27
     18c:	3f ef       	ldi	r19, 0xFF	; 255
     18e:	61 ee       	ldi	r22, 0xE1	; 225
     190:	74 e0       	ldi	r23, 0x04	; 4
     192:	31 50       	subi	r19, 0x01	; 1
     194:	60 40       	sbci	r22, 0x00	; 0
     196:	70 40       	sbci	r23, 0x00	; 0
     198:	e1 f7       	brne	.-8      	; 0x192 <rotateStepper_1+0xc2>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <rotateStepper_1+0xcc>
     19c:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x06;
     19e:	36 e0       	ldi	r19, 0x06	; 6
     1a0:	3b bb       	out	0x1b, r19	; 27
     1a2:	3f ef       	ldi	r19, 0xFF	; 255
     1a4:	61 ee       	ldi	r22, 0xE1	; 225
     1a6:	74 e0       	ldi	r23, 0x04	; 4
     1a8:	31 50       	subi	r19, 0x01	; 1
     1aa:	60 40       	sbci	r22, 0x00	; 0
     1ac:	70 40       	sbci	r23, 0x00	; 0
     1ae:	e1 f7       	brne	.-8      	; 0x1a8 <rotateStepper_1+0xd8>
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <rotateStepper_1+0xe2>
     1b2:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x03;
     1b4:	2b bb       	out	0x1b, r18	; 27
     1b6:	2f ef       	ldi	r18, 0xFF	; 255
     1b8:	31 ee       	ldi	r19, 0xE1	; 225
     1ba:	64 e0       	ldi	r22, 0x04	; 4
     1bc:	21 50       	subi	r18, 0x01	; 1
     1be:	30 40       	sbci	r19, 0x00	; 0
     1c0:	60 40       	sbci	r22, 0x00	; 0
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <rotateStepper_1+0xec>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <rotateStepper_1+0xf6>
     1c6:	00 00       	nop
			_delay_ms(period);
		}
	}
	else
	{
		for (int i = 0; i < abs(distance); i++)
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	9a 01       	movw	r18, r20
     1cc:	55 23       	and	r21, r21
     1ce:	24 f4       	brge	.+8      	; 0x1d8 <rotateStepper_1+0x108>
     1d0:	22 27       	eor	r18, r18
     1d2:	33 27       	eor	r19, r19
     1d4:	24 1b       	sub	r18, r20
     1d6:	35 0b       	sbc	r19, r21
     1d8:	82 17       	cp	r24, r18
     1da:	93 07       	cpc	r25, r19
     1dc:	0c f4       	brge	.+2      	; 0x1e0 <rotateStepper_1+0x110>
     1de:	be cf       	rjmp	.-132    	; 0x15c <rotateStepper_1+0x8c>
     1e0:	08 95       	ret

000001e2 <rotateStepper_2>:
			_delay_ms(period);
		}
	}
}

void rotateStepper_2(int distance){
     1e2:	ac 01       	movw	r20, r24
	// Counterclockwise-0
	// 1 distance unit = 1 rotating

	int period;
	period = 100;
	if (distance>0)
     1e4:	18 16       	cp	r1, r24
     1e6:	19 06       	cpc	r1, r25
     1e8:	e4 f1       	brlt	.+120    	; 0x262 <rotateStepper_2+0x80>
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	7c c0       	rjmp	.+248    	; 0x2e8 <rotateStepper_2+0x106>
	{
		/* Rotate  clockwise */
		for (int i = 0; i <distance; i++)
		{
			PORTA = 0x30;
     1f0:	90 e3       	ldi	r25, 0x30	; 48
     1f2:	9b bb       	out	0x1b, r25	; 27
     1f4:	6f ef       	ldi	r22, 0xFF	; 255
     1f6:	71 ee       	ldi	r23, 0xE1	; 225
     1f8:	84 e0       	ldi	r24, 0x04	; 4
     1fa:	61 50       	subi	r22, 0x01	; 1
     1fc:	70 40       	sbci	r23, 0x00	; 0
     1fe:	80 40       	sbci	r24, 0x00	; 0
     200:	e1 f7       	brne	.-8      	; 0x1fa <rotateStepper_2+0x18>
     202:	00 c0       	rjmp	.+0      	; 0x204 <rotateStepper_2+0x22>
     204:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x60;
     206:	80 e6       	ldi	r24, 0x60	; 96
     208:	8b bb       	out	0x1b, r24	; 27
     20a:	6f ef       	ldi	r22, 0xFF	; 255
     20c:	71 ee       	ldi	r23, 0xE1	; 225
     20e:	84 e0       	ldi	r24, 0x04	; 4
     210:	61 50       	subi	r22, 0x01	; 1
     212:	70 40       	sbci	r23, 0x00	; 0
     214:	80 40       	sbci	r24, 0x00	; 0
     216:	e1 f7       	brne	.-8      	; 0x210 <rotateStepper_2+0x2e>
     218:	00 c0       	rjmp	.+0      	; 0x21a <rotateStepper_2+0x38>
     21a:	00 00       	nop
			_delay_ms(period);
			PORTA = 0xc0;
     21c:	80 ec       	ldi	r24, 0xC0	; 192
     21e:	8b bb       	out	0x1b, r24	; 27
     220:	6f ef       	ldi	r22, 0xFF	; 255
     222:	71 ee       	ldi	r23, 0xE1	; 225
     224:	84 e0       	ldi	r24, 0x04	; 4
     226:	61 50       	subi	r22, 0x01	; 1
     228:	70 40       	sbci	r23, 0x00	; 0
     22a:	80 40       	sbci	r24, 0x00	; 0
     22c:	e1 f7       	brne	.-8      	; 0x226 <rotateStepper_2+0x44>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <rotateStepper_2+0x4e>
     230:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x90;
     232:	80 e9       	ldi	r24, 0x90	; 144
     234:	8b bb       	out	0x1b, r24	; 27
     236:	6f ef       	ldi	r22, 0xFF	; 255
     238:	71 ee       	ldi	r23, 0xE1	; 225
     23a:	84 e0       	ldi	r24, 0x04	; 4
     23c:	61 50       	subi	r22, 0x01	; 1
     23e:	70 40       	sbci	r23, 0x00	; 0
     240:	80 40       	sbci	r24, 0x00	; 0
     242:	e1 f7       	brne	.-8      	; 0x23c <rotateStepper_2+0x5a>
     244:	00 c0       	rjmp	.+0      	; 0x246 <rotateStepper_2+0x64>
     246:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x30;
     248:	9b bb       	out	0x1b, r25	; 27
     24a:	9f ef       	ldi	r25, 0xFF	; 255
     24c:	61 ee       	ldi	r22, 0xE1	; 225
     24e:	74 e0       	ldi	r23, 0x04	; 4
     250:	91 50       	subi	r25, 0x01	; 1
     252:	60 40       	sbci	r22, 0x00	; 0
     254:	70 40       	sbci	r23, 0x00	; 0
     256:	e1 f7       	brne	.-8      	; 0x250 <rotateStepper_2+0x6e>
     258:	00 c0       	rjmp	.+0      	; 0x25a <rotateStepper_2+0x78>
     25a:	00 00       	nop
	int period;
	period = 100;
	if (distance>0)
	{
		/* Rotate  clockwise */
		for (int i = 0; i <distance; i++)
     25c:	2f 5f       	subi	r18, 0xFF	; 255
     25e:	3f 4f       	sbci	r19, 0xFF	; 255
     260:	02 c0       	rjmp	.+4      	; 0x266 <rotateStepper_2+0x84>
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	24 17       	cp	r18, r20
     268:	35 07       	cpc	r19, r21
     26a:	14 f2       	brlt	.-124    	; 0x1f0 <rotateStepper_2+0xe>
     26c:	8f e3       	ldi	r24, 0x3F	; 63
     26e:	9c e9       	ldi	r25, 0x9C	; 156
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <rotateStepper_2+0x8e>
     274:	00 c0       	rjmp	.+0      	; 0x276 <rotateStepper_2+0x94>
     276:	00 00       	nop
     278:	08 95       	ret
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < abs(distance); i++)
		{
			PORTA = 0x30;
     27a:	20 e3       	ldi	r18, 0x30	; 48
     27c:	2b bb       	out	0x1b, r18	; 27
     27e:	3f ef       	ldi	r19, 0xFF	; 255
     280:	61 ee       	ldi	r22, 0xE1	; 225
     282:	74 e0       	ldi	r23, 0x04	; 4
     284:	31 50       	subi	r19, 0x01	; 1
     286:	60 40       	sbci	r22, 0x00	; 0
     288:	70 40       	sbci	r23, 0x00	; 0
     28a:	e1 f7       	brne	.-8      	; 0x284 <rotateStepper_2+0xa2>
     28c:	00 c0       	rjmp	.+0      	; 0x28e <rotateStepper_2+0xac>
     28e:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x90;
     290:	30 e9       	ldi	r19, 0x90	; 144
     292:	3b bb       	out	0x1b, r19	; 27
     294:	3f ef       	ldi	r19, 0xFF	; 255
     296:	61 ee       	ldi	r22, 0xE1	; 225
     298:	74 e0       	ldi	r23, 0x04	; 4
     29a:	31 50       	subi	r19, 0x01	; 1
     29c:	60 40       	sbci	r22, 0x00	; 0
     29e:	70 40       	sbci	r23, 0x00	; 0
     2a0:	e1 f7       	brne	.-8      	; 0x29a <rotateStepper_2+0xb8>
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <rotateStepper_2+0xc2>
     2a4:	00 00       	nop
			_delay_ms(period);
			PORTA = 0xc0;
     2a6:	30 ec       	ldi	r19, 0xC0	; 192
     2a8:	3b bb       	out	0x1b, r19	; 27
     2aa:	3f ef       	ldi	r19, 0xFF	; 255
     2ac:	61 ee       	ldi	r22, 0xE1	; 225
     2ae:	74 e0       	ldi	r23, 0x04	; 4
     2b0:	31 50       	subi	r19, 0x01	; 1
     2b2:	60 40       	sbci	r22, 0x00	; 0
     2b4:	70 40       	sbci	r23, 0x00	; 0
     2b6:	e1 f7       	brne	.-8      	; 0x2b0 <rotateStepper_2+0xce>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <rotateStepper_2+0xd8>
     2ba:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x60;
     2bc:	30 e6       	ldi	r19, 0x60	; 96
     2be:	3b bb       	out	0x1b, r19	; 27
     2c0:	3f ef       	ldi	r19, 0xFF	; 255
     2c2:	61 ee       	ldi	r22, 0xE1	; 225
     2c4:	74 e0       	ldi	r23, 0x04	; 4
     2c6:	31 50       	subi	r19, 0x01	; 1
     2c8:	60 40       	sbci	r22, 0x00	; 0
     2ca:	70 40       	sbci	r23, 0x00	; 0
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <rotateStepper_2+0xe4>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <rotateStepper_2+0xee>
     2d0:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x30;
     2d2:	2b bb       	out	0x1b, r18	; 27
     2d4:	2f ef       	ldi	r18, 0xFF	; 255
     2d6:	31 ee       	ldi	r19, 0xE1	; 225
     2d8:	64 e0       	ldi	r22, 0x04	; 4
     2da:	21 50       	subi	r18, 0x01	; 1
     2dc:	30 40       	sbci	r19, 0x00	; 0
     2de:	60 40       	sbci	r22, 0x00	; 0
     2e0:	e1 f7       	brne	.-8      	; 0x2da <rotateStepper_2+0xf8>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <rotateStepper_2+0x102>
     2e4:	00 00       	nop
		_delay_ms(10);
	}
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < abs(distance); i++)
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	9a 01       	movw	r18, r20
     2ea:	55 23       	and	r21, r21
     2ec:	24 f4       	brge	.+8      	; 0x2f6 <rotateStepper_2+0x114>
     2ee:	22 27       	eor	r18, r18
     2f0:	33 27       	eor	r19, r19
     2f2:	24 1b       	sub	r18, r20
     2f4:	35 0b       	sbc	r19, r21
     2f6:	82 17       	cp	r24, r18
     2f8:	93 07       	cpc	r25, r19
     2fa:	0c f4       	brge	.+2      	; 0x2fe <rotateStepper_2+0x11c>
     2fc:	be cf       	rjmp	.-132    	; 0x27a <rotateStepper_2+0x98>
     2fe:	8f e3       	ldi	r24, 0x3F	; 63
     300:	9c e9       	ldi	r25, 0x9C	; 156
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <rotateStepper_2+0x120>
     306:	00 c0       	rjmp	.+0      	; 0x308 <rotateStepper_2+0x126>
     308:	00 00       	nop
     30a:	08 95       	ret

0000030c <rotateStepper_3>:

		_delay_ms(10);
	}
}

void rotateStepper_3(int distance){
     30c:	ac 01       	movw	r20, r24
	// Counterclockwise-0
	// 1 distance unit = 1 rotating

	int period;
	period = 100;
	if (distance>0)
     30e:	18 16       	cp	r1, r24
     310:	19 06       	cpc	r1, r25
     312:	e4 f1       	brlt	.+120    	; 0x38c <rotateStepper_3+0x80>
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	7c c0       	rjmp	.+248    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	{
		/* Rotate  clockwise */
		for(int i=0;i<distance;i++)
		{
			PORTC = 0x03;
     31a:	93 e0       	ldi	r25, 0x03	; 3
     31c:	95 bb       	out	0x15, r25	; 21
     31e:	6f ef       	ldi	r22, 0xFF	; 255
     320:	71 ee       	ldi	r23, 0xE1	; 225
     322:	84 e0       	ldi	r24, 0x04	; 4
     324:	61 50       	subi	r22, 0x01	; 1
     326:	70 40       	sbci	r23, 0x00	; 0
     328:	80 40       	sbci	r24, 0x00	; 0
     32a:	e1 f7       	brne	.-8      	; 0x324 <rotateStepper_3+0x18>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <rotateStepper_3+0x22>
     32e:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x06;
     330:	86 e0       	ldi	r24, 0x06	; 6
     332:	85 bb       	out	0x15, r24	; 21
     334:	6f ef       	ldi	r22, 0xFF	; 255
     336:	71 ee       	ldi	r23, 0xE1	; 225
     338:	84 e0       	ldi	r24, 0x04	; 4
     33a:	61 50       	subi	r22, 0x01	; 1
     33c:	70 40       	sbci	r23, 0x00	; 0
     33e:	80 40       	sbci	r24, 0x00	; 0
     340:	e1 f7       	brne	.-8      	; 0x33a <rotateStepper_3+0x2e>
     342:	00 c0       	rjmp	.+0      	; 0x344 <rotateStepper_3+0x38>
     344:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x0c;
     346:	8c e0       	ldi	r24, 0x0C	; 12
     348:	85 bb       	out	0x15, r24	; 21
     34a:	6f ef       	ldi	r22, 0xFF	; 255
     34c:	71 ee       	ldi	r23, 0xE1	; 225
     34e:	84 e0       	ldi	r24, 0x04	; 4
     350:	61 50       	subi	r22, 0x01	; 1
     352:	70 40       	sbci	r23, 0x00	; 0
     354:	80 40       	sbci	r24, 0x00	; 0
     356:	e1 f7       	brne	.-8      	; 0x350 <rotateStepper_3+0x44>
     358:	00 c0       	rjmp	.+0      	; 0x35a <rotateStepper_3+0x4e>
     35a:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x09;
     35c:	89 e0       	ldi	r24, 0x09	; 9
     35e:	85 bb       	out	0x15, r24	; 21
     360:	6f ef       	ldi	r22, 0xFF	; 255
     362:	71 ee       	ldi	r23, 0xE1	; 225
     364:	84 e0       	ldi	r24, 0x04	; 4
     366:	61 50       	subi	r22, 0x01	; 1
     368:	70 40       	sbci	r23, 0x00	; 0
     36a:	80 40       	sbci	r24, 0x00	; 0
     36c:	e1 f7       	brne	.-8      	; 0x366 <rotateStepper_3+0x5a>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <rotateStepper_3+0x64>
     370:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x03;
     372:	95 bb       	out	0x15, r25	; 21
     374:	9f ef       	ldi	r25, 0xFF	; 255
     376:	61 ee       	ldi	r22, 0xE1	; 225
     378:	74 e0       	ldi	r23, 0x04	; 4
     37a:	91 50       	subi	r25, 0x01	; 1
     37c:	60 40       	sbci	r22, 0x00	; 0
     37e:	70 40       	sbci	r23, 0x00	; 0
     380:	e1 f7       	brne	.-8      	; 0x37a <rotateStepper_3+0x6e>
     382:	00 c0       	rjmp	.+0      	; 0x384 <rotateStepper_3+0x78>
     384:	00 00       	nop
	int period;
	period = 100;
	if (distance>0)
	{
		/* Rotate  clockwise */
		for(int i=0;i<distance;i++)
     386:	2f 5f       	subi	r18, 0xFF	; 255
     388:	3f 4f       	sbci	r19, 0xFF	; 255
     38a:	02 c0       	rjmp	.+4      	; 0x390 <rotateStepper_3+0x84>
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	24 17       	cp	r18, r20
     392:	35 07       	cpc	r19, r21
     394:	14 f2       	brlt	.-124    	; 0x31a <rotateStepper_3+0xe>
     396:	8f e3       	ldi	r24, 0x3F	; 63
     398:	9c e9       	ldi	r25, 0x9C	; 156
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	f1 f7       	brne	.-4      	; 0x39a <rotateStepper_3+0x8e>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <rotateStepper_3+0x94>
     3a0:	00 00       	nop
     3a2:	08 95       	ret
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < abs(distance); i++)
		{
			PORTC = 0x03;
     3a4:	23 e0       	ldi	r18, 0x03	; 3
     3a6:	25 bb       	out	0x15, r18	; 21
     3a8:	3f ef       	ldi	r19, 0xFF	; 255
     3aa:	61 ee       	ldi	r22, 0xE1	; 225
     3ac:	74 e0       	ldi	r23, 0x04	; 4
     3ae:	31 50       	subi	r19, 0x01	; 1
     3b0:	60 40       	sbci	r22, 0x00	; 0
     3b2:	70 40       	sbci	r23, 0x00	; 0
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <rotateStepper_3+0xa2>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <rotateStepper_3+0xac>
     3b8:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x09;
     3ba:	39 e0       	ldi	r19, 0x09	; 9
     3bc:	35 bb       	out	0x15, r19	; 21
     3be:	3f ef       	ldi	r19, 0xFF	; 255
     3c0:	61 ee       	ldi	r22, 0xE1	; 225
     3c2:	74 e0       	ldi	r23, 0x04	; 4
     3c4:	31 50       	subi	r19, 0x01	; 1
     3c6:	60 40       	sbci	r22, 0x00	; 0
     3c8:	70 40       	sbci	r23, 0x00	; 0
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <rotateStepper_3+0xb8>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <rotateStepper_3+0xc2>
     3ce:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x0c;
     3d0:	3c e0       	ldi	r19, 0x0C	; 12
     3d2:	35 bb       	out	0x15, r19	; 21
     3d4:	3f ef       	ldi	r19, 0xFF	; 255
     3d6:	61 ee       	ldi	r22, 0xE1	; 225
     3d8:	74 e0       	ldi	r23, 0x04	; 4
     3da:	31 50       	subi	r19, 0x01	; 1
     3dc:	60 40       	sbci	r22, 0x00	; 0
     3de:	70 40       	sbci	r23, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <rotateStepper_3+0xce>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <rotateStepper_3+0xd8>
     3e4:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x06;
     3e6:	36 e0       	ldi	r19, 0x06	; 6
     3e8:	35 bb       	out	0x15, r19	; 21
     3ea:	3f ef       	ldi	r19, 0xFF	; 255
     3ec:	61 ee       	ldi	r22, 0xE1	; 225
     3ee:	74 e0       	ldi	r23, 0x04	; 4
     3f0:	31 50       	subi	r19, 0x01	; 1
     3f2:	60 40       	sbci	r22, 0x00	; 0
     3f4:	70 40       	sbci	r23, 0x00	; 0
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <rotateStepper_3+0xe4>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <rotateStepper_3+0xee>
     3fa:	00 00       	nop
			_delay_ms(period);
			PORTC = 0x03;
     3fc:	25 bb       	out	0x15, r18	; 21
     3fe:	2f ef       	ldi	r18, 0xFF	; 255
     400:	31 ee       	ldi	r19, 0xE1	; 225
     402:	64 e0       	ldi	r22, 0x04	; 4
     404:	21 50       	subi	r18, 0x01	; 1
     406:	30 40       	sbci	r19, 0x00	; 0
     408:	60 40       	sbci	r22, 0x00	; 0
     40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     40e:	00 00       	nop
		_delay_ms(10);
	}
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < abs(distance); i++)
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	9a 01       	movw	r18, r20
     414:	55 23       	and	r21, r21
     416:	24 f4       	brge	.+8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     418:	22 27       	eor	r18, r18
     41a:	33 27       	eor	r19, r19
     41c:	24 1b       	sub	r18, r20
     41e:	35 0b       	sbc	r19, r21
     420:	82 17       	cp	r24, r18
     422:	93 07       	cpc	r25, r19
     424:	0c f4       	brge	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     426:	be cf       	rjmp	.-132    	; 0x3a4 <rotateStepper_3+0x98>
     428:	8f e3       	ldi	r24, 0x3F	; 63
     42a:	9c e9       	ldi	r25, 0x9C	; 156
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	f1 f7       	brne	.-4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     432:	00 00       	nop
     434:	08 95       	ret

00000436 <rotateStepper_4>:
	// Counterclockwise-0
	// 1 distance unit = 1 rotating

	int period;
	period = 100;
	if (direction == 1)
     436:	01 97       	sbiw	r24, 0x01	; 1
     438:	b9 f4       	brne	.+46     	; 0x468 <rotateStepper_4+0x32>
	{
		/* Rotate  clockwise */
		PORTC = 0x30;
     43a:	80 e3       	ldi	r24, 0x30	; 48
     43c:	85 bb       	out	0x15, r24	; 21
     43e:	2f ef       	ldi	r18, 0xFF	; 255
     440:	81 ee       	ldi	r24, 0xE1	; 225
     442:	94 e0       	ldi	r25, 0x04	; 4
     444:	21 50       	subi	r18, 0x01	; 1
     446:	80 40       	sbci	r24, 0x00	; 0
     448:	90 40       	sbci	r25, 0x00	; 0
     44a:	e1 f7       	brne	.-8      	; 0x444 <rotateStepper_4+0xe>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <rotateStepper_4+0x18>
     44e:	00 00       	nop
		_delay_ms(period);
		PORTC = 0x60;
     450:	80 e6       	ldi	r24, 0x60	; 96
     452:	85 bb       	out	0x15, r24	; 21
     454:	2f ef       	ldi	r18, 0xFF	; 255
     456:	81 ee       	ldi	r24, 0xE1	; 225
     458:	94 e0       	ldi	r25, 0x04	; 4
     45a:	21 50       	subi	r18, 0x01	; 1
     45c:	80 40       	sbci	r24, 0x00	; 0
     45e:	90 40       	sbci	r25, 0x00	; 0
     460:	e1 f7       	brne	.-8      	; 0x45a <rotateStepper_4+0x24>
     462:	00 c0       	rjmp	.+0      	; 0x464 <rotateStepper_4+0x2e>
     464:	00 00       	nop
     466:	08 95       	ret
		_delay_ms(period);
	}
	else
	{
		/* Rotate  Counterclockwise  */
		PORTC = 0x60;
     468:	80 e6       	ldi	r24, 0x60	; 96
     46a:	85 bb       	out	0x15, r24	; 21
     46c:	2f ef       	ldi	r18, 0xFF	; 255
     46e:	81 ee       	ldi	r24, 0xE1	; 225
     470:	94 e0       	ldi	r25, 0x04	; 4
     472:	21 50       	subi	r18, 0x01	; 1
     474:	80 40       	sbci	r24, 0x00	; 0
     476:	90 40       	sbci	r25, 0x00	; 0
     478:	e1 f7       	brne	.-8      	; 0x472 <rotateStepper_4+0x3c>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <rotateStepper_4+0x46>
     47c:	00 00       	nop
		_delay_ms(period);
		PORTC = 0x30;
     47e:	80 e3       	ldi	r24, 0x30	; 48
     480:	85 bb       	out	0x15, r24	; 21
     482:	2f ef       	ldi	r18, 0xFF	; 255
     484:	81 ee       	ldi	r24, 0xE1	; 225
     486:	94 e0       	ldi	r25, 0x04	; 4
     488:	21 50       	subi	r18, 0x01	; 1
     48a:	80 40       	sbci	r24, 0x00	; 0
     48c:	90 40       	sbci	r25, 0x00	; 0
     48e:	e1 f7       	brne	.-8      	; 0x488 <rotateStepper_4+0x52>
     490:	00 c0       	rjmp	.+0      	; 0x492 <rotateStepper_4+0x5c>
     492:	00 00       	nop
     494:	08 95       	ret

00000496 <rotateStepper_1_and_2>:

void rotateStepper_1_and_2(int Stepper_1_Distance,int Stepper_2_Distance){
	int period;
	period = 100;
	
	if(Stepper_1_Distance>0&&Stepper_2_Distance>0){
     496:	18 16       	cp	r1, r24
     498:	19 06       	cpc	r1, r25
     49a:	0c f0       	brlt	.+2      	; 0x49e <rotateStepper_1_and_2+0x8>
     49c:	68 c1       	rjmp	.+720    	; 0x76e <rotateStepper_1_and_2+0x2d8>
     49e:	16 16       	cp	r1, r22
     4a0:	17 06       	cpc	r1, r23
     4a2:	0c f0       	brlt	.+2      	; 0x4a6 <rotateStepper_1_and_2+0x10>
     4a4:	64 c1       	rjmp	.+712    	; 0x76e <rotateStepper_1_and_2+0x2d8>
		int defference=abs(Stepper_1_Distance-Stepper_2_Distance);
     4a6:	9c 01       	movw	r18, r24
     4a8:	26 1b       	sub	r18, r22
     4aa:	37 0b       	sbc	r19, r23
     4ac:	a9 01       	movw	r20, r18
     4ae:	22 f4       	brpl	.+8      	; 0x4b8 <rotateStepper_1_and_2+0x22>
     4b0:	44 27       	eor	r20, r20
     4b2:	55 27       	eor	r21, r21
     4b4:	42 1b       	sub	r20, r18
     4b6:	53 0b       	sbc	r21, r19
		if (Stepper_1_Distance>Stepper_2_Distance){
     4b8:	68 17       	cp	r22, r24
     4ba:	79 07       	cpc	r23, r25
     4bc:	cc f1       	brlt	.+114    	; 0x530 <rotateStepper_1_and_2+0x9a>
     4be:	87 c0       	rjmp	.+270    	; 0x5ce <rotateStepper_1_and_2+0x138>
			for (int i = 0; i <Stepper_2_Distance; i++)
			{
				PORTA = 0x33;
     4c0:	23 e3       	ldi	r18, 0x33	; 51
     4c2:	2b bb       	out	0x1b, r18	; 27
     4c4:	3f ef       	ldi	r19, 0xFF	; 255
     4c6:	a1 ee       	ldi	r26, 0xE1	; 225
     4c8:	b4 e0       	ldi	r27, 0x04	; 4
     4ca:	31 50       	subi	r19, 0x01	; 1
     4cc:	a0 40       	sbci	r26, 0x00	; 0
     4ce:	b0 40       	sbci	r27, 0x00	; 0
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <rotateStepper_1_and_2+0x34>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <rotateStepper_1_and_2+0x3e>
     4d4:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x66;
     4d6:	36 e6       	ldi	r19, 0x66	; 102
     4d8:	3b bb       	out	0x1b, r19	; 27
     4da:	ef ef       	ldi	r30, 0xFF	; 255
     4dc:	f1 ee       	ldi	r31, 0xE1	; 225
     4de:	34 e0       	ldi	r19, 0x04	; 4
     4e0:	e1 50       	subi	r30, 0x01	; 1
     4e2:	f0 40       	sbci	r31, 0x00	; 0
     4e4:	30 40       	sbci	r19, 0x00	; 0
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <rotateStepper_1_and_2+0x4a>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <rotateStepper_1_and_2+0x54>
     4ea:	00 00       	nop
				_delay_ms(period);
				PORTA = 0xcc;
     4ec:	3c ec       	ldi	r19, 0xCC	; 204
     4ee:	3b bb       	out	0x1b, r19	; 27
     4f0:	af ef       	ldi	r26, 0xFF	; 255
     4f2:	b1 ee       	ldi	r27, 0xE1	; 225
     4f4:	e4 e0       	ldi	r30, 0x04	; 4
     4f6:	a1 50       	subi	r26, 0x01	; 1
     4f8:	b0 40       	sbci	r27, 0x00	; 0
     4fa:	e0 40       	sbci	r30, 0x00	; 0
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <rotateStepper_1_and_2+0x60>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <rotateStepper_1_and_2+0x6a>
     500:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x99;
     502:	39 e9       	ldi	r19, 0x99	; 153
     504:	3b bb       	out	0x1b, r19	; 27
     506:	ff ef       	ldi	r31, 0xFF	; 255
     508:	31 ee       	ldi	r19, 0xE1	; 225
     50a:	a4 e0       	ldi	r26, 0x04	; 4
     50c:	f1 50       	subi	r31, 0x01	; 1
     50e:	30 40       	sbci	r19, 0x00	; 0
     510:	a0 40       	sbci	r26, 0x00	; 0
     512:	e1 f7       	brne	.-8      	; 0x50c <rotateStepper_1_and_2+0x76>
     514:	00 c0       	rjmp	.+0      	; 0x516 <rotateStepper_1_and_2+0x80>
     516:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x33;
     518:	2b bb       	out	0x1b, r18	; 27
     51a:	bf ef       	ldi	r27, 0xFF	; 255
     51c:	e1 ee       	ldi	r30, 0xE1	; 225
     51e:	f4 e0       	ldi	r31, 0x04	; 4
     520:	b1 50       	subi	r27, 0x01	; 1
     522:	e0 40       	sbci	r30, 0x00	; 0
     524:	f0 40       	sbci	r31, 0x00	; 0
     526:	e1 f7       	brne	.-8      	; 0x520 <rotateStepper_1_and_2+0x8a>
     528:	00 c0       	rjmp	.+0      	; 0x52a <rotateStepper_1_and_2+0x94>
     52a:	00 00       	nop
	period = 100;
	
	if(Stepper_1_Distance>0&&Stepper_2_Distance>0){
		int defference=abs(Stepper_1_Distance-Stepper_2_Distance);
		if (Stepper_1_Distance>Stepper_2_Distance){
			for (int i = 0; i <Stepper_2_Distance; i++)
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	02 c0       	rjmp	.+4      	; 0x534 <rotateStepper_1_and_2+0x9e>
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	86 17       	cp	r24, r22
     536:	97 07       	cpc	r25, r23
     538:	1c f2       	brlt	.-122    	; 0x4c0 <rotateStepper_1_and_2+0x2a>
     53a:	8f e3       	ldi	r24, 0x3F	; 63
     53c:	9c e9       	ldi	r25, 0x9C	; 156
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <rotateStepper_1_and_2+0xa8>
     542:	00 c0       	rjmp	.+0      	; 0x544 <rotateStepper_1_and_2+0xae>
     544:	00 00       	nop
				PORTA = 0x33;
				_delay_ms(period);
			}
			_delay_ms(10);
			
			for (int i = 0; i <defference; i++)
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	37 c0       	rjmp	.+110    	; 0x5ba <rotateStepper_1_and_2+0x124>
			{
				PORTA = 0x03;
     54c:	23 e0       	ldi	r18, 0x03	; 3
     54e:	2b bb       	out	0x1b, r18	; 27
     550:	af ef       	ldi	r26, 0xFF	; 255
     552:	b1 ee       	ldi	r27, 0xE1	; 225
     554:	e4 e0       	ldi	r30, 0x04	; 4
     556:	a1 50       	subi	r26, 0x01	; 1
     558:	b0 40       	sbci	r27, 0x00	; 0
     55a:	e0 40       	sbci	r30, 0x00	; 0
     55c:	e1 f7       	brne	.-8      	; 0x556 <rotateStepper_1_and_2+0xc0>
     55e:	00 c0       	rjmp	.+0      	; 0x560 <rotateStepper_1_and_2+0xca>
     560:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x06;
     562:	36 e0       	ldi	r19, 0x06	; 6
     564:	3b bb       	out	0x1b, r19	; 27
     566:	ff ef       	ldi	r31, 0xFF	; 255
     568:	31 ee       	ldi	r19, 0xE1	; 225
     56a:	64 e0       	ldi	r22, 0x04	; 4
     56c:	f1 50       	subi	r31, 0x01	; 1
     56e:	30 40       	sbci	r19, 0x00	; 0
     570:	60 40       	sbci	r22, 0x00	; 0
     572:	e1 f7       	brne	.-8      	; 0x56c <rotateStepper_1_and_2+0xd6>
     574:	00 c0       	rjmp	.+0      	; 0x576 <rotateStepper_1_and_2+0xe0>
     576:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x0c;
     578:	3c e0       	ldi	r19, 0x0C	; 12
     57a:	3b bb       	out	0x1b, r19	; 27
     57c:	7f ef       	ldi	r23, 0xFF	; 255
     57e:	a1 ee       	ldi	r26, 0xE1	; 225
     580:	b4 e0       	ldi	r27, 0x04	; 4
     582:	71 50       	subi	r23, 0x01	; 1
     584:	a0 40       	sbci	r26, 0x00	; 0
     586:	b0 40       	sbci	r27, 0x00	; 0
     588:	e1 f7       	brne	.-8      	; 0x582 <rotateStepper_1_and_2+0xec>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <rotateStepper_1_and_2+0xf6>
     58c:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x09;
     58e:	39 e0       	ldi	r19, 0x09	; 9
     590:	3b bb       	out	0x1b, r19	; 27
     592:	ef ef       	ldi	r30, 0xFF	; 255
     594:	f1 ee       	ldi	r31, 0xE1	; 225
     596:	34 e0       	ldi	r19, 0x04	; 4
     598:	e1 50       	subi	r30, 0x01	; 1
     59a:	f0 40       	sbci	r31, 0x00	; 0
     59c:	30 40       	sbci	r19, 0x00	; 0
     59e:	e1 f7       	brne	.-8      	; 0x598 <rotateStepper_1_and_2+0x102>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <rotateStepper_1_and_2+0x10c>
     5a2:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x03;
     5a4:	2b bb       	out	0x1b, r18	; 27
     5a6:	6f ef       	ldi	r22, 0xFF	; 255
     5a8:	71 ee       	ldi	r23, 0xE1	; 225
     5aa:	a4 e0       	ldi	r26, 0x04	; 4
     5ac:	61 50       	subi	r22, 0x01	; 1
     5ae:	70 40       	sbci	r23, 0x00	; 0
     5b0:	a0 40       	sbci	r26, 0x00	; 0
     5b2:	e1 f7       	brne	.-8      	; 0x5ac <rotateStepper_1_and_2+0x116>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <rotateStepper_1_and_2+0x120>
     5b6:	00 00       	nop
				PORTA = 0x33;
				_delay_ms(period);
			}
			_delay_ms(10);
			
			for (int i = 0; i <defference; i++)
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	84 17       	cp	r24, r20
     5bc:	95 07       	cpc	r25, r21
     5be:	34 f2       	brlt	.-116    	; 0x54c <rotateStepper_1_and_2+0xb6>
     5c0:	ef e3       	ldi	r30, 0x3F	; 63
     5c2:	fc e9       	ldi	r31, 0x9C	; 156
     5c4:	31 97       	sbiw	r30, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <rotateStepper_1_and_2+0x12e>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <rotateStepper_1_and_2+0x134>
     5ca:	00 00       	nop
     5cc:	08 95       	ret
				PORTA = 0x03;
				_delay_ms(period);
			}
			_delay_ms(10);
			
		}else  if(Stepper_2_Distance>Stepper_1_Distance){
     5ce:	86 17       	cp	r24, r22
     5d0:	97 07       	cpc	r25, r23
     5d2:	e4 f1       	brlt	.+120    	; 0x64c <rotateStepper_1_and_2+0x1b6>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	c0 c0       	rjmp	.+384    	; 0x75a <rotateStepper_1_and_2+0x2c4>
			for (int i = 0; i <Stepper_1_Distance; i++)
			{
				PORTA = 0x33;
     5da:	63 e3       	ldi	r22, 0x33	; 51
     5dc:	6b bb       	out	0x1b, r22	; 27
     5de:	ff ef       	ldi	r31, 0xFF	; 255
     5e0:	71 ee       	ldi	r23, 0xE1	; 225
     5e2:	a4 e0       	ldi	r26, 0x04	; 4
     5e4:	f1 50       	subi	r31, 0x01	; 1
     5e6:	70 40       	sbci	r23, 0x00	; 0
     5e8:	a0 40       	sbci	r26, 0x00	; 0
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <rotateStepper_1_and_2+0x14e>
     5ec:	00 c0       	rjmp	.+0      	; 0x5ee <rotateStepper_1_and_2+0x158>
     5ee:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x66;
     5f0:	76 e6       	ldi	r23, 0x66	; 102
     5f2:	7b bb       	out	0x1b, r23	; 27
     5f4:	bf ef       	ldi	r27, 0xFF	; 255
     5f6:	e1 ee       	ldi	r30, 0xE1	; 225
     5f8:	f4 e0       	ldi	r31, 0x04	; 4
     5fa:	b1 50       	subi	r27, 0x01	; 1
     5fc:	e0 40       	sbci	r30, 0x00	; 0
     5fe:	f0 40       	sbci	r31, 0x00	; 0
     600:	e1 f7       	brne	.-8      	; 0x5fa <rotateStepper_1_and_2+0x164>
     602:	00 c0       	rjmp	.+0      	; 0x604 <rotateStepper_1_and_2+0x16e>
     604:	00 00       	nop
				_delay_ms(period);
				PORTA = 0xcc;
     606:	7c ec       	ldi	r23, 0xCC	; 204
     608:	7b bb       	out	0x1b, r23	; 27
     60a:	7f ef       	ldi	r23, 0xFF	; 255
     60c:	a1 ee       	ldi	r26, 0xE1	; 225
     60e:	b4 e0       	ldi	r27, 0x04	; 4
     610:	71 50       	subi	r23, 0x01	; 1
     612:	a0 40       	sbci	r26, 0x00	; 0
     614:	b0 40       	sbci	r27, 0x00	; 0
     616:	e1 f7       	brne	.-8      	; 0x610 <rotateStepper_1_and_2+0x17a>
     618:	00 c0       	rjmp	.+0      	; 0x61a <rotateStepper_1_and_2+0x184>
     61a:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x99;
     61c:	79 e9       	ldi	r23, 0x99	; 153
     61e:	7b bb       	out	0x1b, r23	; 27
     620:	ef ef       	ldi	r30, 0xFF	; 255
     622:	f1 ee       	ldi	r31, 0xE1	; 225
     624:	74 e0       	ldi	r23, 0x04	; 4
     626:	e1 50       	subi	r30, 0x01	; 1
     628:	f0 40       	sbci	r31, 0x00	; 0
     62a:	70 40       	sbci	r23, 0x00	; 0
     62c:	e1 f7       	brne	.-8      	; 0x626 <rotateStepper_1_and_2+0x190>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <rotateStepper_1_and_2+0x19a>
     630:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x33;
     632:	6b bb       	out	0x1b, r22	; 27
     634:	af ef       	ldi	r26, 0xFF	; 255
     636:	b1 ee       	ldi	r27, 0xE1	; 225
     638:	e4 e0       	ldi	r30, 0x04	; 4
     63a:	a1 50       	subi	r26, 0x01	; 1
     63c:	b0 40       	sbci	r27, 0x00	; 0
     63e:	e0 40       	sbci	r30, 0x00	; 0
     640:	e1 f7       	brne	.-8      	; 0x63a <rotateStepper_1_and_2+0x1a4>
     642:	00 c0       	rjmp	.+0      	; 0x644 <rotateStepper_1_and_2+0x1ae>
     644:	00 00       	nop
				_delay_ms(period);
			}
			_delay_ms(10);
			
		}else  if(Stepper_2_Distance>Stepper_1_Distance){
			for (int i = 0; i <Stepper_1_Distance; i++)
     646:	2f 5f       	subi	r18, 0xFF	; 255
     648:	3f 4f       	sbci	r19, 0xFF	; 255
     64a:	02 c0       	rjmp	.+4      	; 0x650 <rotateStepper_1_and_2+0x1ba>
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	28 17       	cp	r18, r24
     652:	39 07       	cpc	r19, r25
     654:	14 f2       	brlt	.-124    	; 0x5da <rotateStepper_1_and_2+0x144>
     656:	8f e3       	ldi	r24, 0x3F	; 63
     658:	9c e9       	ldi	r25, 0x9C	; 156
     65a:	01 97       	sbiw	r24, 0x01	; 1
     65c:	f1 f7       	brne	.-4      	; 0x65a <rotateStepper_1_and_2+0x1c4>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <rotateStepper_1_and_2+0x1ca>
     660:	00 00       	nop
				PORTA = 0x33;
				_delay_ms(period);
			}
			_delay_ms(10);
			
			for (int i = 0; i <defference; i++)
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	37 c0       	rjmp	.+110    	; 0x6d6 <rotateStepper_1_and_2+0x240>
			{
				PORTA = 0x30;
     668:	20 e3       	ldi	r18, 0x30	; 48
     66a:	2b bb       	out	0x1b, r18	; 27
     66c:	af ef       	ldi	r26, 0xFF	; 255
     66e:	b1 ee       	ldi	r27, 0xE1	; 225
     670:	e4 e0       	ldi	r30, 0x04	; 4
     672:	a1 50       	subi	r26, 0x01	; 1
     674:	b0 40       	sbci	r27, 0x00	; 0
     676:	e0 40       	sbci	r30, 0x00	; 0
     678:	e1 f7       	brne	.-8      	; 0x672 <rotateStepper_1_and_2+0x1dc>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <rotateStepper_1_and_2+0x1e6>
     67c:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x60;
     67e:	30 e6       	ldi	r19, 0x60	; 96
     680:	3b bb       	out	0x1b, r19	; 27
     682:	ff ef       	ldi	r31, 0xFF	; 255
     684:	31 ee       	ldi	r19, 0xE1	; 225
     686:	64 e0       	ldi	r22, 0x04	; 4
     688:	f1 50       	subi	r31, 0x01	; 1
     68a:	30 40       	sbci	r19, 0x00	; 0
     68c:	60 40       	sbci	r22, 0x00	; 0
     68e:	e1 f7       	brne	.-8      	; 0x688 <rotateStepper_1_and_2+0x1f2>
     690:	00 c0       	rjmp	.+0      	; 0x692 <rotateStepper_1_and_2+0x1fc>
     692:	00 00       	nop
				_delay_ms(period);
				PORTA = 0xc0;
     694:	30 ec       	ldi	r19, 0xC0	; 192
     696:	3b bb       	out	0x1b, r19	; 27
     698:	7f ef       	ldi	r23, 0xFF	; 255
     69a:	a1 ee       	ldi	r26, 0xE1	; 225
     69c:	b4 e0       	ldi	r27, 0x04	; 4
     69e:	71 50       	subi	r23, 0x01	; 1
     6a0:	a0 40       	sbci	r26, 0x00	; 0
     6a2:	b0 40       	sbci	r27, 0x00	; 0
     6a4:	e1 f7       	brne	.-8      	; 0x69e <rotateStepper_1_and_2+0x208>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <rotateStepper_1_and_2+0x212>
     6a8:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x90;
     6aa:	30 e9       	ldi	r19, 0x90	; 144
     6ac:	3b bb       	out	0x1b, r19	; 27
     6ae:	ef ef       	ldi	r30, 0xFF	; 255
     6b0:	f1 ee       	ldi	r31, 0xE1	; 225
     6b2:	34 e0       	ldi	r19, 0x04	; 4
     6b4:	e1 50       	subi	r30, 0x01	; 1
     6b6:	f0 40       	sbci	r31, 0x00	; 0
     6b8:	30 40       	sbci	r19, 0x00	; 0
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <rotateStepper_1_and_2+0x21e>
     6bc:	00 c0       	rjmp	.+0      	; 0x6be <rotateStepper_1_and_2+0x228>
     6be:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x30;
     6c0:	2b bb       	out	0x1b, r18	; 27
     6c2:	6f ef       	ldi	r22, 0xFF	; 255
     6c4:	71 ee       	ldi	r23, 0xE1	; 225
     6c6:	a4 e0       	ldi	r26, 0x04	; 4
     6c8:	61 50       	subi	r22, 0x01	; 1
     6ca:	70 40       	sbci	r23, 0x00	; 0
     6cc:	a0 40       	sbci	r26, 0x00	; 0
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <rotateStepper_1_and_2+0x232>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <rotateStepper_1_and_2+0x23c>
     6d2:	00 00       	nop
				PORTA = 0x33;
				_delay_ms(period);
			}
			_delay_ms(10);
			
			for (int i = 0; i <defference; i++)
     6d4:	01 96       	adiw	r24, 0x01	; 1
     6d6:	84 17       	cp	r24, r20
     6d8:	95 07       	cpc	r25, r21
     6da:	34 f2       	brlt	.-116    	; 0x668 <rotateStepper_1_and_2+0x1d2>
     6dc:	ef e3       	ldi	r30, 0x3F	; 63
     6de:	fc e9       	ldi	r31, 0x9C	; 156
     6e0:	31 97       	sbiw	r30, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <rotateStepper_1_and_2+0x24a>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <rotateStepper_1_and_2+0x250>
     6e6:	00 00       	nop
     6e8:	08 95       	ret
			}
			_delay_ms(10);
			
		}else{
			for (int i = 0; i <Stepper_1_Distance; i++){
				PORTA = 0x33;
     6ea:	43 e3       	ldi	r20, 0x33	; 51
     6ec:	4b bb       	out	0x1b, r20	; 27
     6ee:	ff ef       	ldi	r31, 0xFF	; 255
     6f0:	51 ee       	ldi	r21, 0xE1	; 225
     6f2:	64 e0       	ldi	r22, 0x04	; 4
     6f4:	f1 50       	subi	r31, 0x01	; 1
     6f6:	50 40       	sbci	r21, 0x00	; 0
     6f8:	60 40       	sbci	r22, 0x00	; 0
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <rotateStepper_1_and_2+0x25e>
     6fc:	00 c0       	rjmp	.+0      	; 0x6fe <rotateStepper_1_and_2+0x268>
     6fe:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x66;
     700:	56 e6       	ldi	r21, 0x66	; 102
     702:	5b bb       	out	0x1b, r21	; 27
     704:	7f ef       	ldi	r23, 0xFF	; 255
     706:	a1 ee       	ldi	r26, 0xE1	; 225
     708:	b4 e0       	ldi	r27, 0x04	; 4
     70a:	71 50       	subi	r23, 0x01	; 1
     70c:	a0 40       	sbci	r26, 0x00	; 0
     70e:	b0 40       	sbci	r27, 0x00	; 0
     710:	e1 f7       	brne	.-8      	; 0x70a <rotateStepper_1_and_2+0x274>
     712:	00 c0       	rjmp	.+0      	; 0x714 <rotateStepper_1_and_2+0x27e>
     714:	00 00       	nop
				_delay_ms(period);
				PORTA = 0xcc;
     716:	5c ec       	ldi	r21, 0xCC	; 204
     718:	5b bb       	out	0x1b, r21	; 27
     71a:	ef ef       	ldi	r30, 0xFF	; 255
     71c:	f1 ee       	ldi	r31, 0xE1	; 225
     71e:	54 e0       	ldi	r21, 0x04	; 4
     720:	e1 50       	subi	r30, 0x01	; 1
     722:	f0 40       	sbci	r31, 0x00	; 0
     724:	50 40       	sbci	r21, 0x00	; 0
     726:	e1 f7       	brne	.-8      	; 0x720 <rotateStepper_1_and_2+0x28a>
     728:	00 c0       	rjmp	.+0      	; 0x72a <rotateStepper_1_and_2+0x294>
     72a:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x99;
     72c:	59 e9       	ldi	r21, 0x99	; 153
     72e:	5b bb       	out	0x1b, r21	; 27
     730:	6f ef       	ldi	r22, 0xFF	; 255
     732:	71 ee       	ldi	r23, 0xE1	; 225
     734:	a4 e0       	ldi	r26, 0x04	; 4
     736:	61 50       	subi	r22, 0x01	; 1
     738:	70 40       	sbci	r23, 0x00	; 0
     73a:	a0 40       	sbci	r26, 0x00	; 0
     73c:	e1 f7       	brne	.-8      	; 0x736 <rotateStepper_1_and_2+0x2a0>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <rotateStepper_1_and_2+0x2aa>
     740:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x33;
     742:	4b bb       	out	0x1b, r20	; 27
     744:	bf ef       	ldi	r27, 0xFF	; 255
     746:	e1 ee       	ldi	r30, 0xE1	; 225
     748:	f4 e0       	ldi	r31, 0x04	; 4
     74a:	b1 50       	subi	r27, 0x01	; 1
     74c:	e0 40       	sbci	r30, 0x00	; 0
     74e:	f0 40       	sbci	r31, 0x00	; 0
     750:	e1 f7       	brne	.-8      	; 0x74a <rotateStepper_1_and_2+0x2b4>
     752:	00 c0       	rjmp	.+0      	; 0x754 <rotateStepper_1_and_2+0x2be>
     754:	00 00       	nop
				_delay_ms(period);
			}
			_delay_ms(10);
			
		}else{
			for (int i = 0; i <Stepper_1_Distance; i++){
     756:	2f 5f       	subi	r18, 0xFF	; 255
     758:	3f 4f       	sbci	r19, 0xFF	; 255
     75a:	28 17       	cp	r18, r24
     75c:	39 07       	cpc	r19, r25
     75e:	2c f2       	brlt	.-118    	; 0x6ea <rotateStepper_1_and_2+0x254>
     760:	8f e3       	ldi	r24, 0x3F	; 63
     762:	9c e9       	ldi	r25, 0x9C	; 156
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <rotateStepper_1_and_2+0x2ce>
     768:	00 c0       	rjmp	.+0      	; 0x76a <rotateStepper_1_and_2+0x2d4>
     76a:	00 00       	nop
     76c:	08 95       	ret
				PORTA = 0x33;
				_delay_ms(period);	
			}
			_delay_ms(10);
		}
	}else if(Stepper_1_Distance<0&&Stepper_2_Distance<0){
     76e:	99 23       	and	r25, r25
     770:	0c f0       	brlt	.+2      	; 0x774 <rotateStepper_1_and_2+0x2de>
     772:	75 c1       	rjmp	.+746    	; 0xa5e <__stack+0x1ff>
     774:	77 23       	and	r23, r23
     776:	0c f0       	brlt	.+2      	; 0x77a <rotateStepper_1_and_2+0x2e4>
     778:	72 c1       	rjmp	.+740    	; 0xa5e <__stack+0x1ff>
		int defference=abs(Stepper_1_Distance-Stepper_2_Distance);
     77a:	9c 01       	movw	r18, r24
     77c:	26 1b       	sub	r18, r22
     77e:	37 0b       	sbc	r19, r23
     780:	a9 01       	movw	r20, r18
     782:	22 f4       	brpl	.+8      	; 0x78c <rotateStepper_1_and_2+0x2f6>
     784:	44 27       	eor	r20, r20
     786:	55 27       	eor	r21, r21
     788:	42 1b       	sub	r20, r18
     78a:	53 0b       	sbc	r21, r19
		if (abs(Stepper_1_Distance)>abs(Stepper_2_Distance)){
     78c:	fc 01       	movw	r30, r24
     78e:	99 23       	and	r25, r25
     790:	24 f4       	brge	.+8      	; 0x79a <rotateStepper_1_and_2+0x304>
     792:	ee 27       	eor	r30, r30
     794:	ff 27       	eor	r31, r31
     796:	e8 1b       	sub	r30, r24
     798:	f9 0b       	sbc	r31, r25
     79a:	9b 01       	movw	r18, r22
     79c:	77 23       	and	r23, r23
     79e:	24 f4       	brge	.+8      	; 0x7a8 <rotateStepper_1_and_2+0x312>
     7a0:	22 27       	eor	r18, r18
     7a2:	33 27       	eor	r19, r19
     7a4:	26 1b       	sub	r18, r22
     7a6:	37 0b       	sbc	r19, r23
     7a8:	b9 01       	movw	r22, r18
     7aa:	2e 17       	cp	r18, r30
     7ac:	3f 07       	cpc	r19, r31
     7ae:	cc f1       	brlt	.+114    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     7b0:	87 c0       	rjmp	.+270    	; 0x8c0 <__stack+0x61>
				for (int i = 0; i <abs(Stepper_2_Distance); i++)
				{
					PORTA = 0x33;
     7b2:	23 e3       	ldi	r18, 0x33	; 51
     7b4:	2b bb       	out	0x1b, r18	; 27
     7b6:	af ef       	ldi	r26, 0xFF	; 255
     7b8:	b1 ee       	ldi	r27, 0xE1	; 225
     7ba:	e4 e0       	ldi	r30, 0x04	; 4
     7bc:	a1 50       	subi	r26, 0x01	; 1
     7be:	b0 40       	sbci	r27, 0x00	; 0
     7c0:	e0 40       	sbci	r30, 0x00	; 0
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <rotateStepper_1_and_2+0x326>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <rotateStepper_1_and_2+0x330>
     7c6:	00 00       	nop
					_delay_ms(period);
					PORTA = 0x99;
     7c8:	39 e9       	ldi	r19, 0x99	; 153
     7ca:	3b bb       	out	0x1b, r19	; 27
     7cc:	ff ef       	ldi	r31, 0xFF	; 255
     7ce:	31 ee       	ldi	r19, 0xE1	; 225
     7d0:	a4 e0       	ldi	r26, 0x04	; 4
     7d2:	f1 50       	subi	r31, 0x01	; 1
     7d4:	30 40       	sbci	r19, 0x00	; 0
     7d6:	a0 40       	sbci	r26, 0x00	; 0
     7d8:	e1 f7       	brne	.-8      	; 0x7d2 <rotateStepper_1_and_2+0x33c>
     7da:	00 c0       	rjmp	.+0      	; 0x7dc <rotateStepper_1_and_2+0x346>
     7dc:	00 00       	nop
					_delay_ms(period);
					PORTA = 0xcc;
     7de:	3c ec       	ldi	r19, 0xCC	; 204
     7e0:	3b bb       	out	0x1b, r19	; 27
     7e2:	bf ef       	ldi	r27, 0xFF	; 255
     7e4:	e1 ee       	ldi	r30, 0xE1	; 225
     7e6:	f4 e0       	ldi	r31, 0x04	; 4
     7e8:	b1 50       	subi	r27, 0x01	; 1
     7ea:	e0 40       	sbci	r30, 0x00	; 0
     7ec:	f0 40       	sbci	r31, 0x00	; 0
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <rotateStepper_1_and_2+0x352>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <rotateStepper_1_and_2+0x35c>
     7f2:	00 00       	nop
					_delay_ms(period);
					PORTA = 0x66;
     7f4:	36 e6       	ldi	r19, 0x66	; 102
     7f6:	3b bb       	out	0x1b, r19	; 27
     7f8:	3f ef       	ldi	r19, 0xFF	; 255
     7fa:	a1 ee       	ldi	r26, 0xE1	; 225
     7fc:	b4 e0       	ldi	r27, 0x04	; 4
     7fe:	31 50       	subi	r19, 0x01	; 1
     800:	a0 40       	sbci	r26, 0x00	; 0
     802:	b0 40       	sbci	r27, 0x00	; 0
     804:	e1 f7       	brne	.-8      	; 0x7fe <rotateStepper_1_and_2+0x368>
     806:	00 c0       	rjmp	.+0      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     808:	00 00       	nop
					_delay_ms(period);
					PORTA = 0x33;
     80a:	2b bb       	out	0x1b, r18	; 27
     80c:	ef ef       	ldi	r30, 0xFF	; 255
     80e:	f1 ee       	ldi	r31, 0xE1	; 225
     810:	24 e0       	ldi	r18, 0x04	; 4
     812:	e1 50       	subi	r30, 0x01	; 1
     814:	f0 40       	sbci	r31, 0x00	; 0
     816:	20 40       	sbci	r18, 0x00	; 0
     818:	e1 f7       	brne	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     81c:	00 00       	nop
			_delay_ms(10);
		}
	}else if(Stepper_1_Distance<0&&Stepper_2_Distance<0){
		int defference=abs(Stepper_1_Distance-Stepper_2_Distance);
		if (abs(Stepper_1_Distance)>abs(Stepper_2_Distance)){
				for (int i = 0; i <abs(Stepper_2_Distance); i++)
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	02 c0       	rjmp	.+4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	86 17       	cp	r24, r22
     828:	97 07       	cpc	r25, r23
     82a:	1c f2       	brlt	.-122    	; 0x7b2 <rotateStepper_1_and_2+0x31c>
     82c:	8f e3       	ldi	r24, 0x3F	; 63
     82e:	9c e9       	ldi	r25, 0x9C	; 156
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     834:	00 c0       	rjmp	.+0      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     836:	00 00       	nop
					PORTA = 0x33;
					_delay_ms(period);
				}
				_delay_ms(10);
			
				for (int i = 0; i <defference; i++)
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	37 c0       	rjmp	.+110    	; 0x8ac <__stack+0x4d>
				{
					PORTA = 0x03;
     83e:	23 e0       	ldi	r18, 0x03	; 3
     840:	2b bb       	out	0x1b, r18	; 27
     842:	af ef       	ldi	r26, 0xFF	; 255
     844:	b1 ee       	ldi	r27, 0xE1	; 225
     846:	e4 e0       	ldi	r30, 0x04	; 4
     848:	a1 50       	subi	r26, 0x01	; 1
     84a:	b0 40       	sbci	r27, 0x00	; 0
     84c:	e0 40       	sbci	r30, 0x00	; 0
     84e:	e1 f7       	brne	.-8      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     850:	00 c0       	rjmp	.+0      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     852:	00 00       	nop
					_delay_ms(period);
					PORTA = 0x09;
     854:	39 e0       	ldi	r19, 0x09	; 9
     856:	3b bb       	out	0x1b, r19	; 27
     858:	ff ef       	ldi	r31, 0xFF	; 255
     85a:	31 ee       	ldi	r19, 0xE1	; 225
     85c:	64 e0       	ldi	r22, 0x04	; 4
     85e:	f1 50       	subi	r31, 0x01	; 1
     860:	30 40       	sbci	r19, 0x00	; 0
     862:	60 40       	sbci	r22, 0x00	; 0
     864:	e1 f7       	brne	.-8      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     866:	00 c0       	rjmp	.+0      	; 0x868 <__stack+0x9>
     868:	00 00       	nop
					_delay_ms(period);
					PORTA = 0x0c;
     86a:	3c e0       	ldi	r19, 0x0C	; 12
     86c:	3b bb       	out	0x1b, r19	; 27
     86e:	7f ef       	ldi	r23, 0xFF	; 255
     870:	a1 ee       	ldi	r26, 0xE1	; 225
     872:	b4 e0       	ldi	r27, 0x04	; 4
     874:	71 50       	subi	r23, 0x01	; 1
     876:	a0 40       	sbci	r26, 0x00	; 0
     878:	b0 40       	sbci	r27, 0x00	; 0
     87a:	e1 f7       	brne	.-8      	; 0x874 <__stack+0x15>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <__stack+0x1f>
     87e:	00 00       	nop
					_delay_ms(period);
					PORTA = 0x06;
     880:	36 e0       	ldi	r19, 0x06	; 6
     882:	3b bb       	out	0x1b, r19	; 27
     884:	ef ef       	ldi	r30, 0xFF	; 255
     886:	f1 ee       	ldi	r31, 0xE1	; 225
     888:	34 e0       	ldi	r19, 0x04	; 4
     88a:	e1 50       	subi	r30, 0x01	; 1
     88c:	f0 40       	sbci	r31, 0x00	; 0
     88e:	30 40       	sbci	r19, 0x00	; 0
     890:	e1 f7       	brne	.-8      	; 0x88a <__stack+0x2b>
     892:	00 c0       	rjmp	.+0      	; 0x894 <__stack+0x35>
     894:	00 00       	nop
					_delay_ms(period);
					PORTA = 0x03;
     896:	2b bb       	out	0x1b, r18	; 27
     898:	6f ef       	ldi	r22, 0xFF	; 255
     89a:	71 ee       	ldi	r23, 0xE1	; 225
     89c:	a4 e0       	ldi	r26, 0x04	; 4
     89e:	61 50       	subi	r22, 0x01	; 1
     8a0:	70 40       	sbci	r23, 0x00	; 0
     8a2:	a0 40       	sbci	r26, 0x00	; 0
     8a4:	e1 f7       	brne	.-8      	; 0x89e <__stack+0x3f>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <__stack+0x49>
     8a8:	00 00       	nop
					PORTA = 0x33;
					_delay_ms(period);
				}
				_delay_ms(10);
			
				for (int i = 0; i <defference; i++)
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	84 17       	cp	r24, r20
     8ae:	95 07       	cpc	r25, r21
     8b0:	34 f2       	brlt	.-116    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     8b2:	ef e3       	ldi	r30, 0x3F	; 63
     8b4:	fc e9       	ldi	r31, 0x9C	; 156
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <__stack+0x57>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <__stack+0x5d>
     8bc:	00 00       	nop
     8be:	08 95       	ret
					PORTA = 0x03;
					_delay_ms(period);
				}
				_delay_ms(10);
			
			}else  if(abs(Stepper_2_Distance)>abs(Stepper_1_Distance)){
     8c0:	e2 17       	cp	r30, r18
     8c2:	f3 07       	cpc	r31, r19
     8c4:	dc f1       	brlt	.+118    	; 0x93c <__stack+0xdd>
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	bf c0       	rjmp	.+382    	; 0xa4a <__stack+0x1eb>
				for (int i = 0; i <abs(Stepper_1_Distance); i++)
				{
					PORTA = 0x33;
     8cc:	23 e3       	ldi	r18, 0x33	; 51
     8ce:	2b bb       	out	0x1b, r18	; 27
     8d0:	3f ef       	ldi	r19, 0xFF	; 255
     8d2:	61 ee       	ldi	r22, 0xE1	; 225
     8d4:	74 e0       	ldi	r23, 0x04	; 4
     8d6:	31 50       	subi	r19, 0x01	; 1
     8d8:	60 40       	sbci	r22, 0x00	; 0
     8da:	70 40       	sbci	r23, 0x00	; 0
     8dc:	e1 f7       	brne	.-8      	; 0x8d6 <__stack+0x77>
     8de:	00 c0       	rjmp	.+0      	; 0x8e0 <__stack+0x81>
     8e0:	00 00       	nop
					_delay_ms(period);
					PORTA = 0x99;
     8e2:	39 e9       	ldi	r19, 0x99	; 153
     8e4:	3b bb       	out	0x1b, r19	; 27
     8e6:	af ef       	ldi	r26, 0xFF	; 255
     8e8:	b1 ee       	ldi	r27, 0xE1	; 225
     8ea:	34 e0       	ldi	r19, 0x04	; 4
     8ec:	a1 50       	subi	r26, 0x01	; 1
     8ee:	b0 40       	sbci	r27, 0x00	; 0
     8f0:	30 40       	sbci	r19, 0x00	; 0
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <__stack+0x8d>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <__stack+0x97>
     8f6:	00 00       	nop
					_delay_ms(period);
					PORTA = 0xcc;
     8f8:	3c ec       	ldi	r19, 0xCC	; 204
     8fa:	3b bb       	out	0x1b, r19	; 27
     8fc:	6f ef       	ldi	r22, 0xFF	; 255
     8fe:	71 ee       	ldi	r23, 0xE1	; 225
     900:	a4 e0       	ldi	r26, 0x04	; 4
     902:	61 50       	subi	r22, 0x01	; 1
     904:	70 40       	sbci	r23, 0x00	; 0
     906:	a0 40       	sbci	r26, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <__stack+0xa3>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <__stack+0xad>
     90c:	00 00       	nop
					_delay_ms(period);
					PORTA = 0x66;
     90e:	36 e6       	ldi	r19, 0x66	; 102
     910:	3b bb       	out	0x1b, r19	; 27
     912:	bf ef       	ldi	r27, 0xFF	; 255
     914:	31 ee       	ldi	r19, 0xE1	; 225
     916:	64 e0       	ldi	r22, 0x04	; 4
     918:	b1 50       	subi	r27, 0x01	; 1
     91a:	30 40       	sbci	r19, 0x00	; 0
     91c:	60 40       	sbci	r22, 0x00	; 0
     91e:	e1 f7       	brne	.-8      	; 0x918 <__stack+0xb9>
     920:	00 c0       	rjmp	.+0      	; 0x922 <__stack+0xc3>
     922:	00 00       	nop
					_delay_ms(period);
					PORTA = 0x33;
     924:	2b bb       	out	0x1b, r18	; 27
     926:	7f ef       	ldi	r23, 0xFF	; 255
     928:	a1 ee       	ldi	r26, 0xE1	; 225
     92a:	b4 e0       	ldi	r27, 0x04	; 4
     92c:	71 50       	subi	r23, 0x01	; 1
     92e:	a0 40       	sbci	r26, 0x00	; 0
     930:	b0 40       	sbci	r27, 0x00	; 0
     932:	e1 f7       	brne	.-8      	; 0x92c <__stack+0xcd>
     934:	00 c0       	rjmp	.+0      	; 0x936 <__stack+0xd7>
     936:	00 00       	nop
					_delay_ms(period);
				}
				_delay_ms(10);
			
			}else  if(abs(Stepper_2_Distance)>abs(Stepper_1_Distance)){
				for (int i = 0; i <abs(Stepper_1_Distance); i++)
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	02 c0       	rjmp	.+4      	; 0x940 <__stack+0xe1>
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	8e 17       	cp	r24, r30
     942:	9f 07       	cpc	r25, r31
     944:	1c f2       	brlt	.-122    	; 0x8cc <__stack+0x6d>
     946:	ef e3       	ldi	r30, 0x3F	; 63
     948:	fc e9       	ldi	r31, 0x9C	; 156
     94a:	31 97       	sbiw	r30, 0x01	; 1
     94c:	f1 f7       	brne	.-4      	; 0x94a <__stack+0xeb>
     94e:	00 c0       	rjmp	.+0      	; 0x950 <__stack+0xf1>
     950:	00 00       	nop
					PORTA = 0x33;
					_delay_ms(period);
				}
				_delay_ms(10);
			
				for (int i = 0; i <defference; i++)
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	37 c0       	rjmp	.+110    	; 0x9c6 <__stack+0x167>
				{
					PORTA = 0x30;
     958:	20 e3       	ldi	r18, 0x30	; 48
     95a:	2b bb       	out	0x1b, r18	; 27
     95c:	ff ef       	ldi	r31, 0xFF	; 255
     95e:	31 ee       	ldi	r19, 0xE1	; 225
     960:	64 e0       	ldi	r22, 0x04	; 4
     962:	f1 50       	subi	r31, 0x01	; 1
     964:	30 40       	sbci	r19, 0x00	; 0
     966:	60 40       	sbci	r22, 0x00	; 0
     968:	e1 f7       	brne	.-8      	; 0x962 <__stack+0x103>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <__stack+0x10d>
     96c:	00 00       	nop
					_delay_ms(period);
					PORTA = 0x90;
     96e:	30 e9       	ldi	r19, 0x90	; 144
     970:	3b bb       	out	0x1b, r19	; 27
     972:	7f ef       	ldi	r23, 0xFF	; 255
     974:	a1 ee       	ldi	r26, 0xE1	; 225
     976:	b4 e0       	ldi	r27, 0x04	; 4
     978:	71 50       	subi	r23, 0x01	; 1
     97a:	a0 40       	sbci	r26, 0x00	; 0
     97c:	b0 40       	sbci	r27, 0x00	; 0
     97e:	e1 f7       	brne	.-8      	; 0x978 <__stack+0x119>
     980:	00 c0       	rjmp	.+0      	; 0x982 <__stack+0x123>
     982:	00 00       	nop
					_delay_ms(period);
					PORTA = 0xc0;
     984:	30 ec       	ldi	r19, 0xC0	; 192
     986:	3b bb       	out	0x1b, r19	; 27
     988:	ef ef       	ldi	r30, 0xFF	; 255
     98a:	f1 ee       	ldi	r31, 0xE1	; 225
     98c:	34 e0       	ldi	r19, 0x04	; 4
     98e:	e1 50       	subi	r30, 0x01	; 1
     990:	f0 40       	sbci	r31, 0x00	; 0
     992:	30 40       	sbci	r19, 0x00	; 0
     994:	e1 f7       	brne	.-8      	; 0x98e <__stack+0x12f>
     996:	00 c0       	rjmp	.+0      	; 0x998 <__stack+0x139>
     998:	00 00       	nop
					_delay_ms(period);
					PORTA = 0x60;
     99a:	30 e6       	ldi	r19, 0x60	; 96
     99c:	3b bb       	out	0x1b, r19	; 27
     99e:	6f ef       	ldi	r22, 0xFF	; 255
     9a0:	71 ee       	ldi	r23, 0xE1	; 225
     9a2:	a4 e0       	ldi	r26, 0x04	; 4
     9a4:	61 50       	subi	r22, 0x01	; 1
     9a6:	70 40       	sbci	r23, 0x00	; 0
     9a8:	a0 40       	sbci	r26, 0x00	; 0
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <__stack+0x145>
     9ac:	00 c0       	rjmp	.+0      	; 0x9ae <__stack+0x14f>
     9ae:	00 00       	nop
					_delay_ms(period);
					PORTA = 0x30;
     9b0:	2b bb       	out	0x1b, r18	; 27
     9b2:	bf ef       	ldi	r27, 0xFF	; 255
     9b4:	e1 ee       	ldi	r30, 0xE1	; 225
     9b6:	f4 e0       	ldi	r31, 0x04	; 4
     9b8:	b1 50       	subi	r27, 0x01	; 1
     9ba:	e0 40       	sbci	r30, 0x00	; 0
     9bc:	f0 40       	sbci	r31, 0x00	; 0
     9be:	e1 f7       	brne	.-8      	; 0x9b8 <__stack+0x159>
     9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <__stack+0x163>
     9c2:	00 00       	nop
					PORTA = 0x33;
					_delay_ms(period);
				}
				_delay_ms(10);
			
				for (int i = 0; i <defference; i++)
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	84 17       	cp	r24, r20
     9c8:	95 07       	cpc	r25, r21
     9ca:	34 f2       	brlt	.-116    	; 0x958 <__stack+0xf9>
     9cc:	8f e3       	ldi	r24, 0x3F	; 63
     9ce:	9c e9       	ldi	r25, 0x9C	; 156
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <__stack+0x171>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <__stack+0x177>
     9d6:	00 00       	nop
     9d8:	08 95       	ret
				}
				_delay_ms(10);
			
			}else{
			for (int i = 0; i <Stepper_1_Distance; i++){
				PORTA = 0x33;
     9da:	43 e3       	ldi	r20, 0x33	; 51
     9dc:	4b bb       	out	0x1b, r20	; 27
     9de:	af ef       	ldi	r26, 0xFF	; 255
     9e0:	b1 ee       	ldi	r27, 0xE1	; 225
     9e2:	e4 e0       	ldi	r30, 0x04	; 4
     9e4:	a1 50       	subi	r26, 0x01	; 1
     9e6:	b0 40       	sbci	r27, 0x00	; 0
     9e8:	e0 40       	sbci	r30, 0x00	; 0
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <__stack+0x185>
     9ec:	00 c0       	rjmp	.+0      	; 0x9ee <__stack+0x18f>
     9ee:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x99;
     9f0:	59 e9       	ldi	r21, 0x99	; 153
     9f2:	5b bb       	out	0x1b, r21	; 27
     9f4:	ff ef       	ldi	r31, 0xFF	; 255
     9f6:	51 ee       	ldi	r21, 0xE1	; 225
     9f8:	64 e0       	ldi	r22, 0x04	; 4
     9fa:	f1 50       	subi	r31, 0x01	; 1
     9fc:	50 40       	sbci	r21, 0x00	; 0
     9fe:	60 40       	sbci	r22, 0x00	; 0
     a00:	e1 f7       	brne	.-8      	; 0x9fa <__stack+0x19b>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <__stack+0x1a5>
     a04:	00 00       	nop
				_delay_ms(period);
				PORTA = 0xcc;
     a06:	5c ec       	ldi	r21, 0xCC	; 204
     a08:	5b bb       	out	0x1b, r21	; 27
     a0a:	7f ef       	ldi	r23, 0xFF	; 255
     a0c:	a1 ee       	ldi	r26, 0xE1	; 225
     a0e:	b4 e0       	ldi	r27, 0x04	; 4
     a10:	71 50       	subi	r23, 0x01	; 1
     a12:	a0 40       	sbci	r26, 0x00	; 0
     a14:	b0 40       	sbci	r27, 0x00	; 0
     a16:	e1 f7       	brne	.-8      	; 0xa10 <__stack+0x1b1>
     a18:	00 c0       	rjmp	.+0      	; 0xa1a <__stack+0x1bb>
     a1a:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x66;
     a1c:	56 e6       	ldi	r21, 0x66	; 102
     a1e:	5b bb       	out	0x1b, r21	; 27
     a20:	ef ef       	ldi	r30, 0xFF	; 255
     a22:	f1 ee       	ldi	r31, 0xE1	; 225
     a24:	54 e0       	ldi	r21, 0x04	; 4
     a26:	e1 50       	subi	r30, 0x01	; 1
     a28:	f0 40       	sbci	r31, 0x00	; 0
     a2a:	50 40       	sbci	r21, 0x00	; 0
     a2c:	e1 f7       	brne	.-8      	; 0xa26 <__stack+0x1c7>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <__stack+0x1d1>
     a30:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x33;
     a32:	4b bb       	out	0x1b, r20	; 27
     a34:	6f ef       	ldi	r22, 0xFF	; 255
     a36:	71 ee       	ldi	r23, 0xE1	; 225
     a38:	a4 e0       	ldi	r26, 0x04	; 4
     a3a:	61 50       	subi	r22, 0x01	; 1
     a3c:	70 40       	sbci	r23, 0x00	; 0
     a3e:	a0 40       	sbci	r26, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <__stack+0x1db>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <__stack+0x1e5>
     a44:	00 00       	nop
					_delay_ms(period);
				}
				_delay_ms(10);
			
			}else{
			for (int i = 0; i <Stepper_1_Distance; i++){
     a46:	2f 5f       	subi	r18, 0xFF	; 255
     a48:	3f 4f       	sbci	r19, 0xFF	; 255
     a4a:	28 17       	cp	r18, r24
     a4c:	39 07       	cpc	r19, r25
     a4e:	2c f2       	brlt	.-118    	; 0x9da <__stack+0x17b>
     a50:	ef e3       	ldi	r30, 0x3F	; 63
     a52:	fc e9       	ldi	r31, 0x9C	; 156
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	f1 f7       	brne	.-4      	; 0xa54 <__stack+0x1f5>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <__stack+0x1fb>
     a5a:	00 00       	nop
     a5c:	08 95       	ret
				PORTA = 0x33;
				_delay_ms(period);
			}
			_delay_ms(10);
		}
	}else if(Stepper_1_Distance>0&&Stepper_2_Distance<0){
     a5e:	18 16       	cp	r1, r24
     a60:	19 06       	cpc	r1, r25
     a62:	0c f0       	brlt	.+2      	; 0xa66 <__stack+0x207>
     a64:	70 c1       	rjmp	.+736    	; 0xd46 <__stack+0x4e7>
     a66:	77 23       	and	r23, r23
     a68:	0c f0       	brlt	.+2      	; 0xa6c <__stack+0x20d>
     a6a:	6d c1       	rjmp	.+730    	; 0xd46 <__stack+0x4e7>
		int defference=abs(Stepper_1_Distance)-abs(Stepper_2_Distance);
     a6c:	9c 01       	movw	r18, r24
     a6e:	99 23       	and	r25, r25
     a70:	24 f4       	brge	.+8      	; 0xa7a <__stack+0x21b>
     a72:	22 27       	eor	r18, r18
     a74:	33 27       	eor	r19, r19
     a76:	28 1b       	sub	r18, r24
     a78:	39 0b       	sbc	r19, r25
     a7a:	ab 01       	movw	r20, r22
     a7c:	77 23       	and	r23, r23
     a7e:	24 f4       	brge	.+8      	; 0xa88 <__stack+0x229>
     a80:	44 27       	eor	r20, r20
     a82:	55 27       	eor	r21, r21
     a84:	46 1b       	sub	r20, r22
     a86:	57 0b       	sbc	r21, r23
     a88:	ba 01       	movw	r22, r20
     a8a:	d9 01       	movw	r26, r18
     a8c:	a4 1b       	sub	r26, r20
     a8e:	b5 0b       	sbc	r27, r21
     a90:	ad 01       	movw	r20, r26
		if (abs(Stepper_1_Distance)>abs(Stepper_2_Distance)){
     a92:	62 17       	cp	r22, r18
     a94:	73 07       	cpc	r23, r19
     a96:	cc f1       	brlt	.+114    	; 0xb0a <__stack+0x2ab>
     a98:	87 c0       	rjmp	.+270    	; 0xba8 <__stack+0x349>
			for (int i = 0; i <abs(Stepper_2_Distance); i++)
			{
				PORTA = 0x33;
     a9a:	23 e3       	ldi	r18, 0x33	; 51
     a9c:	2b bb       	out	0x1b, r18	; 27
     a9e:	bf ef       	ldi	r27, 0xFF	; 255
     aa0:	e1 ee       	ldi	r30, 0xE1	; 225
     aa2:	f4 e0       	ldi	r31, 0x04	; 4
     aa4:	b1 50       	subi	r27, 0x01	; 1
     aa6:	e0 40       	sbci	r30, 0x00	; 0
     aa8:	f0 40       	sbci	r31, 0x00	; 0
     aaa:	e1 f7       	brne	.-8      	; 0xaa4 <__stack+0x245>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <__stack+0x24f>
     aae:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x96;
     ab0:	36 e9       	ldi	r19, 0x96	; 150
     ab2:	3b bb       	out	0x1b, r19	; 27
     ab4:	3f ef       	ldi	r19, 0xFF	; 255
     ab6:	a1 ee       	ldi	r26, 0xE1	; 225
     ab8:	b4 e0       	ldi	r27, 0x04	; 4
     aba:	31 50       	subi	r19, 0x01	; 1
     abc:	a0 40       	sbci	r26, 0x00	; 0
     abe:	b0 40       	sbci	r27, 0x00	; 0
     ac0:	e1 f7       	brne	.-8      	; 0xaba <__stack+0x25b>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <__stack+0x265>
     ac4:	00 00       	nop
				_delay_ms(period);
				PORTA = 0xcc;
     ac6:	3c ec       	ldi	r19, 0xCC	; 204
     ac8:	3b bb       	out	0x1b, r19	; 27
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f1 ee       	ldi	r31, 0xE1	; 225
     ace:	34 e0       	ldi	r19, 0x04	; 4
     ad0:	e1 50       	subi	r30, 0x01	; 1
     ad2:	f0 40       	sbci	r31, 0x00	; 0
     ad4:	30 40       	sbci	r19, 0x00	; 0
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <__stack+0x271>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <__stack+0x27b>
     ada:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x69;
     adc:	39 e6       	ldi	r19, 0x69	; 105
     ade:	3b bb       	out	0x1b, r19	; 27
     ae0:	af ef       	ldi	r26, 0xFF	; 255
     ae2:	b1 ee       	ldi	r27, 0xE1	; 225
     ae4:	e4 e0       	ldi	r30, 0x04	; 4
     ae6:	a1 50       	subi	r26, 0x01	; 1
     ae8:	b0 40       	sbci	r27, 0x00	; 0
     aea:	e0 40       	sbci	r30, 0x00	; 0
     aec:	e1 f7       	brne	.-8      	; 0xae6 <__stack+0x287>
     aee:	00 c0       	rjmp	.+0      	; 0xaf0 <__stack+0x291>
     af0:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x33;
     af2:	2b bb       	out	0x1b, r18	; 27
     af4:	ff ef       	ldi	r31, 0xFF	; 255
     af6:	21 ee       	ldi	r18, 0xE1	; 225
     af8:	34 e0       	ldi	r19, 0x04	; 4
     afa:	f1 50       	subi	r31, 0x01	; 1
     afc:	20 40       	sbci	r18, 0x00	; 0
     afe:	30 40       	sbci	r19, 0x00	; 0
     b00:	e1 f7       	brne	.-8      	; 0xafa <__stack+0x29b>
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <__stack+0x2a5>
     b04:	00 00       	nop
			_delay_ms(10);
		}
	}else if(Stepper_1_Distance>0&&Stepper_2_Distance<0){
		int defference=abs(Stepper_1_Distance)-abs(Stepper_2_Distance);
		if (abs(Stepper_1_Distance)>abs(Stepper_2_Distance)){
			for (int i = 0; i <abs(Stepper_2_Distance); i++)
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <__stack+0x2af>
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	86 17       	cp	r24, r22
     b10:	97 07       	cpc	r25, r23
     b12:	1c f2       	brlt	.-122    	; 0xa9a <__stack+0x23b>
     b14:	8f e3       	ldi	r24, 0x3F	; 63
     b16:	9c e9       	ldi	r25, 0x9C	; 156
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <__stack+0x2b9>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <__stack+0x2bf>
     b1e:	00 00       	nop
				PORTA = 0x33;
				_delay_ms(period);
			}
			_delay_ms(10);
			
			for (int i = 0; i <defference; i++)
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	37 c0       	rjmp	.+110    	; 0xb94 <__stack+0x335>
			{
				PORTA = 0x03;
     b26:	23 e0       	ldi	r18, 0x03	; 3
     b28:	2b bb       	out	0x1b, r18	; 27
     b2a:	af ef       	ldi	r26, 0xFF	; 255
     b2c:	b1 ee       	ldi	r27, 0xE1	; 225
     b2e:	e4 e0       	ldi	r30, 0x04	; 4
     b30:	a1 50       	subi	r26, 0x01	; 1
     b32:	b0 40       	sbci	r27, 0x00	; 0
     b34:	e0 40       	sbci	r30, 0x00	; 0
     b36:	e1 f7       	brne	.-8      	; 0xb30 <__stack+0x2d1>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <__stack+0x2db>
     b3a:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x06;
     b3c:	36 e0       	ldi	r19, 0x06	; 6
     b3e:	3b bb       	out	0x1b, r19	; 27
     b40:	ff ef       	ldi	r31, 0xFF	; 255
     b42:	31 ee       	ldi	r19, 0xE1	; 225
     b44:	64 e0       	ldi	r22, 0x04	; 4
     b46:	f1 50       	subi	r31, 0x01	; 1
     b48:	30 40       	sbci	r19, 0x00	; 0
     b4a:	60 40       	sbci	r22, 0x00	; 0
     b4c:	e1 f7       	brne	.-8      	; 0xb46 <__stack+0x2e7>
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <__stack+0x2f1>
     b50:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x0c;
     b52:	3c e0       	ldi	r19, 0x0C	; 12
     b54:	3b bb       	out	0x1b, r19	; 27
     b56:	7f ef       	ldi	r23, 0xFF	; 255
     b58:	a1 ee       	ldi	r26, 0xE1	; 225
     b5a:	b4 e0       	ldi	r27, 0x04	; 4
     b5c:	71 50       	subi	r23, 0x01	; 1
     b5e:	a0 40       	sbci	r26, 0x00	; 0
     b60:	b0 40       	sbci	r27, 0x00	; 0
     b62:	e1 f7       	brne	.-8      	; 0xb5c <__stack+0x2fd>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <__stack+0x307>
     b66:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x09;
     b68:	39 e0       	ldi	r19, 0x09	; 9
     b6a:	3b bb       	out	0x1b, r19	; 27
     b6c:	ef ef       	ldi	r30, 0xFF	; 255
     b6e:	f1 ee       	ldi	r31, 0xE1	; 225
     b70:	34 e0       	ldi	r19, 0x04	; 4
     b72:	e1 50       	subi	r30, 0x01	; 1
     b74:	f0 40       	sbci	r31, 0x00	; 0
     b76:	30 40       	sbci	r19, 0x00	; 0
     b78:	e1 f7       	brne	.-8      	; 0xb72 <__stack+0x313>
     b7a:	00 c0       	rjmp	.+0      	; 0xb7c <__stack+0x31d>
     b7c:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x03;
     b7e:	2b bb       	out	0x1b, r18	; 27
     b80:	6f ef       	ldi	r22, 0xFF	; 255
     b82:	71 ee       	ldi	r23, 0xE1	; 225
     b84:	a4 e0       	ldi	r26, 0x04	; 4
     b86:	61 50       	subi	r22, 0x01	; 1
     b88:	70 40       	sbci	r23, 0x00	; 0
     b8a:	a0 40       	sbci	r26, 0x00	; 0
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <__stack+0x327>
     b8e:	00 c0       	rjmp	.+0      	; 0xb90 <__stack+0x331>
     b90:	00 00       	nop
				PORTA = 0x33;
				_delay_ms(period);
			}
			_delay_ms(10);
			
			for (int i = 0; i <defference; i++)
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	84 17       	cp	r24, r20
     b96:	95 07       	cpc	r25, r21
     b98:	34 f2       	brlt	.-116    	; 0xb26 <__stack+0x2c7>
     b9a:	ef e3       	ldi	r30, 0x3F	; 63
     b9c:	fc e9       	ldi	r31, 0x9C	; 156
     b9e:	31 97       	sbiw	r30, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <__stack+0x33f>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <__stack+0x345>
     ba4:	00 00       	nop
     ba6:	08 95       	ret
				PORTA = 0x03;
				_delay_ms(period);
			}
			_delay_ms(10);
			
		}else  if(abs(Stepper_2_Distance)>abs(Stepper_1_Distance)){
     ba8:	26 17       	cp	r18, r22
     baa:	37 07       	cpc	r19, r23
     bac:	dc f1       	brlt	.+118    	; 0xc24 <__stack+0x3c5>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	bf c0       	rjmp	.+382    	; 0xd32 <__stack+0x4d3>
			for (int i = 0; i <abs(Stepper_1_Distance); i++)
			{
				PORTA = 0x33;
     bb4:	63 e3       	ldi	r22, 0x33	; 51
     bb6:	6b bb       	out	0x1b, r22	; 27
     bb8:	ff ef       	ldi	r31, 0xFF	; 255
     bba:	71 ee       	ldi	r23, 0xE1	; 225
     bbc:	a4 e0       	ldi	r26, 0x04	; 4
     bbe:	f1 50       	subi	r31, 0x01	; 1
     bc0:	70 40       	sbci	r23, 0x00	; 0
     bc2:	a0 40       	sbci	r26, 0x00	; 0
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <__stack+0x35f>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <__stack+0x369>
     bc8:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x96;
     bca:	76 e9       	ldi	r23, 0x96	; 150
     bcc:	7b bb       	out	0x1b, r23	; 27
     bce:	bf ef       	ldi	r27, 0xFF	; 255
     bd0:	e1 ee       	ldi	r30, 0xE1	; 225
     bd2:	f4 e0       	ldi	r31, 0x04	; 4
     bd4:	b1 50       	subi	r27, 0x01	; 1
     bd6:	e0 40       	sbci	r30, 0x00	; 0
     bd8:	f0 40       	sbci	r31, 0x00	; 0
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <__stack+0x375>
     bdc:	00 c0       	rjmp	.+0      	; 0xbde <__stack+0x37f>
     bde:	00 00       	nop
				_delay_ms(period);
				PORTA = 0xcc;
     be0:	7c ec       	ldi	r23, 0xCC	; 204
     be2:	7b bb       	out	0x1b, r23	; 27
     be4:	7f ef       	ldi	r23, 0xFF	; 255
     be6:	a1 ee       	ldi	r26, 0xE1	; 225
     be8:	b4 e0       	ldi	r27, 0x04	; 4
     bea:	71 50       	subi	r23, 0x01	; 1
     bec:	a0 40       	sbci	r26, 0x00	; 0
     bee:	b0 40       	sbci	r27, 0x00	; 0
     bf0:	e1 f7       	brne	.-8      	; 0xbea <__stack+0x38b>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <__stack+0x395>
     bf4:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x69;
     bf6:	79 e6       	ldi	r23, 0x69	; 105
     bf8:	7b bb       	out	0x1b, r23	; 27
     bfa:	ef ef       	ldi	r30, 0xFF	; 255
     bfc:	f1 ee       	ldi	r31, 0xE1	; 225
     bfe:	74 e0       	ldi	r23, 0x04	; 4
     c00:	e1 50       	subi	r30, 0x01	; 1
     c02:	f0 40       	sbci	r31, 0x00	; 0
     c04:	70 40       	sbci	r23, 0x00	; 0
     c06:	e1 f7       	brne	.-8      	; 0xc00 <__stack+0x3a1>
     c08:	00 c0       	rjmp	.+0      	; 0xc0a <__stack+0x3ab>
     c0a:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x33;
     c0c:	6b bb       	out	0x1b, r22	; 27
     c0e:	af ef       	ldi	r26, 0xFF	; 255
     c10:	b1 ee       	ldi	r27, 0xE1	; 225
     c12:	e4 e0       	ldi	r30, 0x04	; 4
     c14:	a1 50       	subi	r26, 0x01	; 1
     c16:	b0 40       	sbci	r27, 0x00	; 0
     c18:	e0 40       	sbci	r30, 0x00	; 0
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <__stack+0x3b5>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <__stack+0x3bf>
     c1e:	00 00       	nop
				_delay_ms(period);
			}
			_delay_ms(10);
			
		}else  if(abs(Stepper_2_Distance)>abs(Stepper_1_Distance)){
			for (int i = 0; i <abs(Stepper_1_Distance); i++)
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <__stack+0x3c9>
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	82 17       	cp	r24, r18
     c2a:	93 07       	cpc	r25, r19
     c2c:	1c f2       	brlt	.-122    	; 0xbb4 <__stack+0x355>
     c2e:	8f e3       	ldi	r24, 0x3F	; 63
     c30:	9c e9       	ldi	r25, 0x9C	; 156
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <__stack+0x3d3>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <__stack+0x3d9>
     c38:	00 00       	nop
				PORTA = 0x33;
				_delay_ms(period);
			}
			_delay_ms(10);
			
			for (int i = 0; i <defference; i++)
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	37 c0       	rjmp	.+110    	; 0xcae <__stack+0x44f>
			{
				PORTA = 0x30;
     c40:	20 e3       	ldi	r18, 0x30	; 48
     c42:	2b bb       	out	0x1b, r18	; 27
     c44:	af ef       	ldi	r26, 0xFF	; 255
     c46:	b1 ee       	ldi	r27, 0xE1	; 225
     c48:	e4 e0       	ldi	r30, 0x04	; 4
     c4a:	a1 50       	subi	r26, 0x01	; 1
     c4c:	b0 40       	sbci	r27, 0x00	; 0
     c4e:	e0 40       	sbci	r30, 0x00	; 0
     c50:	e1 f7       	brne	.-8      	; 0xc4a <__stack+0x3eb>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <__stack+0x3f5>
     c54:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x90;
     c56:	30 e9       	ldi	r19, 0x90	; 144
     c58:	3b bb       	out	0x1b, r19	; 27
     c5a:	ff ef       	ldi	r31, 0xFF	; 255
     c5c:	31 ee       	ldi	r19, 0xE1	; 225
     c5e:	64 e0       	ldi	r22, 0x04	; 4
     c60:	f1 50       	subi	r31, 0x01	; 1
     c62:	30 40       	sbci	r19, 0x00	; 0
     c64:	60 40       	sbci	r22, 0x00	; 0
     c66:	e1 f7       	brne	.-8      	; 0xc60 <__stack+0x401>
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <__stack+0x40b>
     c6a:	00 00       	nop
				_delay_ms(period);
				PORTA = 0xc0;
     c6c:	30 ec       	ldi	r19, 0xC0	; 192
     c6e:	3b bb       	out	0x1b, r19	; 27
     c70:	7f ef       	ldi	r23, 0xFF	; 255
     c72:	a1 ee       	ldi	r26, 0xE1	; 225
     c74:	b4 e0       	ldi	r27, 0x04	; 4
     c76:	71 50       	subi	r23, 0x01	; 1
     c78:	a0 40       	sbci	r26, 0x00	; 0
     c7a:	b0 40       	sbci	r27, 0x00	; 0
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <__stack+0x417>
     c7e:	00 c0       	rjmp	.+0      	; 0xc80 <__stack+0x421>
     c80:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x60;
     c82:	30 e6       	ldi	r19, 0x60	; 96
     c84:	3b bb       	out	0x1b, r19	; 27
     c86:	ef ef       	ldi	r30, 0xFF	; 255
     c88:	f1 ee       	ldi	r31, 0xE1	; 225
     c8a:	34 e0       	ldi	r19, 0x04	; 4
     c8c:	e1 50       	subi	r30, 0x01	; 1
     c8e:	f0 40       	sbci	r31, 0x00	; 0
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	e1 f7       	brne	.-8      	; 0xc8c <__stack+0x42d>
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <__stack+0x437>
     c96:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x30;
     c98:	2b bb       	out	0x1b, r18	; 27
     c9a:	6f ef       	ldi	r22, 0xFF	; 255
     c9c:	71 ee       	ldi	r23, 0xE1	; 225
     c9e:	a4 e0       	ldi	r26, 0x04	; 4
     ca0:	61 50       	subi	r22, 0x01	; 1
     ca2:	70 40       	sbci	r23, 0x00	; 0
     ca4:	a0 40       	sbci	r26, 0x00	; 0
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <__stack+0x441>
     ca8:	00 c0       	rjmp	.+0      	; 0xcaa <__stack+0x44b>
     caa:	00 00       	nop
				PORTA = 0x33;
				_delay_ms(period);
			}
			_delay_ms(10);
			
			for (int i = 0; i <defference; i++)
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	84 17       	cp	r24, r20
     cb0:	95 07       	cpc	r25, r21
     cb2:	34 f2       	brlt	.-116    	; 0xc40 <__stack+0x3e1>
     cb4:	ef e3       	ldi	r30, 0x3F	; 63
     cb6:	fc e9       	ldi	r31, 0x9C	; 156
     cb8:	31 97       	sbiw	r30, 0x01	; 1
     cba:	f1 f7       	brne	.-4      	; 0xcb8 <__stack+0x459>
     cbc:	00 c0       	rjmp	.+0      	; 0xcbe <__stack+0x45f>
     cbe:	00 00       	nop
     cc0:	08 95       	ret
			}
			_delay_ms(10);
			
		}else{
			for (int i = 0; i <Stepper_1_Distance; i++){
				PORTA = 0x33;
     cc2:	43 e3       	ldi	r20, 0x33	; 51
     cc4:	4b bb       	out	0x1b, r20	; 27
     cc6:	ff ef       	ldi	r31, 0xFF	; 255
     cc8:	51 ee       	ldi	r21, 0xE1	; 225
     cca:	64 e0       	ldi	r22, 0x04	; 4
     ccc:	f1 50       	subi	r31, 0x01	; 1
     cce:	50 40       	sbci	r21, 0x00	; 0
     cd0:	60 40       	sbci	r22, 0x00	; 0
     cd2:	e1 f7       	brne	.-8      	; 0xccc <__stack+0x46d>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <__stack+0x477>
     cd6:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x96;
     cd8:	56 e9       	ldi	r21, 0x96	; 150
     cda:	5b bb       	out	0x1b, r21	; 27
     cdc:	7f ef       	ldi	r23, 0xFF	; 255
     cde:	a1 ee       	ldi	r26, 0xE1	; 225
     ce0:	b4 e0       	ldi	r27, 0x04	; 4
     ce2:	71 50       	subi	r23, 0x01	; 1
     ce4:	a0 40       	sbci	r26, 0x00	; 0
     ce6:	b0 40       	sbci	r27, 0x00	; 0
     ce8:	e1 f7       	brne	.-8      	; 0xce2 <__stack+0x483>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <__stack+0x48d>
     cec:	00 00       	nop
				_delay_ms(period);
				PORTA = 0xcc;
     cee:	5c ec       	ldi	r21, 0xCC	; 204
     cf0:	5b bb       	out	0x1b, r21	; 27
     cf2:	ef ef       	ldi	r30, 0xFF	; 255
     cf4:	f1 ee       	ldi	r31, 0xE1	; 225
     cf6:	54 e0       	ldi	r21, 0x04	; 4
     cf8:	e1 50       	subi	r30, 0x01	; 1
     cfa:	f0 40       	sbci	r31, 0x00	; 0
     cfc:	50 40       	sbci	r21, 0x00	; 0
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <__stack+0x499>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <__stack+0x4a3>
     d02:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x69;
     d04:	59 e6       	ldi	r21, 0x69	; 105
     d06:	5b bb       	out	0x1b, r21	; 27
     d08:	6f ef       	ldi	r22, 0xFF	; 255
     d0a:	71 ee       	ldi	r23, 0xE1	; 225
     d0c:	a4 e0       	ldi	r26, 0x04	; 4
     d0e:	61 50       	subi	r22, 0x01	; 1
     d10:	70 40       	sbci	r23, 0x00	; 0
     d12:	a0 40       	sbci	r26, 0x00	; 0
     d14:	e1 f7       	brne	.-8      	; 0xd0e <__stack+0x4af>
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <__stack+0x4b9>
     d18:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x33;
     d1a:	4b bb       	out	0x1b, r20	; 27
     d1c:	bf ef       	ldi	r27, 0xFF	; 255
     d1e:	e1 ee       	ldi	r30, 0xE1	; 225
     d20:	f4 e0       	ldi	r31, 0x04	; 4
     d22:	b1 50       	subi	r27, 0x01	; 1
     d24:	e0 40       	sbci	r30, 0x00	; 0
     d26:	f0 40       	sbci	r31, 0x00	; 0
     d28:	e1 f7       	brne	.-8      	; 0xd22 <__stack+0x4c3>
     d2a:	00 c0       	rjmp	.+0      	; 0xd2c <__stack+0x4cd>
     d2c:	00 00       	nop
				_delay_ms(period);
			}
			_delay_ms(10);
			
		}else{
			for (int i = 0; i <Stepper_1_Distance; i++){
     d2e:	2f 5f       	subi	r18, 0xFF	; 255
     d30:	3f 4f       	sbci	r19, 0xFF	; 255
     d32:	28 17       	cp	r18, r24
     d34:	39 07       	cpc	r19, r25
     d36:	2c f2       	brlt	.-118    	; 0xcc2 <__stack+0x463>
     d38:	8f e3       	ldi	r24, 0x3F	; 63
     d3a:	9c e9       	ldi	r25, 0x9C	; 156
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <__stack+0x4dd>
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <__stack+0x4e3>
     d42:	00 00       	nop
     d44:	08 95       	ret
			}
			_delay_ms(10);
		}
		
	}else{
		int defference=abs(Stepper_1_Distance)-abs(Stepper_2_Distance);
     d46:	9c 01       	movw	r18, r24
     d48:	99 23       	and	r25, r25
     d4a:	24 f4       	brge	.+8      	; 0xd54 <__stack+0x4f5>
     d4c:	22 27       	eor	r18, r18
     d4e:	33 27       	eor	r19, r19
     d50:	28 1b       	sub	r18, r24
     d52:	39 0b       	sbc	r19, r25
     d54:	ab 01       	movw	r20, r22
     d56:	77 23       	and	r23, r23
     d58:	24 f4       	brge	.+8      	; 0xd62 <__stack+0x503>
     d5a:	44 27       	eor	r20, r20
     d5c:	55 27       	eor	r21, r21
     d5e:	46 1b       	sub	r20, r22
     d60:	57 0b       	sbc	r21, r23
     d62:	fa 01       	movw	r30, r20
     d64:	d9 01       	movw	r26, r18
     d66:	a4 1b       	sub	r26, r20
     d68:	b5 0b       	sbc	r27, r21
     d6a:	ad 01       	movw	r20, r26
		if (abs(Stepper_1_Distance)>abs(Stepper_2_Distance)){
     d6c:	e2 17       	cp	r30, r18
     d6e:	f3 07       	cpc	r31, r19
     d70:	cc f1       	brlt	.+114    	; 0xde4 <__stack+0x585>
     d72:	87 c0       	rjmp	.+270    	; 0xe82 <__stack+0x623>
			for (int i = 0; i <Stepper_2_Distance; i++)
			{
				PORTA = 0x33;
     d74:	23 e3       	ldi	r18, 0x33	; 51
     d76:	2b bb       	out	0x1b, r18	; 27
     d78:	bf ef       	ldi	r27, 0xFF	; 255
     d7a:	e1 ee       	ldi	r30, 0xE1	; 225
     d7c:	f4 e0       	ldi	r31, 0x04	; 4
     d7e:	b1 50       	subi	r27, 0x01	; 1
     d80:	e0 40       	sbci	r30, 0x00	; 0
     d82:	f0 40       	sbci	r31, 0x00	; 0
     d84:	e1 f7       	brne	.-8      	; 0xd7e <__stack+0x51f>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <__stack+0x529>
     d88:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x69;
     d8a:	39 e6       	ldi	r19, 0x69	; 105
     d8c:	3b bb       	out	0x1b, r19	; 27
     d8e:	3f ef       	ldi	r19, 0xFF	; 255
     d90:	a1 ee       	ldi	r26, 0xE1	; 225
     d92:	b4 e0       	ldi	r27, 0x04	; 4
     d94:	31 50       	subi	r19, 0x01	; 1
     d96:	a0 40       	sbci	r26, 0x00	; 0
     d98:	b0 40       	sbci	r27, 0x00	; 0
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <__stack+0x535>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <__stack+0x53f>
     d9e:	00 00       	nop
				_delay_ms(period);
				PORTA = 0xcc;
     da0:	3c ec       	ldi	r19, 0xCC	; 204
     da2:	3b bb       	out	0x1b, r19	; 27
     da4:	ef ef       	ldi	r30, 0xFF	; 255
     da6:	f1 ee       	ldi	r31, 0xE1	; 225
     da8:	34 e0       	ldi	r19, 0x04	; 4
     daa:	e1 50       	subi	r30, 0x01	; 1
     dac:	f0 40       	sbci	r31, 0x00	; 0
     dae:	30 40       	sbci	r19, 0x00	; 0
     db0:	e1 f7       	brne	.-8      	; 0xdaa <__stack+0x54b>
     db2:	00 c0       	rjmp	.+0      	; 0xdb4 <__stack+0x555>
     db4:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x96;
     db6:	36 e9       	ldi	r19, 0x96	; 150
     db8:	3b bb       	out	0x1b, r19	; 27
     dba:	af ef       	ldi	r26, 0xFF	; 255
     dbc:	b1 ee       	ldi	r27, 0xE1	; 225
     dbe:	e4 e0       	ldi	r30, 0x04	; 4
     dc0:	a1 50       	subi	r26, 0x01	; 1
     dc2:	b0 40       	sbci	r27, 0x00	; 0
     dc4:	e0 40       	sbci	r30, 0x00	; 0
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <__stack+0x561>
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <__stack+0x56b>
     dca:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x33;
     dcc:	2b bb       	out	0x1b, r18	; 27
     dce:	ff ef       	ldi	r31, 0xFF	; 255
     dd0:	21 ee       	ldi	r18, 0xE1	; 225
     dd2:	34 e0       	ldi	r19, 0x04	; 4
     dd4:	f1 50       	subi	r31, 0x01	; 1
     dd6:	20 40       	sbci	r18, 0x00	; 0
     dd8:	30 40       	sbci	r19, 0x00	; 0
     dda:	e1 f7       	brne	.-8      	; 0xdd4 <__stack+0x575>
     ddc:	00 c0       	rjmp	.+0      	; 0xdde <__stack+0x57f>
     dde:	00 00       	nop
		}
		
	}else{
		int defference=abs(Stepper_1_Distance)-abs(Stepper_2_Distance);
		if (abs(Stepper_1_Distance)>abs(Stepper_2_Distance)){
			for (int i = 0; i <Stepper_2_Distance; i++)
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <__stack+0x589>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	86 17       	cp	r24, r22
     dea:	97 07       	cpc	r25, r23
     dec:	1c f2       	brlt	.-122    	; 0xd74 <__stack+0x515>
     dee:	8f e3       	ldi	r24, 0x3F	; 63
     df0:	9c e9       	ldi	r25, 0x9C	; 156
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <__stack+0x593>
     df6:	00 c0       	rjmp	.+0      	; 0xdf8 <__stack+0x599>
     df8:	00 00       	nop
				PORTA = 0x33;
				_delay_ms(period);
			}
			_delay_ms(10);
			
			for (int i = 0; i <defference; i++)
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	37 c0       	rjmp	.+110    	; 0xe6e <__stack+0x60f>
			{
				PORTA = 0x03;
     e00:	23 e0       	ldi	r18, 0x03	; 3
     e02:	2b bb       	out	0x1b, r18	; 27
     e04:	af ef       	ldi	r26, 0xFF	; 255
     e06:	b1 ee       	ldi	r27, 0xE1	; 225
     e08:	e4 e0       	ldi	r30, 0x04	; 4
     e0a:	a1 50       	subi	r26, 0x01	; 1
     e0c:	b0 40       	sbci	r27, 0x00	; 0
     e0e:	e0 40       	sbci	r30, 0x00	; 0
     e10:	e1 f7       	brne	.-8      	; 0xe0a <__stack+0x5ab>
     e12:	00 c0       	rjmp	.+0      	; 0xe14 <__stack+0x5b5>
     e14:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x09;
     e16:	39 e0       	ldi	r19, 0x09	; 9
     e18:	3b bb       	out	0x1b, r19	; 27
     e1a:	ff ef       	ldi	r31, 0xFF	; 255
     e1c:	31 ee       	ldi	r19, 0xE1	; 225
     e1e:	64 e0       	ldi	r22, 0x04	; 4
     e20:	f1 50       	subi	r31, 0x01	; 1
     e22:	30 40       	sbci	r19, 0x00	; 0
     e24:	60 40       	sbci	r22, 0x00	; 0
     e26:	e1 f7       	brne	.-8      	; 0xe20 <__stack+0x5c1>
     e28:	00 c0       	rjmp	.+0      	; 0xe2a <__stack+0x5cb>
     e2a:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x0c;
     e2c:	3c e0       	ldi	r19, 0x0C	; 12
     e2e:	3b bb       	out	0x1b, r19	; 27
     e30:	7f ef       	ldi	r23, 0xFF	; 255
     e32:	a1 ee       	ldi	r26, 0xE1	; 225
     e34:	b4 e0       	ldi	r27, 0x04	; 4
     e36:	71 50       	subi	r23, 0x01	; 1
     e38:	a0 40       	sbci	r26, 0x00	; 0
     e3a:	b0 40       	sbci	r27, 0x00	; 0
     e3c:	e1 f7       	brne	.-8      	; 0xe36 <__stack+0x5d7>
     e3e:	00 c0       	rjmp	.+0      	; 0xe40 <__stack+0x5e1>
     e40:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x06;
     e42:	36 e0       	ldi	r19, 0x06	; 6
     e44:	3b bb       	out	0x1b, r19	; 27
     e46:	ef ef       	ldi	r30, 0xFF	; 255
     e48:	f1 ee       	ldi	r31, 0xE1	; 225
     e4a:	34 e0       	ldi	r19, 0x04	; 4
     e4c:	e1 50       	subi	r30, 0x01	; 1
     e4e:	f0 40       	sbci	r31, 0x00	; 0
     e50:	30 40       	sbci	r19, 0x00	; 0
     e52:	e1 f7       	brne	.-8      	; 0xe4c <__stack+0x5ed>
     e54:	00 c0       	rjmp	.+0      	; 0xe56 <__stack+0x5f7>
     e56:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x03;
     e58:	2b bb       	out	0x1b, r18	; 27
     e5a:	6f ef       	ldi	r22, 0xFF	; 255
     e5c:	71 ee       	ldi	r23, 0xE1	; 225
     e5e:	a4 e0       	ldi	r26, 0x04	; 4
     e60:	61 50       	subi	r22, 0x01	; 1
     e62:	70 40       	sbci	r23, 0x00	; 0
     e64:	a0 40       	sbci	r26, 0x00	; 0
     e66:	e1 f7       	brne	.-8      	; 0xe60 <__stack+0x601>
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <__stack+0x60b>
     e6a:	00 00       	nop
				PORTA = 0x33;
				_delay_ms(period);
			}
			_delay_ms(10);
			
			for (int i = 0; i <defference; i++)
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	84 17       	cp	r24, r20
     e70:	95 07       	cpc	r25, r21
     e72:	34 f2       	brlt	.-116    	; 0xe00 <__stack+0x5a1>
     e74:	ef e3       	ldi	r30, 0x3F	; 63
     e76:	fc e9       	ldi	r31, 0x9C	; 156
     e78:	31 97       	sbiw	r30, 0x01	; 1
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <__stack+0x619>
     e7c:	00 c0       	rjmp	.+0      	; 0xe7e <__stack+0x61f>
     e7e:	00 00       	nop
     e80:	08 95       	ret
				PORTA = 0x03;
				_delay_ms(period);
			}
			_delay_ms(10);
			
			}else  if(abs(Stepper_2_Distance)>abs(Stepper_1_Distance)){
     e82:	2e 17       	cp	r18, r30
     e84:	3f 07       	cpc	r19, r31
     e86:	dc f1       	brlt	.+118    	; 0xefe <__stack+0x69f>
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	bf c0       	rjmp	.+382    	; 0x100c <__stack+0x7ad>
			for (int i = 0; i <abs(Stepper_1_Distance); i++)
			{
				PORTA = 0x33;
     e8e:	63 e3       	ldi	r22, 0x33	; 51
     e90:	6b bb       	out	0x1b, r22	; 27
     e92:	ff ef       	ldi	r31, 0xFF	; 255
     e94:	71 ee       	ldi	r23, 0xE1	; 225
     e96:	a4 e0       	ldi	r26, 0x04	; 4
     e98:	f1 50       	subi	r31, 0x01	; 1
     e9a:	70 40       	sbci	r23, 0x00	; 0
     e9c:	a0 40       	sbci	r26, 0x00	; 0
     e9e:	e1 f7       	brne	.-8      	; 0xe98 <__stack+0x639>
     ea0:	00 c0       	rjmp	.+0      	; 0xea2 <__stack+0x643>
     ea2:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x69;
     ea4:	79 e6       	ldi	r23, 0x69	; 105
     ea6:	7b bb       	out	0x1b, r23	; 27
     ea8:	bf ef       	ldi	r27, 0xFF	; 255
     eaa:	e1 ee       	ldi	r30, 0xE1	; 225
     eac:	f4 e0       	ldi	r31, 0x04	; 4
     eae:	b1 50       	subi	r27, 0x01	; 1
     eb0:	e0 40       	sbci	r30, 0x00	; 0
     eb2:	f0 40       	sbci	r31, 0x00	; 0
     eb4:	e1 f7       	brne	.-8      	; 0xeae <__stack+0x64f>
     eb6:	00 c0       	rjmp	.+0      	; 0xeb8 <__stack+0x659>
     eb8:	00 00       	nop
				_delay_ms(period);
				PORTA = 0xcc;
     eba:	7c ec       	ldi	r23, 0xCC	; 204
     ebc:	7b bb       	out	0x1b, r23	; 27
     ebe:	7f ef       	ldi	r23, 0xFF	; 255
     ec0:	a1 ee       	ldi	r26, 0xE1	; 225
     ec2:	b4 e0       	ldi	r27, 0x04	; 4
     ec4:	71 50       	subi	r23, 0x01	; 1
     ec6:	a0 40       	sbci	r26, 0x00	; 0
     ec8:	b0 40       	sbci	r27, 0x00	; 0
     eca:	e1 f7       	brne	.-8      	; 0xec4 <__stack+0x665>
     ecc:	00 c0       	rjmp	.+0      	; 0xece <__stack+0x66f>
     ece:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x96;
     ed0:	76 e9       	ldi	r23, 0x96	; 150
     ed2:	7b bb       	out	0x1b, r23	; 27
     ed4:	ef ef       	ldi	r30, 0xFF	; 255
     ed6:	f1 ee       	ldi	r31, 0xE1	; 225
     ed8:	74 e0       	ldi	r23, 0x04	; 4
     eda:	e1 50       	subi	r30, 0x01	; 1
     edc:	f0 40       	sbci	r31, 0x00	; 0
     ede:	70 40       	sbci	r23, 0x00	; 0
     ee0:	e1 f7       	brne	.-8      	; 0xeda <__stack+0x67b>
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <__stack+0x685>
     ee4:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x33;
     ee6:	6b bb       	out	0x1b, r22	; 27
     ee8:	af ef       	ldi	r26, 0xFF	; 255
     eea:	b1 ee       	ldi	r27, 0xE1	; 225
     eec:	e4 e0       	ldi	r30, 0x04	; 4
     eee:	a1 50       	subi	r26, 0x01	; 1
     ef0:	b0 40       	sbci	r27, 0x00	; 0
     ef2:	e0 40       	sbci	r30, 0x00	; 0
     ef4:	e1 f7       	brne	.-8      	; 0xeee <__stack+0x68f>
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <__stack+0x699>
     ef8:	00 00       	nop
				_delay_ms(period);
			}
			_delay_ms(10);
			
			}else  if(abs(Stepper_2_Distance)>abs(Stepper_1_Distance)){
			for (int i = 0; i <abs(Stepper_1_Distance); i++)
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <__stack+0x6a3>
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	82 17       	cp	r24, r18
     f04:	93 07       	cpc	r25, r19
     f06:	1c f2       	brlt	.-122    	; 0xe8e <__stack+0x62f>
     f08:	8f e3       	ldi	r24, 0x3F	; 63
     f0a:	9c e9       	ldi	r25, 0x9C	; 156
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <__stack+0x6ad>
     f10:	00 c0       	rjmp	.+0      	; 0xf12 <__stack+0x6b3>
     f12:	00 00       	nop
				PORTA = 0x33;
				_delay_ms(period);
			}
			_delay_ms(10);
			
			for (int i = 0; i <defference; i++)
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	37 c0       	rjmp	.+110    	; 0xf88 <__stack+0x729>
			{
				PORTA = 0x30;
     f1a:	20 e3       	ldi	r18, 0x30	; 48
     f1c:	2b bb       	out	0x1b, r18	; 27
     f1e:	af ef       	ldi	r26, 0xFF	; 255
     f20:	b1 ee       	ldi	r27, 0xE1	; 225
     f22:	e4 e0       	ldi	r30, 0x04	; 4
     f24:	a1 50       	subi	r26, 0x01	; 1
     f26:	b0 40       	sbci	r27, 0x00	; 0
     f28:	e0 40       	sbci	r30, 0x00	; 0
     f2a:	e1 f7       	brne	.-8      	; 0xf24 <__stack+0x6c5>
     f2c:	00 c0       	rjmp	.+0      	; 0xf2e <__stack+0x6cf>
     f2e:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x60;
     f30:	30 e6       	ldi	r19, 0x60	; 96
     f32:	3b bb       	out	0x1b, r19	; 27
     f34:	ff ef       	ldi	r31, 0xFF	; 255
     f36:	31 ee       	ldi	r19, 0xE1	; 225
     f38:	64 e0       	ldi	r22, 0x04	; 4
     f3a:	f1 50       	subi	r31, 0x01	; 1
     f3c:	30 40       	sbci	r19, 0x00	; 0
     f3e:	60 40       	sbci	r22, 0x00	; 0
     f40:	e1 f7       	brne	.-8      	; 0xf3a <__stack+0x6db>
     f42:	00 c0       	rjmp	.+0      	; 0xf44 <__stack+0x6e5>
     f44:	00 00       	nop
				_delay_ms(period);
				PORTA = 0xc0;
     f46:	30 ec       	ldi	r19, 0xC0	; 192
     f48:	3b bb       	out	0x1b, r19	; 27
     f4a:	7f ef       	ldi	r23, 0xFF	; 255
     f4c:	a1 ee       	ldi	r26, 0xE1	; 225
     f4e:	b4 e0       	ldi	r27, 0x04	; 4
     f50:	71 50       	subi	r23, 0x01	; 1
     f52:	a0 40       	sbci	r26, 0x00	; 0
     f54:	b0 40       	sbci	r27, 0x00	; 0
     f56:	e1 f7       	brne	.-8      	; 0xf50 <__stack+0x6f1>
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <__stack+0x6fb>
     f5a:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x90;
     f5c:	30 e9       	ldi	r19, 0x90	; 144
     f5e:	3b bb       	out	0x1b, r19	; 27
     f60:	ef ef       	ldi	r30, 0xFF	; 255
     f62:	f1 ee       	ldi	r31, 0xE1	; 225
     f64:	34 e0       	ldi	r19, 0x04	; 4
     f66:	e1 50       	subi	r30, 0x01	; 1
     f68:	f0 40       	sbci	r31, 0x00	; 0
     f6a:	30 40       	sbci	r19, 0x00	; 0
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <__stack+0x707>
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <__stack+0x711>
     f70:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x30;
     f72:	2b bb       	out	0x1b, r18	; 27
     f74:	6f ef       	ldi	r22, 0xFF	; 255
     f76:	71 ee       	ldi	r23, 0xE1	; 225
     f78:	a4 e0       	ldi	r26, 0x04	; 4
     f7a:	61 50       	subi	r22, 0x01	; 1
     f7c:	70 40       	sbci	r23, 0x00	; 0
     f7e:	a0 40       	sbci	r26, 0x00	; 0
     f80:	e1 f7       	brne	.-8      	; 0xf7a <__stack+0x71b>
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <__stack+0x725>
     f84:	00 00       	nop
				PORTA = 0x33;
				_delay_ms(period);
			}
			_delay_ms(10);
			
			for (int i = 0; i <defference; i++)
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	84 17       	cp	r24, r20
     f8a:	95 07       	cpc	r25, r21
     f8c:	34 f2       	brlt	.-116    	; 0xf1a <__stack+0x6bb>
     f8e:	ef e3       	ldi	r30, 0x3F	; 63
     f90:	fc e9       	ldi	r31, 0x9C	; 156
     f92:	31 97       	sbiw	r30, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <__stack+0x733>
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <__stack+0x739>
     f98:	00 00       	nop
     f9a:	08 95       	ret
			}
			_delay_ms(10);
			
			}else{
			for (int i = 0; i <Stepper_1_Distance; i++){
				PORTA = 0x33;
     f9c:	43 e3       	ldi	r20, 0x33	; 51
     f9e:	4b bb       	out	0x1b, r20	; 27
     fa0:	ff ef       	ldi	r31, 0xFF	; 255
     fa2:	51 ee       	ldi	r21, 0xE1	; 225
     fa4:	64 e0       	ldi	r22, 0x04	; 4
     fa6:	f1 50       	subi	r31, 0x01	; 1
     fa8:	50 40       	sbci	r21, 0x00	; 0
     faa:	60 40       	sbci	r22, 0x00	; 0
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <__stack+0x747>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <__stack+0x751>
     fb0:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x69;
     fb2:	59 e6       	ldi	r21, 0x69	; 105
     fb4:	5b bb       	out	0x1b, r21	; 27
     fb6:	7f ef       	ldi	r23, 0xFF	; 255
     fb8:	a1 ee       	ldi	r26, 0xE1	; 225
     fba:	b4 e0       	ldi	r27, 0x04	; 4
     fbc:	71 50       	subi	r23, 0x01	; 1
     fbe:	a0 40       	sbci	r26, 0x00	; 0
     fc0:	b0 40       	sbci	r27, 0x00	; 0
     fc2:	e1 f7       	brne	.-8      	; 0xfbc <__stack+0x75d>
     fc4:	00 c0       	rjmp	.+0      	; 0xfc6 <__stack+0x767>
     fc6:	00 00       	nop
				_delay_ms(period);
				PORTA = 0xcc;
     fc8:	5c ec       	ldi	r21, 0xCC	; 204
     fca:	5b bb       	out	0x1b, r21	; 27
     fcc:	ef ef       	ldi	r30, 0xFF	; 255
     fce:	f1 ee       	ldi	r31, 0xE1	; 225
     fd0:	54 e0       	ldi	r21, 0x04	; 4
     fd2:	e1 50       	subi	r30, 0x01	; 1
     fd4:	f0 40       	sbci	r31, 0x00	; 0
     fd6:	50 40       	sbci	r21, 0x00	; 0
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <__stack+0x773>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <__stack+0x77d>
     fdc:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x96;
     fde:	56 e9       	ldi	r21, 0x96	; 150
     fe0:	5b bb       	out	0x1b, r21	; 27
     fe2:	6f ef       	ldi	r22, 0xFF	; 255
     fe4:	71 ee       	ldi	r23, 0xE1	; 225
     fe6:	a4 e0       	ldi	r26, 0x04	; 4
     fe8:	61 50       	subi	r22, 0x01	; 1
     fea:	70 40       	sbci	r23, 0x00	; 0
     fec:	a0 40       	sbci	r26, 0x00	; 0
     fee:	e1 f7       	brne	.-8      	; 0xfe8 <__stack+0x789>
     ff0:	00 c0       	rjmp	.+0      	; 0xff2 <__stack+0x793>
     ff2:	00 00       	nop
				_delay_ms(period);
				PORTA = 0x33;
     ff4:	4b bb       	out	0x1b, r20	; 27
     ff6:	bf ef       	ldi	r27, 0xFF	; 255
     ff8:	e1 ee       	ldi	r30, 0xE1	; 225
     ffa:	f4 e0       	ldi	r31, 0x04	; 4
     ffc:	b1 50       	subi	r27, 0x01	; 1
     ffe:	e0 40       	sbci	r30, 0x00	; 0
    1000:	f0 40       	sbci	r31, 0x00	; 0
    1002:	e1 f7       	brne	.-8      	; 0xffc <__stack+0x79d>
    1004:	00 c0       	rjmp	.+0      	; 0x1006 <__stack+0x7a7>
    1006:	00 00       	nop
				_delay_ms(period);
			}
			_delay_ms(10);
			
			}else{
			for (int i = 0; i <Stepper_1_Distance; i++){
    1008:	2f 5f       	subi	r18, 0xFF	; 255
    100a:	3f 4f       	sbci	r19, 0xFF	; 255
    100c:	28 17       	cp	r18, r24
    100e:	39 07       	cpc	r19, r25
    1010:	2c f2       	brlt	.-118    	; 0xf9c <__stack+0x73d>
    1012:	8f e3       	ldi	r24, 0x3F	; 63
    1014:	9c e9       	ldi	r25, 0x9C	; 156
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	f1 f7       	brne	.-4      	; 0x1016 <__stack+0x7b7>
    101a:	00 c0       	rjmp	.+0      	; 0x101c <__stack+0x7bd>
    101c:	00 00       	nop
    101e:	08 95       	ret

00001020 <initUSART>:

#include "usart.h"

void initUSART(){
	
	DDRD |= 1 << PIND1;//pin1 of portD as OUTPUT
    1020:	81 b3       	in	r24, 0x11	; 17
    1022:	82 60       	ori	r24, 0x02	; 2
    1024:	81 bb       	out	0x11, r24	; 17
	
	int UBBRValue = 25;//AS described before setting baud rate

	//Put the upper part of the baud number here (bits 8 to 11)

	UBRRH = (unsigned char) (UBBRValue >> 8);
    1026:	10 bc       	out	0x20, r1	; 32

	//Put the remaining part of the baud number here

	UBRRL = (unsigned char) UBBRValue;
    1028:	89 e1       	ldi	r24, 0x19	; 25
    102a:	89 b9       	out	0x09, r24	; 9

	//Enable the receiver, transmitter and receiver interrupt
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    102c:	88 e9       	ldi	r24, 0x98	; 152
    102e:	8a b9       	out	0x0a, r24	; 10

	//Set 2 stop bits and data bit length is 8-bit

	UCSRC = (1 << USBS) | (3 << UCSZ0);
    1030:	8e e0       	ldi	r24, 0x0E	; 14
    1032:	80 bd       	out	0x20, r24	; 32
    1034:	08 95       	ret

00001036 <sendData>:
	
}

void sendData(uint8_t byte){
	while (! (UCSRA & (1 << UDRE)) );
    1036:	5d 9b       	sbis	0x0b, 5	; 11
    1038:	fe cf       	rjmp	.-4      	; 0x1036 <sendData>

	{
		UDR = byte;//once transmitter is ready sent eight bit data
    103a:	8c b9       	out	0x0c, r24	; 12
    103c:	8f e1       	ldi	r24, 0x1F	; 31
    103e:	9e e4       	ldi	r25, 0x4E	; 78
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <sendData+0xa>
    1044:	00 c0       	rjmp	.+0      	; 0x1046 <sendData+0x10>
    1046:	00 00       	nop
    1048:	08 95       	ret

0000104a <initUltrasonic>:
int timer1OverFlow=0;

void initUltrasonic()
{
	//Initialize Ultrasonic-1
	DDRD |= 1 << PIND7;	 // set PD7 output
    104a:	81 b3       	in	r24, 0x11	; 17
    104c:	80 68       	ori	r24, 0x80	; 128
    104e:	81 bb       	out	0x11, r24	; 17
	GICR |= (1<<INT0); //enabling interupt 0
    1050:	8b b7       	in	r24, 0x3b	; 59
    1052:	80 64       	ori	r24, 0x40	; 64
    1054:	8b bf       	out	0x3b, r24	; 59
	//General Interrupt Control Register
	MCUCR|= (1<<ISC00); //setting interrupt triggering logic change
    1056:	85 b7       	in	r24, 0x35	; 53
    1058:	81 60       	ori	r24, 0x01	; 1
    105a:	85 bf       	out	0x35, r24	; 53
	// MCU control Register
	TIMSK|=(1<<TOIE0);
    105c:	89 b7       	in	r24, 0x39	; 57
    105e:	81 60       	ori	r24, 0x01	; 1
    1060:	89 bf       	out	0x39, r24	; 57
	TCCR0 = 0;
    1062:	13 be       	out	0x33, r1	; 51
	
	//Initialize Ultrasonic-2
	DDRB |=(1<<PB6);
    1064:	87 b3       	in	r24, 0x17	; 23
    1066:	80 64       	ori	r24, 0x40	; 64
    1068:	87 bb       	out	0x17, r24	; 23
	GICR |= (1<<INT1); //enabling interupt 0
    106a:	8b b7       	in	r24, 0x3b	; 59
    106c:	80 68       	ori	r24, 0x80	; 128
    106e:	8b bf       	out	0x3b, r24	; 59
	//General Interrupt Control Register
	MCUCR|= (1<<ISC10); //setting interrupt triggering logic change
    1070:	85 b7       	in	r24, 0x35	; 53
    1072:	84 60       	ori	r24, 0x04	; 4
    1074:	85 bf       	out	0x35, r24	; 53
	// MCU control Register
	TIMSK|=(1<<TOIE1);
    1076:	89 b7       	in	r24, 0x39	; 57
    1078:	84 60       	ori	r24, 0x04	; 4
    107a:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;
    107c:	1f bc       	out	0x2f, r1	; 47
	
	//Initialize Ultrasonic-3
	DDRB |= (1<<PB7);
    107e:	87 b3       	in	r24, 0x17	; 23
    1080:	80 68       	ori	r24, 0x80	; 128
    1082:	87 bb       	out	0x17, r24	; 23
	GICR |= (1<<INT2); //enabling interupt 2
    1084:	8b b7       	in	r24, 0x3b	; 59
    1086:	80 62       	ori	r24, 0x20	; 32
    1088:	8b bf       	out	0x3b, r24	; 59
	//General Interrupt Control Register
	MCUCSR|= (1<<ISC2) ; //setting interrupt triggering logic LOW to HIGH
    108a:	84 b7       	in	r24, 0x34	; 52
    108c:	80 64       	ori	r24, 0x40	; 64
    108e:	84 bf       	out	0x34, r24	; 52
	// MCU control Register
	TIMSK|=(1<<TOIE2);
    1090:	89 b7       	in	r24, 0x39	; 57
    1092:	80 64       	ori	r24, 0x40	; 64
    1094:	89 bf       	out	0x39, r24	; 57
	TCCR2 = 0;
    1096:	15 bc       	out	0x25, r1	; 37
    1098:	08 95       	ret

0000109a <getUltrasonic_1_Distance>:
}

int getUltrasonic_1_Distance()
{
	int pulse;
	PORTD |= (1<<PIND7);
    109a:	82 b3       	in	r24, 0x12	; 18
    109c:	80 68       	ori	r24, 0x80	; 128
    109e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10a0:	80 ea       	ldi	r24, 0xA0	; 160
    10a2:	8a 95       	dec	r24
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <getUltrasonic_1_Distance+0x8>
	_delay_us(30); //triggering the sensor for 30usec
	PORTD &= (~(1<<PIND7));
    10a6:	82 b3       	in	r24, 0x12	; 18
    10a8:	8f 77       	andi	r24, 0x7F	; 127
    10aa:	82 bb       	out	0x12, r24	; 18
	
	while(ult1_count==NULL);
    10ac:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <ult1_count>
    10b0:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <ult1_count+0x1>
    10b4:	89 2b       	or	r24, r25
    10b6:	d1 f3       	breq	.-12     	; 0x10ac <getUltrasonic_1_Distance+0x12>
	
	pulse=ult1_count;
    10b8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <ult1_count>
    10bc:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <ult1_count+0x1>
	ult1_count=NULL;
    10c0:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <ult1_count+0x1>
    10c4:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <ult1_count>
	return (pulse/58)+1;
    10c8:	6a e3       	ldi	r22, 0x3A	; 58
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divmodhi4>
}
    10d0:	cb 01       	movw	r24, r22
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	08 95       	ret

000010d6 <getUltrasonic_2_Distance>:

int getUltrasonic_2_Distance()
{
	int pulse;
	PORTB |= (1<<PB6);
    10d6:	88 b3       	in	r24, 0x18	; 24
    10d8:	80 64       	ori	r24, 0x40	; 64
    10da:	88 bb       	out	0x18, r24	; 24
    10dc:	80 ea       	ldi	r24, 0xA0	; 160
    10de:	8a 95       	dec	r24
    10e0:	f1 f7       	brne	.-4      	; 0x10de <getUltrasonic_2_Distance+0x8>
	_delay_us(30); //triggering the sensor for 30usec
	PORTB &= (~(1<<PB6));
    10e2:	88 b3       	in	r24, 0x18	; 24
    10e4:	8f 7b       	andi	r24, 0xBF	; 191
    10e6:	88 bb       	out	0x18, r24	; 24
	
	while(ult2_count==NULL);
    10e8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ult2_count>
    10ec:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <ult2_count+0x1>
    10f0:	89 2b       	or	r24, r25
    10f2:	d1 f3       	breq	.-12     	; 0x10e8 <getUltrasonic_2_Distance+0x12>
	
	pulse=ult2_count;
    10f4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ult2_count>
    10f8:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <ult2_count+0x1>
	ult2_count=NULL;
    10fc:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <ult2_count+0x1>
    1100:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <ult2_count>
	return (pulse/928)+1;
    1104:	60 ea       	ldi	r22, 0xA0	; 160
    1106:	73 e0       	ldi	r23, 0x03	; 3
    1108:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <__divmodhi4>
}
    110c:	cb 01       	movw	r24, r22
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	08 95       	ret

00001112 <getUltrasonic_3_Distance>:

int getUltrasonic_3_Distance()
{
	int pulse;
	PORTB |= (1<<PB7);
    1112:	88 b3       	in	r24, 0x18	; 24
    1114:	80 68       	ori	r24, 0x80	; 128
    1116:	88 bb       	out	0x18, r24	; 24
    1118:	80 ea       	ldi	r24, 0xA0	; 160
    111a:	8a 95       	dec	r24
    111c:	f1 f7       	brne	.-4      	; 0x111a <getUltrasonic_3_Distance+0x8>
	_delay_us(30); //triggering the sensor for 30usec
	PORTB &= (~(1<<PB7));
    111e:	88 b3       	in	r24, 0x18	; 24
    1120:	8f 77       	andi	r24, 0x7F	; 127
    1122:	88 bb       	out	0x18, r24	; 24
	while(ult3_count==NULL);
    1124:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ult3_count>
    1128:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <ult3_count+0x1>
    112c:	89 2b       	or	r24, r25
    112e:	d1 f3       	breq	.-12     	; 0x1124 <getUltrasonic_3_Distance+0x12>
	
	pulse=ult3_count;
    1130:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <ult3_count>
    1134:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <ult3_count+0x1>
	ult3_count=NULL;
    1138:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ult3_count+0x1>
    113c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <ult3_count>
	return pulse/932.8+1;
    1140:	07 2e       	mov	r0, r23
    1142:	00 0c       	add	r0, r0
    1144:	88 0b       	sbc	r24, r24
    1146:	99 0b       	sbc	r25, r25
    1148:	0e 94 44 0c 	call	0x1888	; 0x1888 <__floatsisf>
    114c:	23 e3       	ldi	r18, 0x33	; 51
    114e:	33 e3       	ldi	r19, 0x33	; 51
    1150:	49 e6       	ldi	r20, 0x69	; 105
    1152:	54 e4       	ldi	r21, 0x44	; 68
    1154:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__divsf3>
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e8       	ldi	r20, 0x80	; 128
    115e:	5f e3       	ldi	r21, 0x3F	; 63
    1160:	0e 94 2e 0b 	call	0x165c	; 0x165c <__addsf3>
    1164:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__fixsfsi>
}
    1168:	cb 01       	movw	r24, r22
    116a:	08 95       	ret

0000116c <__vector_1>:

ISR(INT0_vect) // interrupt service routine when there is a change in logic level
{
    116c:	1f 92       	push	r1
    116e:	0f 92       	push	r0
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	0f 92       	push	r0
    1174:	11 24       	eor	r1, r1
    1176:	2f 93       	push	r18
    1178:	8f 93       	push	r24
    117a:	9f 93       	push	r25

	if (i==1)//when logic from HIGH to LOW
    117c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <i>
    1180:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <i+0x1>
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	89 f4       	brne	.+34     	; 0x11aa <__vector_1+0x3e>

	{

		TCCR0=0; //disabling counter
    1188:	13 be       	out	0x33, r1	; 51

		ult1_count=TCNT0+timer0OverFlow;//count memory is updated to intege
    118a:	22 b7       	in	r18, 0x32	; 50
    118c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <timer0OverFlow>
    1190:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <timer0OverFlow+0x1>
    1194:	82 0f       	add	r24, r18
    1196:	91 1d       	adc	r25, r1
    1198:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <ult1_count+0x1>
    119c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <ult1_count>
		
		TCNT0=0;//resetting the counter memory
    11a0:	12 be       	out	0x32, r1	; 50

		i=0;
    11a2:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <i+0x1>
    11a6:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <i>

	}

	if (i==0)//when logic change from LOW to HIGH
    11aa:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <i>
    11ae:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <i+0x1>
    11b2:	89 2b       	or	r24, r25
    11b4:	49 f4       	brne	.+18     	; 0x11c8 <__vector_1+0x5c>

	{

		TCCR0|=(1<<CS10);//enabling counter
    11b6:	83 b7       	in	r24, 0x33	; 51
    11b8:	81 60       	ori	r24, 0x01	; 1
    11ba:	83 bf       	out	0x33, r24	; 51

		i=1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <i+0x1>
    11c4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <i>

	}
	timer0OverFlow=0;
    11c8:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <timer0OverFlow+0x1>
    11cc:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <timer0OverFlow>
}
    11d0:	9f 91       	pop	r25
    11d2:	8f 91       	pop	r24
    11d4:	2f 91       	pop	r18
    11d6:	0f 90       	pop	r0
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	0f 90       	pop	r0
    11dc:	1f 90       	pop	r1
    11de:	18 95       	reti

000011e0 <__vector_2>:

ISR(INT1_vect) // interrupt service routine when there is a change in logic level
{
    11e0:	1f 92       	push	r1
    11e2:	0f 92       	push	r0
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	0f 92       	push	r0
    11e8:	11 24       	eor	r1, r1
    11ea:	2f 93       	push	r18
    11ec:	3f 93       	push	r19
    11ee:	8f 93       	push	r24
    11f0:	9f 93       	push	r25

	if (j==1)//when logic from HIGH to LOW
    11f2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <j>
    11f6:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <j+0x1>
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	99 f4       	brne	.+38     	; 0x1224 <__vector_2+0x44>

	{

		TCCR1B=0; //disabling counter
    11fe:	1e bc       	out	0x2e, r1	; 46

		ult2_count=TCNT1+timer1OverFlow;//count memory is updated to intege
    1200:	2c b5       	in	r18, 0x2c	; 44
    1202:	3d b5       	in	r19, 0x2d	; 45
    1204:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
    1208:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
    120c:	82 0f       	add	r24, r18
    120e:	93 1f       	adc	r25, r19
    1210:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <ult2_count+0x1>
    1214:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <ult2_count>

		TCNT1=0;//resetting the counter memory
    1218:	1d bc       	out	0x2d, r1	; 45
    121a:	1c bc       	out	0x2c, r1	; 44

		j=0;
    121c:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <j+0x1>
    1220:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <j>

	}

	if (j==0)//when logic change from LOW to HIGH
    1224:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <j>
    1228:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <j+0x1>
    122c:	89 2b       	or	r24, r25
    122e:	49 f4       	brne	.+18     	; 0x1242 <__vector_2+0x62>

	{

		TCCR1B|=(1<<CS10);//enabling counter
    1230:	8e b5       	in	r24, 0x2e	; 46
    1232:	81 60       	ori	r24, 0x01	; 1
    1234:	8e bd       	out	0x2e, r24	; 46

		j=1;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <j+0x1>
    123e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <j>

	}
	timer1OverFlow=0;
    1242:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
    1246:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
}
    124a:	9f 91       	pop	r25
    124c:	8f 91       	pop	r24
    124e:	3f 91       	pop	r19
    1250:	2f 91       	pop	r18
    1252:	0f 90       	pop	r0
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	0f 90       	pop	r0
    1258:	1f 90       	pop	r1
    125a:	18 95       	reti

0000125c <__vector_3>:

ISR(INT2_vect) // interrupt service routine when there is a change in logic level
{
    125c:	1f 92       	push	r1
    125e:	0f 92       	push	r0
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	0f 92       	push	r0
    1264:	11 24       	eor	r1, r1
    1266:	2f 93       	push	r18
    1268:	3f 93       	push	r19
    126a:	4f 93       	push	r20
    126c:	5f 93       	push	r21
    126e:	6f 93       	push	r22
    1270:	7f 93       	push	r23
    1272:	8f 93       	push	r24
    1274:	9f 93       	push	r25
    1276:	af 93       	push	r26
    1278:	bf 93       	push	r27
    127a:	ef 93       	push	r30
    127c:	ff 93       	push	r31

	if ((MCUCSR & (1<<ISC2))){//when logic change from LOW to HIGH
    127e:	04 b6       	in	r0, 0x34	; 52
    1280:	06 fe       	sbrs	r0, 6
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <__vector_3+0x36>

		TCCR2|=(1<<CS10);//enabling counter
    1284:	85 b5       	in	r24, 0x25	; 37
    1286:	81 60       	ori	r24, 0x01	; 1
    1288:	85 bd       	out	0x25, r24	; 37
		//i=1;
		MCUCSR &= ~(1<<ISC2) ; //HIGH to LOW
    128a:	84 b7       	in	r24, 0x34	; 52
    128c:	8f 7b       	andi	r24, 0xBF	; 191
    128e:	84 bf       	out	0x34, r24	; 52
    1290:	1b c0       	rjmp	.+54     	; 0x12c8 <__vector_3+0x6c>
		}else{//when logic from HIGH to LOW

		TCCR2=0; //disabling counter
    1292:	15 bc       	out	0x25, r1	; 37

		ult3_count=TCNT2+timer2OverFlow;//count memory is updated to integer
    1294:	64 b5       	in	r22, 0x24	; 36
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 44 0c 	call	0x1888	; 0x1888 <__floatsisf>
    12a0:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <timer2OverFlow>
    12a4:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <timer2OverFlow+0x1>
    12a8:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <timer2OverFlow+0x2>
    12ac:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <timer2OverFlow+0x3>
    12b0:	0e 94 2e 0b 	call	0x165c	; 0x165c <__addsf3>
    12b4:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__fixsfsi>
    12b8:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <ult3_count+0x1>
    12bc:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <ult3_count>

		TCNT2=0;//resetting the counter memory
    12c0:	14 bc       	out	0x24, r1	; 36
		//i=0;
		MCUCSR|= (1<<ISC2) ;
    12c2:	84 b7       	in	r24, 0x34	; 52
    12c4:	80 64       	ori	r24, 0x40	; 64
    12c6:	84 bf       	out	0x34, r24	; 52
	}
	timer2OverFlow=0;
    12c8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <timer2OverFlow>
    12cc:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <timer2OverFlow+0x1>
    12d0:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <timer2OverFlow+0x2>
    12d4:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <timer2OverFlow+0x3>
}
    12d8:	ff 91       	pop	r31
    12da:	ef 91       	pop	r30
    12dc:	bf 91       	pop	r27
    12de:	af 91       	pop	r26
    12e0:	9f 91       	pop	r25
    12e2:	8f 91       	pop	r24
    12e4:	7f 91       	pop	r23
    12e6:	6f 91       	pop	r22
    12e8:	5f 91       	pop	r21
    12ea:	4f 91       	pop	r20
    12ec:	3f 91       	pop	r19
    12ee:	2f 91       	pop	r18
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f 90       	pop	r0
    12f6:	1f 90       	pop	r1
    12f8:	18 95       	reti

000012fa <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	8f 93       	push	r24
    1306:	9f 93       	push	r25
	timer0OverFlow+=256;
    1308:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <timer0OverFlow>
    130c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <timer0OverFlow+0x1>
    1310:	93 95       	inc	r25
    1312:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <timer0OverFlow+0x1>
    1316:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <timer0OverFlow>
}
    131a:	9f 91       	pop	r25
    131c:	8f 91       	pop	r24
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 90       	pop	r0
    1324:	1f 90       	pop	r1
    1326:	18 95       	reti

00001328 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1328:	1f 92       	push	r1
    132a:	0f 92       	push	r0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	8f 93       	push	r24
    1334:	9f 93       	push	r25
	timer1OverFlow+=65535;
    1336:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
    133a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
    1344:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
}
    1348:	9f 91       	pop	r25
    134a:	8f 91       	pop	r24
    134c:	0f 90       	pop	r0
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	0f 90       	pop	r0
    1352:	1f 90       	pop	r1
    1354:	18 95       	reti

00001356 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    1356:	1f 92       	push	r1
    1358:	0f 92       	push	r0
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	0f 92       	push	r0
    135e:	11 24       	eor	r1, r1
    1360:	2f 93       	push	r18
    1362:	3f 93       	push	r19
    1364:	4f 93       	push	r20
    1366:	5f 93       	push	r21
    1368:	6f 93       	push	r22
    136a:	7f 93       	push	r23
    136c:	8f 93       	push	r24
    136e:	9f 93       	push	r25
    1370:	af 93       	push	r26
    1372:	bf 93       	push	r27
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
	timer2OverFlow+=256;
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e8       	ldi	r20, 0x80	; 128
    137e:	53 e4       	ldi	r21, 0x43	; 67
    1380:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <timer2OverFlow>
    1384:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <timer2OverFlow+0x1>
    1388:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <timer2OverFlow+0x2>
    138c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <timer2OverFlow+0x3>
    1390:	0e 94 2e 0b 	call	0x165c	; 0x165c <__addsf3>
    1394:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <timer2OverFlow>
    1398:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <timer2OverFlow+0x1>
    139c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <timer2OverFlow+0x2>
    13a0:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <timer2OverFlow+0x3>
    13a4:	ff 91       	pop	r31
    13a6:	ef 91       	pop	r30
    13a8:	bf 91       	pop	r27
    13aa:	af 91       	pop	r26
    13ac:	9f 91       	pop	r25
    13ae:	8f 91       	pop	r24
    13b0:	7f 91       	pop	r23
    13b2:	6f 91       	pop	r22
    13b4:	5f 91       	pop	r21
    13b6:	4f 91       	pop	r20
    13b8:	3f 91       	pop	r19
    13ba:	2f 91       	pop	r18
    13bc:	0f 90       	pop	r0
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	0f 90       	pop	r0
    13c2:	1f 90       	pop	r1
    13c4:	18 95       	reti

000013c6 <__vector_13>:
int receivedData;
int isInputDataRecevied=0;
int static volatile  rounds;
int static volatile  length;

ISR(USART_RXC_vect){
    13c6:	1f 92       	push	r1
    13c8:	0f 92       	push	r0
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	0f 92       	push	r0
    13ce:	11 24       	eor	r1, r1
    13d0:	8f 93       	push	r24
    13d2:	9f 93       	push	r25
	receivedData=UDR;
    13d4:	8c b1       	in	r24, 0x0c	; 12
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <receivedData+0x1>
    13dc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <receivedData>
	isInputDataRecevied=1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <isInputDataRecevied+0x1>
    13e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <isInputDataRecevied>
}
    13ec:	9f 91       	pop	r25
    13ee:	8f 91       	pop	r24
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <main>:

int main(void)
{
	int isMetal;
	initUltrasonic();
    13fa:	0e 94 25 08 	call	0x104a	; 0x104a <initUltrasonic>
	initUSART();
    13fe:	0e 94 10 08 	call	0x1020	; 0x1020 <initUSART>
	initSteppers();
    1402:	0e 94 64 00 	call	0xc8	; 0xc8 <initSteppers>
	initDCMotors();
    1406:	0e 94 49 00 	call	0x92	; 0x92 <initDCMotors>
	sei(); //enable global interrupts
    140a:	78 94       	sei
	while (1)
	{
		while (!(PIND & 1 << PD4)); // Wait until pipe place
    140c:	84 9b       	sbis	0x10, 4	; 16
    140e:	fe cf       	rjmp	.-4      	; 0x140c <main+0x12>

		if (PINB & 1 << PB5){ // Change DC motor speed
    1410:	b5 9b       	sbis	0x16, 5	; 22
    1412:	06 c0       	rjmp	.+12     	; 0x1420 <main+0x26>
			// metal
			isMetal = 1;
			sendData(HIGH_SPEED);
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	0e 94 1b 08 	call	0x1036	; 0x1036 <sendData>
	{
		while (!(PIND & 1 << PD4)); // Wait until pipe place

		if (PINB & 1 << PB5){ // Change DC motor speed
			// metal
			isMetal = 1;
    141a:	01 e0       	ldi	r16, 0x01	; 1
    141c:	10 e0       	ldi	r17, 0x00	; 0
    141e:	05 c0       	rjmp	.+10     	; 0x142a <main+0x30>
			sendData(HIGH_SPEED);
			
			}else{
			// PVC
			isMetal = 0;
			sendData(LOW_SPEED);
    1420:	83 e0       	ldi	r24, 0x03	; 3
    1422:	0e 94 1b 08 	call	0x1036	; 0x1036 <sendData>
			isMetal = 1;
			sendData(HIGH_SPEED);
			
			}else{
			// PVC
			isMetal = 0;
    1426:	00 e0       	ldi	r16, 0x00	; 0
    1428:	10 e0       	ldi	r17, 0x00	; 0

		// TODO USART send message

		// tight clutches1&2
		// Check ultrasonic sensor output
		ult2_distance = getUltrasonic_2_Distance();
    142a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <getUltrasonic_2_Distance>
    142e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <ult2_distance+0x1>
    1432:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <ult2_distance>
		ult3_distance = getUltrasonic_3_Distance();
    1436:	0e 94 89 08 	call	0x1112	; 0x1112 <getUltrasonic_3_Distance>
    143a:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <ult3_distance+0x1>
    143e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <ult3_distance>
		// move both clutches forward until ultrasonic output smallest number
		//TODO move simultaneously
		rotateStepper_1_and_2((ult2_distance-3),(ult3_distance-3));
    1442:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <ult3_distance>
    1446:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <ult3_distance+0x1>
    144a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <ult2_distance>
    144e:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <ult2_distance+0x1>
    1452:	63 50       	subi	r22, 0x03	; 3
    1454:	71 09       	sbc	r23, r1
    1456:	03 97       	sbiw	r24, 0x03	; 3
    1458:	0e 94 4b 02 	call	0x496	; 0x496 <rotateStepper_1_and_2>

		// move clutches through rail to align

		if ((PIND & 1 << PD5) && (PIND & 1 << PD6)){ // if both Ir sensor-2,3 are detected pipe
    145c:	85 9b       	sbis	0x10, 5	; 16
    145e:	0b c0       	rjmp	.+22     	; 0x1476 <main+0x7c>
    1460:	86 9b       	sbis	0x10, 6	; 16
    1462:	09 c0       	rjmp	.+18     	; 0x1476 <main+0x7c>
			rotateDCMotors(1);
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 4d 00 	call	0x9a	; 0x9a <rotateDCMotors>
			while (PIND & 1 << PD6);
    146c:	86 99       	sbic	0x10, 6	; 16
    146e:	fe cf       	rjmp	.-4      	; 0x146c <main+0x72>
			stopDCMotors();
    1470:	0e 94 5d 00 	call	0xba	; 0xba <stopDCMotors>
    1474:	0c c0       	rjmp	.+24     	; 0x148e <main+0x94>
		}
		else if (!(PIND & 1 << PD5) && !(PIND & 1 << PD6)){ // else if both Ir sensor-2,3 are not detected pipe
    1476:	85 99       	sbic	0x10, 5	; 16
    1478:	0a c0       	rjmp	.+20     	; 0x148e <main+0x94>
    147a:	86 99       	sbic	0x10, 6	; 16
    147c:	08 c0       	rjmp	.+16     	; 0x148e <main+0x94>
			rotateDCMotors(0);
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 4d 00 	call	0x9a	; 0x9a <rotateDCMotors>
			while (!(PIND & 1 << PD5));
    1486:	85 9b       	sbis	0x10, 5	; 16
    1488:	fe cf       	rjmp	.-4      	; 0x1486 <main+0x8c>
			stopDCMotors();
    148a:	0e 94 5d 00 	call	0xba	; 0xba <stopDCMotors>
		}

		while(!isInputDataRecevied);//get length value from user input
    148e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <isInputDataRecevied>
    1492:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <isInputDataRecevied+0x1>
    1496:	89 2b       	or	r24, r25
    1498:	d1 f3       	breq	.-12     	; 0x148e <main+0x94>
		length=receivedData;
    149a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <receivedData>
    149e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <receivedData+0x1>
    14a2:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <length+0x1>
    14a6:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <length>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14aa:	2f ef       	ldi	r18, 0xFF	; 255
    14ac:	83 ed       	ldi	r24, 0xD3	; 211
    14ae:	90 e3       	ldi	r25, 0x30	; 48
    14b0:	21 50       	subi	r18, 0x01	; 1
    14b2:	80 40       	sbci	r24, 0x00	; 0
    14b4:	90 40       	sbci	r25, 0x00	; 0
    14b6:	e1 f7       	brne	.-8      	; 0x14b0 <main+0xb6>
    14b8:	00 c0       	rjmp	.+0      	; 0x14ba <main+0xc0>
    14ba:	00 00       	nop
		_delay_ms(1000);
		
		//while(!isInputDataRecevied);//get unit value from user input
		rounds=receivedData;
    14bc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <receivedData>
    14c0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <receivedData+0x1>
    14c4:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <rounds+0x1>
    14c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <rounds>
		isInputDataRecevied=0;
    14cc:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <isInputDataRecevied+0x1>
    14d0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <isInputDataRecevied>

		// repeat cutting process(loop rounds time)
		for (int i = 0; i < rounds; i++)
    14d4:	c0 e0       	ldi	r28, 0x00	; 0
    14d6:	d0 e0       	ldi	r29, 0x00	; 0
    14d8:	65 c0       	rjmp	.+202    	; 0x15a4 <main+0x1aa>
		{
			//rotate stepper motor2 and 1 backwards
			rotateStepper_1_and_2(-maxRadius,-maxRadius);
    14da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    14de:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    14e2:	91 95       	neg	r25
    14e4:	81 95       	neg	r24
    14e6:	91 09       	sbc	r25, r1
    14e8:	bc 01       	movw	r22, r24
    14ea:	0e 94 4b 02 	call	0x496	; 0x496 <rotateStepper_1_and_2>
			// move pipe forward according to the calculated length
			rotateDCMotors(0);
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 4d 00 	call	0x9a	; 0x9a <rotateDCMotors>
			while(getUltrasonic_1_Distance()>3);
    14f6:	0e 94 4d 08 	call	0x109a	; 0x109a <getUltrasonic_1_Distance>
    14fa:	04 97       	sbiw	r24, 0x04	; 4
    14fc:	e4 f7       	brge	.-8      	; 0x14f6 <main+0xfc>
			// Check ultrasonic sensor output
			ult2_distance = getUltrasonic_2_Distance();
    14fe:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <getUltrasonic_2_Distance>
    1502:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <ult2_distance+0x1>
    1506:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <ult2_distance>
			ult3_distance = getUltrasonic_3_Distance();
    150a:	0e 94 89 08 	call	0x1112	; 0x1112 <getUltrasonic_3_Distance>
    150e:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <ult3_distance+0x1>
    1512:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <ult3_distance>
			//rotate stepper motor2 and 1 forward
			rotateStepper_1_and_2((ult2_distance-3),(ult3_distance-3));
    1516:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <ult3_distance>
    151a:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <ult3_distance+0x1>
    151e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <ult2_distance>
    1522:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <ult2_distance+0x1>
    1526:	63 50       	subi	r22, 0x03	; 3
    1528:	71 09       	sbc	r23, r1
    152a:	03 97       	sbiw	r24, 0x03	; 3
    152c:	0e 94 4b 02 	call	0x496	; 0x496 <rotateStepper_1_and_2>

			// get ultrasonic1 output distance (distance1)
			ult1_distance=getUltrasonic_1_Distance();
    1530:	0e 94 4d 08 	call	0x109a	; 0x109a <getUltrasonic_1_Distance>
    1534:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <ult1_distance+0x1>
    1538:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <ult1_distance>
			// move clutches though rail until ult1_distance-instantDistance==length
			rotateDCMotors(1);
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 4d 00 	call	0x9a	; 0x9a <rotateDCMotors>
			while((getUltrasonic_1_Distance()-ult1_distance)<length)
    1544:	02 c0       	rjmp	.+4      	; 0x154a <main+0x150>
			stopDCMotors();
    1546:	0e 94 5d 00 	call	0xba	; 0xba <stopDCMotors>

			// get ultrasonic1 output distance (distance1)
			ult1_distance=getUltrasonic_1_Distance();
			// move clutches though rail until ult1_distance-instantDistance==length
			rotateDCMotors(1);
			while((getUltrasonic_1_Distance()-ult1_distance)<length)
    154a:	0e 94 4d 08 	call	0x109a	; 0x109a <getUltrasonic_1_Distance>
    154e:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <ult1_distance>
    1552:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <ult1_distance+0x1>
    1556:	82 1b       	sub	r24, r18
    1558:	93 0b       	sbc	r25, r19
    155a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <length>
    155e:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <length+0x1>
    1562:	82 17       	cp	r24, r18
    1564:	93 07       	cpc	r25, r19
    1566:	7c f3       	brlt	.-34     	; 0x1546 <main+0x14c>
			stopDCMotors();
			// rotate stepper motor3 forward
			rotateStepper_3(maxRadius);
    1568:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    156c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1570:	0e 94 86 01 	call	0x30c	; 0x30c <rotateStepper_3>
			// pipe cutting process
			// start rotating cutting blade DC motor
			sendData(START);
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	0e 94 1b 08 	call	0x1036	; 0x1036 <sendData>
			// rotate stepper motor4
			rotateStepper_4(1);
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 1b 02 	call	0x436	; 0x436 <rotateStepper_4>
			rotateStepper_4(0);
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 1b 02 	call	0x436	; 0x436 <rotateStepper_4>
			rotateStepper_3(-maxRadius);
    158a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    158e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1592:	91 95       	neg	r25
    1594:	81 95       	neg	r24
    1596:	91 09       	sbc	r25, r1
    1598:	0e 94 86 01 	call	0x30c	; 0x30c <rotateStepper_3>
			sendData(STOP);
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	0e 94 1b 08 	call	0x1036	; 0x1036 <sendData>
		//while(!isInputDataRecevied);//get unit value from user input
		rounds=receivedData;
		isInputDataRecevied=0;

		// repeat cutting process(loop rounds time)
		for (int i = 0; i < rounds; i++)
    15a2:	21 96       	adiw	r28, 0x01	; 1
    15a4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <rounds>
    15a8:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <rounds+0x1>
    15ac:	c8 17       	cp	r28, r24
    15ae:	d9 07       	cpc	r29, r25
    15b0:	0c f4       	brge	.+2      	; 0x15b4 <main+0x1ba>
    15b2:	93 cf       	rjmp	.-218    	; 0x14da <main+0xe0>
			rotateStepper_3(-maxRadius);
			sendData(STOP);
		}

		// check if leftover pipe is waste or not
		if (!(PIND & 1 << PD4)){
    15b4:	84 99       	sbic	0x10, 4	; 16
    15b6:	2a cf       	rjmp	.-428    	; 0x140c <main+0x12>
			// get ultrasonic1 output distance (distance1)
			ult1_distance=getUltrasonic_1_Distance();
    15b8:	0e 94 4d 08 	call	0x109a	; 0x109a <getUltrasonic_1_Distance>
    15bc:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <ult1_distance+0x1>
    15c0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <ult1_distance>
			// move both clutches backward though rail
			rotateDCMotors(0);
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 94 4d 00 	call	0x9a	; 0x9a <rotateDCMotors>
			while (getUltrasonic_1_Distance()-ult1_distance > wasteBinDistanceZ)
    15cc:	0e 94 4d 08 	call	0x109a	; 0x109a <getUltrasonic_1_Distance>
    15d0:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <ult1_distance>
    15d4:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <ult1_distance+0x1>
    15d8:	82 1b       	sub	r24, r18
    15da:	93 0b       	sbc	r25, r19
    15dc:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <wasteBinDistanceZ>
    15e0:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <wasteBinDistanceZ+0x1>
    15e4:	28 17       	cp	r18, r24
    15e6:	39 07       	cpc	r19, r25
    15e8:	8c f3       	brlt	.-30     	; 0x15cc <main+0x1d2>
			;
			stopDCMotors();
    15ea:	0e 94 5d 00 	call	0xba	; 0xba <stopDCMotors>
			if (isMetal){
    15ee:	01 2b       	or	r16, r17
    15f0:	d1 f0       	breq	.+52     	; 0x1626 <main+0x22c>
				// move clutch1 backward && clutch2 forward
				rotateStepper_1_and_2(-wasteBinDistanceX,wasteBinDistanceX);
    15f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <wasteBinDistanceX>
    15f6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <wasteBinDistanceX+0x1>
    15fa:	bc 01       	movw	r22, r24
    15fc:	91 95       	neg	r25
    15fe:	81 95       	neg	r24
    1600:	91 09       	sbc	r25, r1
    1602:	0e 94 4b 02 	call	0x496	; 0x496 <rotateStepper_1_and_2>
				// when position correctly, drop wastage
				rotateStepper_2(-wasteBinDistanceX);
    1606:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <wasteBinDistanceX>
    160a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <wasteBinDistanceX+0x1>
    160e:	91 95       	neg	r25
    1610:	81 95       	neg	r24
    1612:	91 09       	sbc	r25, r1
    1614:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <rotateStepper_2>
				rotateStepper_1(wasteBinDistanceX);
    1618:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <wasteBinDistanceX>
    161c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <wasteBinDistanceX+0x1>
    1620:	0e 94 68 00 	call	0xd0	; 0xd0 <rotateStepper_1>
    1624:	f3 ce       	rjmp	.-538    	; 0x140c <main+0x12>
				}else{
				// move clutch2 backward && clutch1 forward
				rotateStepper_1_and_2(wasteBinDistanceX,-wasteBinDistanceX);
    1626:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <wasteBinDistanceX>
    162a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <wasteBinDistanceX+0x1>
    162e:	66 27       	eor	r22, r22
    1630:	77 27       	eor	r23, r23
    1632:	68 1b       	sub	r22, r24
    1634:	79 0b       	sbc	r23, r25
    1636:	0e 94 4b 02 	call	0x496	; 0x496 <rotateStepper_1_and_2>
				// when position correctly, drop wastage
				rotateStepper_1(-wasteBinDistanceX);
    163a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <wasteBinDistanceX>
    163e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <wasteBinDistanceX+0x1>
    1642:	91 95       	neg	r25
    1644:	81 95       	neg	r24
    1646:	91 09       	sbc	r25, r1
    1648:	0e 94 68 00 	call	0xd0	; 0xd0 <rotateStepper_1>
				rotateStepper_2(wasteBinDistanceX);
    164c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <wasteBinDistanceX>
    1650:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <wasteBinDistanceX+0x1>
    1654:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <rotateStepper_2>
    1658:	d9 ce       	rjmp	.-590    	; 0x140c <main+0x12>

0000165a <__subsf3>:
    165a:	50 58       	subi	r21, 0x80	; 128

0000165c <__addsf3>:
    165c:	bb 27       	eor	r27, r27
    165e:	aa 27       	eor	r26, r26
    1660:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3x>
    1664:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__fp_round>
    1668:	0e 94 88 0c 	call	0x1910	; 0x1910 <__fp_pscA>
    166c:	38 f0       	brcs	.+14     	; 0x167c <__addsf3+0x20>
    166e:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fp_pscB>
    1672:	20 f0       	brcs	.+8      	; 0x167c <__addsf3+0x20>
    1674:	39 f4       	brne	.+14     	; 0x1684 <__addsf3+0x28>
    1676:	9f 3f       	cpi	r25, 0xFF	; 255
    1678:	19 f4       	brne	.+6      	; 0x1680 <__addsf3+0x24>
    167a:	26 f4       	brtc	.+8      	; 0x1684 <__addsf3+0x28>
    167c:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_nan>
    1680:	0e f4       	brtc	.+2      	; 0x1684 <__addsf3+0x28>
    1682:	e0 95       	com	r30
    1684:	e7 fb       	bst	r30, 7
    1686:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__fp_inf>

0000168a <__addsf3x>:
    168a:	e9 2f       	mov	r30, r25
    168c:	0e 94 a7 0c 	call	0x194e	; 0x194e <__fp_split3>
    1690:	58 f3       	brcs	.-42     	; 0x1668 <__addsf3+0xc>
    1692:	ba 17       	cp	r27, r26
    1694:	62 07       	cpc	r22, r18
    1696:	73 07       	cpc	r23, r19
    1698:	84 07       	cpc	r24, r20
    169a:	95 07       	cpc	r25, r21
    169c:	20 f0       	brcs	.+8      	; 0x16a6 <__addsf3x+0x1c>
    169e:	79 f4       	brne	.+30     	; 0x16be <__addsf3x+0x34>
    16a0:	a6 f5       	brtc	.+104    	; 0x170a <__addsf3x+0x80>
    16a2:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__fp_zero>
    16a6:	0e f4       	brtc	.+2      	; 0x16aa <__addsf3x+0x20>
    16a8:	e0 95       	com	r30
    16aa:	0b 2e       	mov	r0, r27
    16ac:	ba 2f       	mov	r27, r26
    16ae:	a0 2d       	mov	r26, r0
    16b0:	0b 01       	movw	r0, r22
    16b2:	b9 01       	movw	r22, r18
    16b4:	90 01       	movw	r18, r0
    16b6:	0c 01       	movw	r0, r24
    16b8:	ca 01       	movw	r24, r20
    16ba:	a0 01       	movw	r20, r0
    16bc:	11 24       	eor	r1, r1
    16be:	ff 27       	eor	r31, r31
    16c0:	59 1b       	sub	r21, r25
    16c2:	99 f0       	breq	.+38     	; 0x16ea <__addsf3x+0x60>
    16c4:	59 3f       	cpi	r21, 0xF9	; 249
    16c6:	50 f4       	brcc	.+20     	; 0x16dc <__addsf3x+0x52>
    16c8:	50 3e       	cpi	r21, 0xE0	; 224
    16ca:	68 f1       	brcs	.+90     	; 0x1726 <__addsf3x+0x9c>
    16cc:	1a 16       	cp	r1, r26
    16ce:	f0 40       	sbci	r31, 0x00	; 0
    16d0:	a2 2f       	mov	r26, r18
    16d2:	23 2f       	mov	r18, r19
    16d4:	34 2f       	mov	r19, r20
    16d6:	44 27       	eor	r20, r20
    16d8:	58 5f       	subi	r21, 0xF8	; 248
    16da:	f3 cf       	rjmp	.-26     	; 0x16c2 <__addsf3x+0x38>
    16dc:	46 95       	lsr	r20
    16de:	37 95       	ror	r19
    16e0:	27 95       	ror	r18
    16e2:	a7 95       	ror	r26
    16e4:	f0 40       	sbci	r31, 0x00	; 0
    16e6:	53 95       	inc	r21
    16e8:	c9 f7       	brne	.-14     	; 0x16dc <__addsf3x+0x52>
    16ea:	7e f4       	brtc	.+30     	; 0x170a <__addsf3x+0x80>
    16ec:	1f 16       	cp	r1, r31
    16ee:	ba 0b       	sbc	r27, r26
    16f0:	62 0b       	sbc	r22, r18
    16f2:	73 0b       	sbc	r23, r19
    16f4:	84 0b       	sbc	r24, r20
    16f6:	ba f0       	brmi	.+46     	; 0x1726 <__addsf3x+0x9c>
    16f8:	91 50       	subi	r25, 0x01	; 1
    16fa:	a1 f0       	breq	.+40     	; 0x1724 <__addsf3x+0x9a>
    16fc:	ff 0f       	add	r31, r31
    16fe:	bb 1f       	adc	r27, r27
    1700:	66 1f       	adc	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	88 1f       	adc	r24, r24
    1706:	c2 f7       	brpl	.-16     	; 0x16f8 <__addsf3x+0x6e>
    1708:	0e c0       	rjmp	.+28     	; 0x1726 <__addsf3x+0x9c>
    170a:	ba 0f       	add	r27, r26
    170c:	62 1f       	adc	r22, r18
    170e:	73 1f       	adc	r23, r19
    1710:	84 1f       	adc	r24, r20
    1712:	48 f4       	brcc	.+18     	; 0x1726 <__addsf3x+0x9c>
    1714:	87 95       	ror	r24
    1716:	77 95       	ror	r23
    1718:	67 95       	ror	r22
    171a:	b7 95       	ror	r27
    171c:	f7 95       	ror	r31
    171e:	9e 3f       	cpi	r25, 0xFE	; 254
    1720:	08 f0       	brcs	.+2      	; 0x1724 <__addsf3x+0x9a>
    1722:	b0 cf       	rjmp	.-160    	; 0x1684 <__addsf3+0x28>
    1724:	93 95       	inc	r25
    1726:	88 0f       	add	r24, r24
    1728:	08 f0       	brcs	.+2      	; 0x172c <__addsf3x+0xa2>
    172a:	99 27       	eor	r25, r25
    172c:	ee 0f       	add	r30, r30
    172e:	97 95       	ror	r25
    1730:	87 95       	ror	r24
    1732:	08 95       	ret

00001734 <__divsf3>:
    1734:	0e 94 ae 0b 	call	0x175c	; 0x175c <__divsf3x>
    1738:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__fp_round>
    173c:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fp_pscB>
    1740:	58 f0       	brcs	.+22     	; 0x1758 <__divsf3+0x24>
    1742:	0e 94 88 0c 	call	0x1910	; 0x1910 <__fp_pscA>
    1746:	40 f0       	brcs	.+16     	; 0x1758 <__divsf3+0x24>
    1748:	29 f4       	brne	.+10     	; 0x1754 <__divsf3+0x20>
    174a:	5f 3f       	cpi	r21, 0xFF	; 255
    174c:	29 f0       	breq	.+10     	; 0x1758 <__divsf3+0x24>
    174e:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__fp_inf>
    1752:	51 11       	cpse	r21, r1
    1754:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__fp_szero>
    1758:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_nan>

0000175c <__divsf3x>:
    175c:	0e 94 a7 0c 	call	0x194e	; 0x194e <__fp_split3>
    1760:	68 f3       	brcs	.-38     	; 0x173c <__divsf3+0x8>

00001762 <__divsf3_pse>:
    1762:	99 23       	and	r25, r25
    1764:	b1 f3       	breq	.-20     	; 0x1752 <__divsf3+0x1e>
    1766:	55 23       	and	r21, r21
    1768:	91 f3       	breq	.-28     	; 0x174e <__divsf3+0x1a>
    176a:	95 1b       	sub	r25, r21
    176c:	55 0b       	sbc	r21, r21
    176e:	bb 27       	eor	r27, r27
    1770:	aa 27       	eor	r26, r26
    1772:	62 17       	cp	r22, r18
    1774:	73 07       	cpc	r23, r19
    1776:	84 07       	cpc	r24, r20
    1778:	38 f0       	brcs	.+14     	; 0x1788 <__divsf3_pse+0x26>
    177a:	9f 5f       	subi	r25, 0xFF	; 255
    177c:	5f 4f       	sbci	r21, 0xFF	; 255
    177e:	22 0f       	add	r18, r18
    1780:	33 1f       	adc	r19, r19
    1782:	44 1f       	adc	r20, r20
    1784:	aa 1f       	adc	r26, r26
    1786:	a9 f3       	breq	.-22     	; 0x1772 <__divsf3_pse+0x10>
    1788:	35 d0       	rcall	.+106    	; 0x17f4 <__divsf3_pse+0x92>
    178a:	0e 2e       	mov	r0, r30
    178c:	3a f0       	brmi	.+14     	; 0x179c <__divsf3_pse+0x3a>
    178e:	e0 e8       	ldi	r30, 0x80	; 128
    1790:	32 d0       	rcall	.+100    	; 0x17f6 <__divsf3_pse+0x94>
    1792:	91 50       	subi	r25, 0x01	; 1
    1794:	50 40       	sbci	r21, 0x00	; 0
    1796:	e6 95       	lsr	r30
    1798:	00 1c       	adc	r0, r0
    179a:	ca f7       	brpl	.-14     	; 0x178e <__divsf3_pse+0x2c>
    179c:	2b d0       	rcall	.+86     	; 0x17f4 <__divsf3_pse+0x92>
    179e:	fe 2f       	mov	r31, r30
    17a0:	29 d0       	rcall	.+82     	; 0x17f4 <__divsf3_pse+0x92>
    17a2:	66 0f       	add	r22, r22
    17a4:	77 1f       	adc	r23, r23
    17a6:	88 1f       	adc	r24, r24
    17a8:	bb 1f       	adc	r27, r27
    17aa:	26 17       	cp	r18, r22
    17ac:	37 07       	cpc	r19, r23
    17ae:	48 07       	cpc	r20, r24
    17b0:	ab 07       	cpc	r26, r27
    17b2:	b0 e8       	ldi	r27, 0x80	; 128
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <__divsf3_pse+0x56>
    17b6:	bb 0b       	sbc	r27, r27
    17b8:	80 2d       	mov	r24, r0
    17ba:	bf 01       	movw	r22, r30
    17bc:	ff 27       	eor	r31, r31
    17be:	93 58       	subi	r25, 0x83	; 131
    17c0:	5f 4f       	sbci	r21, 0xFF	; 255
    17c2:	3a f0       	brmi	.+14     	; 0x17d2 <__divsf3_pse+0x70>
    17c4:	9e 3f       	cpi	r25, 0xFE	; 254
    17c6:	51 05       	cpc	r21, r1
    17c8:	78 f0       	brcs	.+30     	; 0x17e8 <__divsf3_pse+0x86>
    17ca:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__fp_inf>
    17ce:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__fp_szero>
    17d2:	5f 3f       	cpi	r21, 0xFF	; 255
    17d4:	e4 f3       	brlt	.-8      	; 0x17ce <__divsf3_pse+0x6c>
    17d6:	98 3e       	cpi	r25, 0xE8	; 232
    17d8:	d4 f3       	brlt	.-12     	; 0x17ce <__divsf3_pse+0x6c>
    17da:	86 95       	lsr	r24
    17dc:	77 95       	ror	r23
    17de:	67 95       	ror	r22
    17e0:	b7 95       	ror	r27
    17e2:	f7 95       	ror	r31
    17e4:	9f 5f       	subi	r25, 0xFF	; 255
    17e6:	c9 f7       	brne	.-14     	; 0x17da <__divsf3_pse+0x78>
    17e8:	88 0f       	add	r24, r24
    17ea:	91 1d       	adc	r25, r1
    17ec:	96 95       	lsr	r25
    17ee:	87 95       	ror	r24
    17f0:	97 f9       	bld	r25, 7
    17f2:	08 95       	ret
    17f4:	e1 e0       	ldi	r30, 0x01	; 1
    17f6:	66 0f       	add	r22, r22
    17f8:	77 1f       	adc	r23, r23
    17fa:	88 1f       	adc	r24, r24
    17fc:	bb 1f       	adc	r27, r27
    17fe:	62 17       	cp	r22, r18
    1800:	73 07       	cpc	r23, r19
    1802:	84 07       	cpc	r24, r20
    1804:	ba 07       	cpc	r27, r26
    1806:	20 f0       	brcs	.+8      	; 0x1810 <__divsf3_pse+0xae>
    1808:	62 1b       	sub	r22, r18
    180a:	73 0b       	sbc	r23, r19
    180c:	84 0b       	sbc	r24, r20
    180e:	ba 0b       	sbc	r27, r26
    1810:	ee 1f       	adc	r30, r30
    1812:	88 f7       	brcc	.-30     	; 0x17f6 <__divsf3_pse+0x94>
    1814:	e0 95       	com	r30
    1816:	08 95       	ret

00001818 <__fixsfsi>:
    1818:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixunssfsi>
    181c:	68 94       	set
    181e:	b1 11       	cpse	r27, r1
    1820:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__fp_szero>
    1824:	08 95       	ret

00001826 <__fixunssfsi>:
    1826:	0e 94 af 0c 	call	0x195e	; 0x195e <__fp_splitA>
    182a:	88 f0       	brcs	.+34     	; 0x184e <__fixunssfsi+0x28>
    182c:	9f 57       	subi	r25, 0x7F	; 127
    182e:	98 f0       	brcs	.+38     	; 0x1856 <__fixunssfsi+0x30>
    1830:	b9 2f       	mov	r27, r25
    1832:	99 27       	eor	r25, r25
    1834:	b7 51       	subi	r27, 0x17	; 23
    1836:	b0 f0       	brcs	.+44     	; 0x1864 <__fixunssfsi+0x3e>
    1838:	e1 f0       	breq	.+56     	; 0x1872 <__fixunssfsi+0x4c>
    183a:	66 0f       	add	r22, r22
    183c:	77 1f       	adc	r23, r23
    183e:	88 1f       	adc	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	1a f0       	brmi	.+6      	; 0x184a <__fixunssfsi+0x24>
    1844:	ba 95       	dec	r27
    1846:	c9 f7       	brne	.-14     	; 0x183a <__fixunssfsi+0x14>
    1848:	14 c0       	rjmp	.+40     	; 0x1872 <__fixunssfsi+0x4c>
    184a:	b1 30       	cpi	r27, 0x01	; 1
    184c:	91 f0       	breq	.+36     	; 0x1872 <__fixunssfsi+0x4c>
    184e:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__fp_zero>
    1852:	b1 e0       	ldi	r27, 0x01	; 1
    1854:	08 95       	ret
    1856:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__fp_zero>
    185a:	67 2f       	mov	r22, r23
    185c:	78 2f       	mov	r23, r24
    185e:	88 27       	eor	r24, r24
    1860:	b8 5f       	subi	r27, 0xF8	; 248
    1862:	39 f0       	breq	.+14     	; 0x1872 <__fixunssfsi+0x4c>
    1864:	b9 3f       	cpi	r27, 0xF9	; 249
    1866:	cc f3       	brlt	.-14     	; 0x185a <__fixunssfsi+0x34>
    1868:	86 95       	lsr	r24
    186a:	77 95       	ror	r23
    186c:	67 95       	ror	r22
    186e:	b3 95       	inc	r27
    1870:	d9 f7       	brne	.-10     	; 0x1868 <__fixunssfsi+0x42>
    1872:	3e f4       	brtc	.+14     	; 0x1882 <__fixunssfsi+0x5c>
    1874:	90 95       	com	r25
    1876:	80 95       	com	r24
    1878:	70 95       	com	r23
    187a:	61 95       	neg	r22
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	8f 4f       	sbci	r24, 0xFF	; 255
    1880:	9f 4f       	sbci	r25, 0xFF	; 255
    1882:	08 95       	ret

00001884 <__floatunsisf>:
    1884:	e8 94       	clt
    1886:	09 c0       	rjmp	.+18     	; 0x189a <__floatsisf+0x12>

00001888 <__floatsisf>:
    1888:	97 fb       	bst	r25, 7
    188a:	3e f4       	brtc	.+14     	; 0x189a <__floatsisf+0x12>
    188c:	90 95       	com	r25
    188e:	80 95       	com	r24
    1890:	70 95       	com	r23
    1892:	61 95       	neg	r22
    1894:	7f 4f       	sbci	r23, 0xFF	; 255
    1896:	8f 4f       	sbci	r24, 0xFF	; 255
    1898:	9f 4f       	sbci	r25, 0xFF	; 255
    189a:	99 23       	and	r25, r25
    189c:	a9 f0       	breq	.+42     	; 0x18c8 <__floatsisf+0x40>
    189e:	f9 2f       	mov	r31, r25
    18a0:	96 e9       	ldi	r25, 0x96	; 150
    18a2:	bb 27       	eor	r27, r27
    18a4:	93 95       	inc	r25
    18a6:	f6 95       	lsr	r31
    18a8:	87 95       	ror	r24
    18aa:	77 95       	ror	r23
    18ac:	67 95       	ror	r22
    18ae:	b7 95       	ror	r27
    18b0:	f1 11       	cpse	r31, r1
    18b2:	f8 cf       	rjmp	.-16     	; 0x18a4 <__floatsisf+0x1c>
    18b4:	fa f4       	brpl	.+62     	; 0x18f4 <__floatsisf+0x6c>
    18b6:	bb 0f       	add	r27, r27
    18b8:	11 f4       	brne	.+4      	; 0x18be <__floatsisf+0x36>
    18ba:	60 ff       	sbrs	r22, 0
    18bc:	1b c0       	rjmp	.+54     	; 0x18f4 <__floatsisf+0x6c>
    18be:	6f 5f       	subi	r22, 0xFF	; 255
    18c0:	7f 4f       	sbci	r23, 0xFF	; 255
    18c2:	8f 4f       	sbci	r24, 0xFF	; 255
    18c4:	9f 4f       	sbci	r25, 0xFF	; 255
    18c6:	16 c0       	rjmp	.+44     	; 0x18f4 <__floatsisf+0x6c>
    18c8:	88 23       	and	r24, r24
    18ca:	11 f0       	breq	.+4      	; 0x18d0 <__floatsisf+0x48>
    18cc:	96 e9       	ldi	r25, 0x96	; 150
    18ce:	11 c0       	rjmp	.+34     	; 0x18f2 <__floatsisf+0x6a>
    18d0:	77 23       	and	r23, r23
    18d2:	21 f0       	breq	.+8      	; 0x18dc <__floatsisf+0x54>
    18d4:	9e e8       	ldi	r25, 0x8E	; 142
    18d6:	87 2f       	mov	r24, r23
    18d8:	76 2f       	mov	r23, r22
    18da:	05 c0       	rjmp	.+10     	; 0x18e6 <__floatsisf+0x5e>
    18dc:	66 23       	and	r22, r22
    18de:	71 f0       	breq	.+28     	; 0x18fc <__floatsisf+0x74>
    18e0:	96 e8       	ldi	r25, 0x86	; 134
    18e2:	86 2f       	mov	r24, r22
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	2a f0       	brmi	.+10     	; 0x18f4 <__floatsisf+0x6c>
    18ea:	9a 95       	dec	r25
    18ec:	66 0f       	add	r22, r22
    18ee:	77 1f       	adc	r23, r23
    18f0:	88 1f       	adc	r24, r24
    18f2:	da f7       	brpl	.-10     	; 0x18ea <__floatsisf+0x62>
    18f4:	88 0f       	add	r24, r24
    18f6:	96 95       	lsr	r25
    18f8:	87 95       	ror	r24
    18fa:	97 f9       	bld	r25, 7
    18fc:	08 95       	ret

000018fe <__fp_inf>:
    18fe:	97 f9       	bld	r25, 7
    1900:	9f 67       	ori	r25, 0x7F	; 127
    1902:	80 e8       	ldi	r24, 0x80	; 128
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	08 95       	ret

0000190a <__fp_nan>:
    190a:	9f ef       	ldi	r25, 0xFF	; 255
    190c:	80 ec       	ldi	r24, 0xC0	; 192
    190e:	08 95       	ret

00001910 <__fp_pscA>:
    1910:	00 24       	eor	r0, r0
    1912:	0a 94       	dec	r0
    1914:	16 16       	cp	r1, r22
    1916:	17 06       	cpc	r1, r23
    1918:	18 06       	cpc	r1, r24
    191a:	09 06       	cpc	r0, r25
    191c:	08 95       	ret

0000191e <__fp_pscB>:
    191e:	00 24       	eor	r0, r0
    1920:	0a 94       	dec	r0
    1922:	12 16       	cp	r1, r18
    1924:	13 06       	cpc	r1, r19
    1926:	14 06       	cpc	r1, r20
    1928:	05 06       	cpc	r0, r21
    192a:	08 95       	ret

0000192c <__fp_round>:
    192c:	09 2e       	mov	r0, r25
    192e:	03 94       	inc	r0
    1930:	00 0c       	add	r0, r0
    1932:	11 f4       	brne	.+4      	; 0x1938 <__fp_round+0xc>
    1934:	88 23       	and	r24, r24
    1936:	52 f0       	brmi	.+20     	; 0x194c <__fp_round+0x20>
    1938:	bb 0f       	add	r27, r27
    193a:	40 f4       	brcc	.+16     	; 0x194c <__fp_round+0x20>
    193c:	bf 2b       	or	r27, r31
    193e:	11 f4       	brne	.+4      	; 0x1944 <__fp_round+0x18>
    1940:	60 ff       	sbrs	r22, 0
    1942:	04 c0       	rjmp	.+8      	; 0x194c <__fp_round+0x20>
    1944:	6f 5f       	subi	r22, 0xFF	; 255
    1946:	7f 4f       	sbci	r23, 0xFF	; 255
    1948:	8f 4f       	sbci	r24, 0xFF	; 255
    194a:	9f 4f       	sbci	r25, 0xFF	; 255
    194c:	08 95       	ret

0000194e <__fp_split3>:
    194e:	57 fd       	sbrc	r21, 7
    1950:	90 58       	subi	r25, 0x80	; 128
    1952:	44 0f       	add	r20, r20
    1954:	55 1f       	adc	r21, r21
    1956:	59 f0       	breq	.+22     	; 0x196e <__fp_splitA+0x10>
    1958:	5f 3f       	cpi	r21, 0xFF	; 255
    195a:	71 f0       	breq	.+28     	; 0x1978 <__fp_splitA+0x1a>
    195c:	47 95       	ror	r20

0000195e <__fp_splitA>:
    195e:	88 0f       	add	r24, r24
    1960:	97 fb       	bst	r25, 7
    1962:	99 1f       	adc	r25, r25
    1964:	61 f0       	breq	.+24     	; 0x197e <__fp_splitA+0x20>
    1966:	9f 3f       	cpi	r25, 0xFF	; 255
    1968:	79 f0       	breq	.+30     	; 0x1988 <__fp_splitA+0x2a>
    196a:	87 95       	ror	r24
    196c:	08 95       	ret
    196e:	12 16       	cp	r1, r18
    1970:	13 06       	cpc	r1, r19
    1972:	14 06       	cpc	r1, r20
    1974:	55 1f       	adc	r21, r21
    1976:	f2 cf       	rjmp	.-28     	; 0x195c <__fp_split3+0xe>
    1978:	46 95       	lsr	r20
    197a:	f1 df       	rcall	.-30     	; 0x195e <__fp_splitA>
    197c:	08 c0       	rjmp	.+16     	; 0x198e <__fp_splitA+0x30>
    197e:	16 16       	cp	r1, r22
    1980:	17 06       	cpc	r1, r23
    1982:	18 06       	cpc	r1, r24
    1984:	99 1f       	adc	r25, r25
    1986:	f1 cf       	rjmp	.-30     	; 0x196a <__fp_splitA+0xc>
    1988:	86 95       	lsr	r24
    198a:	71 05       	cpc	r23, r1
    198c:	61 05       	cpc	r22, r1
    198e:	08 94       	sec
    1990:	08 95       	ret

00001992 <__fp_zero>:
    1992:	e8 94       	clt

00001994 <__fp_szero>:
    1994:	bb 27       	eor	r27, r27
    1996:	66 27       	eor	r22, r22
    1998:	77 27       	eor	r23, r23
    199a:	cb 01       	movw	r24, r22
    199c:	97 f9       	bld	r25, 7
    199e:	08 95       	ret

000019a0 <__divmodhi4>:
    19a0:	97 fb       	bst	r25, 7
    19a2:	07 2e       	mov	r0, r23
    19a4:	16 f4       	brtc	.+4      	; 0x19aa <__divmodhi4+0xa>
    19a6:	00 94       	com	r0
    19a8:	07 d0       	rcall	.+14     	; 0x19b8 <__divmodhi4_neg1>
    19aa:	77 fd       	sbrc	r23, 7
    19ac:	09 d0       	rcall	.+18     	; 0x19c0 <__divmodhi4_neg2>
    19ae:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__udivmodhi4>
    19b2:	07 fc       	sbrc	r0, 7
    19b4:	05 d0       	rcall	.+10     	; 0x19c0 <__divmodhi4_neg2>
    19b6:	3e f4       	brtc	.+14     	; 0x19c6 <__divmodhi4_exit>

000019b8 <__divmodhi4_neg1>:
    19b8:	90 95       	com	r25
    19ba:	81 95       	neg	r24
    19bc:	9f 4f       	sbci	r25, 0xFF	; 255
    19be:	08 95       	ret

000019c0 <__divmodhi4_neg2>:
    19c0:	70 95       	com	r23
    19c2:	61 95       	neg	r22
    19c4:	7f 4f       	sbci	r23, 0xFF	; 255

000019c6 <__divmodhi4_exit>:
    19c6:	08 95       	ret

000019c8 <__udivmodhi4>:
    19c8:	aa 1b       	sub	r26, r26
    19ca:	bb 1b       	sub	r27, r27
    19cc:	51 e1       	ldi	r21, 0x11	; 17
    19ce:	07 c0       	rjmp	.+14     	; 0x19de <__udivmodhi4_ep>

000019d0 <__udivmodhi4_loop>:
    19d0:	aa 1f       	adc	r26, r26
    19d2:	bb 1f       	adc	r27, r27
    19d4:	a6 17       	cp	r26, r22
    19d6:	b7 07       	cpc	r27, r23
    19d8:	10 f0       	brcs	.+4      	; 0x19de <__udivmodhi4_ep>
    19da:	a6 1b       	sub	r26, r22
    19dc:	b7 0b       	sbc	r27, r23

000019de <__udivmodhi4_ep>:
    19de:	88 1f       	adc	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	5a 95       	dec	r21
    19e4:	a9 f7       	brne	.-22     	; 0x19d0 <__udivmodhi4_loop>
    19e6:	80 95       	com	r24
    19e8:	90 95       	com	r25
    19ea:	bc 01       	movw	r22, r24
    19ec:	cd 01       	movw	r24, r26
    19ee:	08 95       	ret

000019f0 <_exit>:
    19f0:	f8 94       	cli

000019f2 <__stop_program>:
    19f2:	ff cf       	rjmp	.-2      	; 0x19f2 <__stop_program>
