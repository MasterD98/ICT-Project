
Motor controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007d9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00007d9e  00007e32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800076  00800076  00007e48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007e48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007e78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00007eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d3e  00000000  00000000  00007fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d2  00000000  00000000  0000acfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002837  00000000  00000000  0000b6cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  0000df04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058d  00000000  00000000  0000e2cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a2  00000000  00000000  0000e859  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000effb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bc 37 	jmp	0x6f78	; 0x6f78 <__vector_1>
       8:	0c 94 25 38 	jmp	0x704a	; 0x704a <__vector_2>
       c:	0c 94 8e 38 	jmp	0x711c	; 0x711c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 19 39 	jmp	0x7232	; 0x7232 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	fd e7       	ldi	r31, 0x7D	; 125
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 44 39 	call	0x7288	; 0x7288 <main>
      8a:	0c 94 cd 3e 	jmp	0x7d9a	; 0x7d9a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <rotateDCMotors>:
 */ 

#include "dcmotor.h"

void rotateDCMotors(int direction)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <rotateDCMotors+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	9a 83       	std	Y+2, r25	; 0x02
      9e:	89 83       	std	Y+1, r24	; 0x01
	if (direction != 0)
      a0:	89 81       	ldd	r24, Y+1	; 0x01
      a2:	9a 81       	ldd	r25, Y+2	; 0x02
      a4:	89 2b       	or	r24, r25
      a6:	99 f0       	breq	.+38     	; 0xce <rotateDCMotors+0x3c>
	{
		// Rotate DC motor Clockwise ?
		PORTC &= ~(1 << PB0);
      a8:	85 e3       	ldi	r24, 0x35	; 53
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	25 e3       	ldi	r18, 0x35	; 53
      ae:	30 e0       	ldi	r19, 0x00	; 0
      b0:	f9 01       	movw	r30, r18
      b2:	20 81       	ld	r18, Z
      b4:	2e 7f       	andi	r18, 0xFE	; 254
      b6:	fc 01       	movw	r30, r24
      b8:	20 83       	st	Z, r18
		PORTC |= (1 << PB1);
      ba:	85 e3       	ldi	r24, 0x35	; 53
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	25 e3       	ldi	r18, 0x35	; 53
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	f9 01       	movw	r30, r18
      c4:	20 81       	ld	r18, Z
      c6:	22 60       	ori	r18, 0x02	; 2
      c8:	fc 01       	movw	r30, r24
      ca:	20 83       	st	Z, r18
	{
		// Else rotate DC motor Counterclockwise
		PORTC |= (1 << PB0);
		PORTC &= ~(1 << PB1);
	}
}
      cc:	12 c0       	rjmp	.+36     	; 0xf2 <rotateDCMotors+0x60>
		PORTC |= (1 << PB1);
	}
	else
	{
		// Else rotate DC motor Counterclockwise
		PORTC |= (1 << PB0);
      ce:	85 e3       	ldi	r24, 0x35	; 53
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	25 e3       	ldi	r18, 0x35	; 53
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	f9 01       	movw	r30, r18
      d8:	20 81       	ld	r18, Z
      da:	21 60       	ori	r18, 0x01	; 1
      dc:	fc 01       	movw	r30, r24
      de:	20 83       	st	Z, r18
		PORTC &= ~(1 << PB1);
      e0:	85 e3       	ldi	r24, 0x35	; 53
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	25 e3       	ldi	r18, 0x35	; 53
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	f9 01       	movw	r30, r18
      ea:	20 81       	ld	r18, Z
      ec:	2d 7f       	andi	r18, 0xFD	; 253
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
	}
}
      f2:	00 00       	nop
      f4:	0f 90       	pop	r0
      f6:	0f 90       	pop	r0
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <stopDCMotors>:

void stopDCMotors()
{
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	cd b7       	in	r28, 0x3d	; 61
     104:	de b7       	in	r29, 0x3e	; 62
	// stop Rotation DC motor
	PORTC &= ~(1 << PB0);
     106:	85 e3       	ldi	r24, 0x35	; 53
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	25 e3       	ldi	r18, 0x35	; 53
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	f9 01       	movw	r30, r18
     110:	20 81       	ld	r18, Z
     112:	2e 7f       	andi	r18, 0xFE	; 254
     114:	fc 01       	movw	r30, r24
     116:	20 83       	st	Z, r18
	PORTC &= ~(1 << PB1);
     118:	85 e3       	ldi	r24, 0x35	; 53
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	25 e3       	ldi	r18, 0x35	; 53
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	f9 01       	movw	r30, r18
     122:	20 81       	ld	r18, Z
     124:	2d 7f       	andi	r18, 0xFD	; 253
     126:	fc 01       	movw	r30, r24
     128:	20 83       	st	Z, r18
     12a:	00 00       	nop
     12c:	df 91       	pop	r29
     12e:	cf 91       	pop	r28
     130:	08 95       	ret

00000132 <initSteppers>:
 *  Author: Dasith
 */ 

#include "stepper.h"

void initSteppers(){
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
		DDRA = 0xFF;
     13a:	8a e3       	ldi	r24, 0x3A	; 58
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	2f ef       	ldi	r18, 0xFF	; 255
     140:	fc 01       	movw	r30, r24
     142:	20 83       	st	Z, r18
		DDRC = 0xFF;
     144:	84 e3       	ldi	r24, 0x34	; 52
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	2f ef       	ldi	r18, 0xFF	; 255
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
}
     14e:	00 00       	nop
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <rotateStepper_1>:

void rotateStepper_1(int direction, float distance)
{
     156:	cf 92       	push	r12
     158:	df 92       	push	r13
     15a:	ef 92       	push	r14
     15c:	ff 92       	push	r15
     15e:	0f 93       	push	r16
     160:	1f 93       	push	r17
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	c0 5d       	subi	r28, 0xD0	; 208
     16c:	d1 09       	sbc	r29, r1
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	9e 01       	movw	r18, r28
     17a:	25 53       	subi	r18, 0x35	; 53
     17c:	3f 4f       	sbci	r19, 0xFF	; 255
     17e:	f9 01       	movw	r30, r18
     180:	91 83       	std	Z+1, r25	; 0x01
     182:	80 83       	st	Z, r24
     184:	ce 01       	movw	r24, r28
     186:	83 53       	subi	r24, 0x33	; 51
     188:	9f 4f       	sbci	r25, 0xFF	; 255
     18a:	fc 01       	movw	r30, r24
     18c:	40 83       	st	Z, r20
     18e:	51 83       	std	Z+1, r21	; 0x01
     190:	62 83       	std	Z+2, r22	; 0x02
     192:	73 83       	std	Z+3, r23	; 0x03
	// clockwise-1
	// Counterclockwise-0
	// 1 distance unit = 1 rotating

	int period;
	period = 10;
     194:	8a e0       	ldi	r24, 0x0A	; 10
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	9e 83       	std	Y+6, r25	; 0x06
     19a:	8d 83       	std	Y+5, r24	; 0x05
	if (direction == 1)
     19c:	ce 01       	movw	r24, r28
     19e:	85 53       	subi	r24, 0x35	; 53
     1a0:	9f 4f       	sbci	r25, 0xFF	; 255
     1a2:	fc 01       	movw	r30, r24
     1a4:	80 81       	ld	r24, Z
     1a6:	91 81       	ldd	r25, Z+1	; 0x01
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	09 f0       	breq	.+2      	; 0x1ae <rotateStepper_1+0x58>
     1ac:	16 c7       	rjmp	.+3628   	; 0xfda <__stack+0x77b>
	{
		for (int i = 0; i < round(distance); i++)
     1ae:	1a 82       	std	Y+2, r1	; 0x02
     1b0:	19 82       	std	Y+1, r1	; 0x01
     1b2:	ef c6       	rjmp	.+3550   	; 0xf92 <__stack+0x733>
		{
			PORTA = 0x03;
     1b4:	8b e3       	ldi	r24, 0x3B	; 59
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	23 e0       	ldi	r18, 0x03	; 3
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
			_delay_ms(period);
     1be:	8d 81       	ldd	r24, Y+5	; 0x05
     1c0:	9e 81       	ldd	r25, Y+6	; 0x06
     1c2:	09 2e       	mov	r0, r25
     1c4:	00 0c       	add	r0, r0
     1c6:	aa 0b       	sbc	r26, r26
     1c8:	bb 0b       	sbc	r27, r27
     1ca:	bc 01       	movw	r22, r24
     1cc:	cd 01       	movw	r24, r26
     1ce:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
     1d2:	dc 01       	movw	r26, r24
     1d4:	cb 01       	movw	r24, r22
     1d6:	8b 87       	std	Y+11, r24	; 0x0b
     1d8:	9c 87       	std	Y+12, r25	; 0x0c
     1da:	ad 87       	std	Y+13, r26	; 0x0d
     1dc:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1de:	8e 01       	movw	r16, r28
     1e0:	01 57       	subi	r16, 0x71	; 113
     1e2:	1f 4f       	sbci	r17, 0xFF	; 255
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	4a e7       	ldi	r20, 0x7A	; 122
     1ea:	55 e4       	ldi	r21, 0x45	; 69
     1ec:	6b 85       	ldd	r22, Y+11	; 0x0b
     1ee:	7c 85       	ldd	r23, Y+12	; 0x0c
     1f0:	8d 85       	ldd	r24, Y+13	; 0x0d
     1f2:	9e 85       	ldd	r25, Y+14	; 0x0e
     1f4:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     1f8:	dc 01       	movw	r26, r24
     1fa:	cb 01       	movw	r24, r22
     1fc:	f8 01       	movw	r30, r16
     1fe:	80 83       	st	Z, r24
     200:	91 83       	std	Z+1, r25	; 0x01
     202:	a2 83       	std	Z+2, r26	; 0x02
     204:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     206:	ce 01       	movw	r24, r28
     208:	81 57       	subi	r24, 0x71	; 113
     20a:	9f 4f       	sbci	r25, 0xFF	; 255
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	40 e8       	ldi	r20, 0x80	; 128
     212:	5f e3       	ldi	r21, 0x3F	; 63
     214:	fc 01       	movw	r30, r24
     216:	60 81       	ld	r22, Z
     218:	71 81       	ldd	r23, Z+1	; 0x01
     21a:	82 81       	ldd	r24, Z+2	; 0x02
     21c:	93 81       	ldd	r25, Z+3	; 0x03
     21e:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
     222:	88 23       	and	r24, r24
     224:	4c f4       	brge	.+18     	; 0x238 <rotateStepper_1+0xe2>
		__ticks = 1;
     226:	ce 01       	movw	r24, r28
     228:	8d 56       	subi	r24, 0x6D	; 109
     22a:	9f 4f       	sbci	r25, 0xFF	; 255
     22c:	21 e0       	ldi	r18, 0x01	; 1
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	fc 01       	movw	r30, r24
     232:	31 83       	std	Z+1, r19	; 0x01
     234:	20 83       	st	Z, r18
     236:	69 c0       	rjmp	.+210    	; 0x30a <rotateStepper_1+0x1b4>
	else if (__tmp > 65535)
     238:	ce 01       	movw	r24, r28
     23a:	81 57       	subi	r24, 0x71	; 113
     23c:	9f 4f       	sbci	r25, 0xFF	; 255
     23e:	20 e0       	ldi	r18, 0x00	; 0
     240:	3f ef       	ldi	r19, 0xFF	; 255
     242:	4f e7       	ldi	r20, 0x7F	; 127
     244:	57 e4       	ldi	r21, 0x47	; 71
     246:	fc 01       	movw	r30, r24
     248:	60 81       	ld	r22, Z
     24a:	71 81       	ldd	r23, Z+1	; 0x01
     24c:	82 81       	ldd	r24, Z+2	; 0x02
     24e:	93 81       	ldd	r25, Z+3	; 0x03
     250:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
     254:	18 16       	cp	r1, r24
     256:	0c f0       	brlt	.+2      	; 0x25a <rotateStepper_1+0x104>
     258:	46 c0       	rjmp	.+140    	; 0x2e6 <rotateStepper_1+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	40 e2       	ldi	r20, 0x20	; 32
     260:	51 e4       	ldi	r21, 0x41	; 65
     262:	6b 85       	ldd	r22, Y+11	; 0x0b
     264:	7c 85       	ldd	r23, Y+12	; 0x0c
     266:	8d 85       	ldd	r24, Y+13	; 0x0d
     268:	9e 85       	ldd	r25, Y+14	; 0x0e
     26a:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     26e:	dc 01       	movw	r26, r24
     270:	cb 01       	movw	r24, r22
     272:	8e 01       	movw	r16, r28
     274:	0d 56       	subi	r16, 0x6D	; 109
     276:	1f 4f       	sbci	r17, 0xFF	; 255
     278:	bc 01       	movw	r22, r24
     27a:	cd 01       	movw	r24, r26
     27c:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     280:	dc 01       	movw	r26, r24
     282:	cb 01       	movw	r24, r22
     284:	f8 01       	movw	r30, r16
     286:	91 83       	std	Z+1, r25	; 0x01
     288:	80 83       	st	Z, r24
     28a:	24 c0       	rjmp	.+72     	; 0x2d4 <rotateStepper_1+0x17e>
     28c:	ce 01       	movw	r24, r28
     28e:	8b 56       	subi	r24, 0x6B	; 107
     290:	9f 4f       	sbci	r25, 0xFF	; 255
     292:	20 e9       	ldi	r18, 0x90	; 144
     294:	31 e0       	ldi	r19, 0x01	; 1
     296:	fc 01       	movw	r30, r24
     298:	31 83       	std	Z+1, r19	; 0x01
     29a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29c:	ce 01       	movw	r24, r28
     29e:	8b 56       	subi	r24, 0x6B	; 107
     2a0:	9f 4f       	sbci	r25, 0xFF	; 255
     2a2:	fc 01       	movw	r30, r24
     2a4:	80 81       	ld	r24, Z
     2a6:	91 81       	ldd	r25, Z+1	; 0x01
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <rotateStepper_1+0x152>
     2ac:	9e 01       	movw	r18, r28
     2ae:	2b 56       	subi	r18, 0x6B	; 107
     2b0:	3f 4f       	sbci	r19, 0xFF	; 255
     2b2:	f9 01       	movw	r30, r18
     2b4:	91 83       	std	Z+1, r25	; 0x01
     2b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2b8:	ce 01       	movw	r24, r28
     2ba:	8d 56       	subi	r24, 0x6D	; 109
     2bc:	9f 4f       	sbci	r25, 0xFF	; 255
     2be:	9e 01       	movw	r18, r28
     2c0:	2d 56       	subi	r18, 0x6D	; 109
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	f9 01       	movw	r30, r18
     2c6:	20 81       	ld	r18, Z
     2c8:	31 81       	ldd	r19, Z+1	; 0x01
     2ca:	21 50       	subi	r18, 0x01	; 1
     2cc:	31 09       	sbc	r19, r1
     2ce:	fc 01       	movw	r30, r24
     2d0:	31 83       	std	Z+1, r19	; 0x01
     2d2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2d4:	ce 01       	movw	r24, r28
     2d6:	8d 56       	subi	r24, 0x6D	; 109
     2d8:	9f 4f       	sbci	r25, 0xFF	; 255
     2da:	fc 01       	movw	r30, r24
     2dc:	80 81       	ld	r24, Z
     2de:	91 81       	ldd	r25, Z+1	; 0x01
     2e0:	89 2b       	or	r24, r25
     2e2:	a1 f6       	brne	.-88     	; 0x28c <rotateStepper_1+0x136>
     2e4:	2c c0       	rjmp	.+88     	; 0x33e <rotateStepper_1+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2e6:	8e 01       	movw	r16, r28
     2e8:	0d 56       	subi	r16, 0x6D	; 109
     2ea:	1f 4f       	sbci	r17, 0xFF	; 255
     2ec:	ce 01       	movw	r24, r28
     2ee:	81 57       	subi	r24, 0x71	; 113
     2f0:	9f 4f       	sbci	r25, 0xFF	; 255
     2f2:	fc 01       	movw	r30, r24
     2f4:	60 81       	ld	r22, Z
     2f6:	71 81       	ldd	r23, Z+1	; 0x01
     2f8:	82 81       	ldd	r24, Z+2	; 0x02
     2fa:	93 81       	ldd	r25, Z+3	; 0x03
     2fc:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     300:	dc 01       	movw	r26, r24
     302:	cb 01       	movw	r24, r22
     304:	f8 01       	movw	r30, r16
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	80 83       	st	Z, r24
     30a:	ce 01       	movw	r24, r28
     30c:	89 56       	subi	r24, 0x69	; 105
     30e:	9f 4f       	sbci	r25, 0xFF	; 255
     310:	9e 01       	movw	r18, r28
     312:	2d 56       	subi	r18, 0x6D	; 109
     314:	3f 4f       	sbci	r19, 0xFF	; 255
     316:	f9 01       	movw	r30, r18
     318:	20 81       	ld	r18, Z
     31a:	31 81       	ldd	r19, Z+1	; 0x01
     31c:	fc 01       	movw	r30, r24
     31e:	31 83       	std	Z+1, r19	; 0x01
     320:	20 83       	st	Z, r18
     322:	ce 01       	movw	r24, r28
     324:	89 56       	subi	r24, 0x69	; 105
     326:	9f 4f       	sbci	r25, 0xFF	; 255
     328:	fc 01       	movw	r30, r24
     32a:	80 81       	ld	r24, Z
     32c:	91 81       	ldd	r25, Z+1	; 0x01
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <rotateStepper_1+0x1d8>
     332:	9e 01       	movw	r18, r28
     334:	29 56       	subi	r18, 0x69	; 105
     336:	3f 4f       	sbci	r19, 0xFF	; 255
     338:	f9 01       	movw	r30, r18
     33a:	91 83       	std	Z+1, r25	; 0x01
     33c:	80 83       	st	Z, r24
			PORTA = 0x02;
     33e:	8b e3       	ldi	r24, 0x3B	; 59
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	22 e0       	ldi	r18, 0x02	; 2
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
			_delay_ms(period);
     348:	8d 81       	ldd	r24, Y+5	; 0x05
     34a:	9e 81       	ldd	r25, Y+6	; 0x06
     34c:	09 2e       	mov	r0, r25
     34e:	00 0c       	add	r0, r0
     350:	aa 0b       	sbc	r26, r26
     352:	bb 0b       	sbc	r27, r27
     354:	bc 01       	movw	r22, r24
     356:	cd 01       	movw	r24, r26
     358:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
     35c:	dc 01       	movw	r26, r24
     35e:	cb 01       	movw	r24, r22
     360:	8f 87       	std	Y+15, r24	; 0x0f
     362:	98 8b       	std	Y+16, r25	; 0x10
     364:	a9 8b       	std	Y+17, r26	; 0x11
     366:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     368:	8e 01       	movw	r16, r28
     36a:	0b 57       	subi	r16, 0x7B	; 123
     36c:	1f 4f       	sbci	r17, 0xFF	; 255
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	4a e7       	ldi	r20, 0x7A	; 122
     374:	55 e4       	ldi	r21, 0x45	; 69
     376:	6f 85       	ldd	r22, Y+15	; 0x0f
     378:	78 89       	ldd	r23, Y+16	; 0x10
     37a:	89 89       	ldd	r24, Y+17	; 0x11
     37c:	9a 89       	ldd	r25, Y+18	; 0x12
     37e:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     382:	dc 01       	movw	r26, r24
     384:	cb 01       	movw	r24, r22
     386:	f8 01       	movw	r30, r16
     388:	80 83       	st	Z, r24
     38a:	91 83       	std	Z+1, r25	; 0x01
     38c:	a2 83       	std	Z+2, r26	; 0x02
     38e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     390:	ce 01       	movw	r24, r28
     392:	8b 57       	subi	r24, 0x7B	; 123
     394:	9f 4f       	sbci	r25, 0xFF	; 255
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 e8       	ldi	r20, 0x80	; 128
     39c:	5f e3       	ldi	r21, 0x3F	; 63
     39e:	fc 01       	movw	r30, r24
     3a0:	60 81       	ld	r22, Z
     3a2:	71 81       	ldd	r23, Z+1	; 0x01
     3a4:	82 81       	ldd	r24, Z+2	; 0x02
     3a6:	93 81       	ldd	r25, Z+3	; 0x03
     3a8:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
     3ac:	88 23       	and	r24, r24
     3ae:	4c f4       	brge	.+18     	; 0x3c2 <rotateStepper_1+0x26c>
		__ticks = 1;
     3b0:	ce 01       	movw	r24, r28
     3b2:	87 57       	subi	r24, 0x77	; 119
     3b4:	9f 4f       	sbci	r25, 0xFF	; 255
     3b6:	21 e0       	ldi	r18, 0x01	; 1
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	fc 01       	movw	r30, r24
     3bc:	31 83       	std	Z+1, r19	; 0x01
     3be:	20 83       	st	Z, r18
     3c0:	69 c0       	rjmp	.+210    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
	else if (__tmp > 65535)
     3c2:	ce 01       	movw	r24, r28
     3c4:	8b 57       	subi	r24, 0x7B	; 123
     3c6:	9f 4f       	sbci	r25, 0xFF	; 255
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	3f ef       	ldi	r19, 0xFF	; 255
     3cc:	4f e7       	ldi	r20, 0x7F	; 127
     3ce:	57 e4       	ldi	r21, 0x47	; 71
     3d0:	fc 01       	movw	r30, r24
     3d2:	60 81       	ld	r22, Z
     3d4:	71 81       	ldd	r23, Z+1	; 0x01
     3d6:	82 81       	ldd	r24, Z+2	; 0x02
     3d8:	93 81       	ldd	r25, Z+3	; 0x03
     3da:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
     3de:	18 16       	cp	r1, r24
     3e0:	0c f0       	brlt	.+2      	; 0x3e4 <rotateStepper_1+0x28e>
     3e2:	46 c0       	rjmp	.+140    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	40 e2       	ldi	r20, 0x20	; 32
     3ea:	51 e4       	ldi	r21, 0x41	; 65
     3ec:	6f 85       	ldd	r22, Y+15	; 0x0f
     3ee:	78 89       	ldd	r23, Y+16	; 0x10
     3f0:	89 89       	ldd	r24, Y+17	; 0x11
     3f2:	9a 89       	ldd	r25, Y+18	; 0x12
     3f4:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	8e 01       	movw	r16, r28
     3fe:	07 57       	subi	r16, 0x77	; 119
     400:	1f 4f       	sbci	r17, 0xFF	; 255
     402:	bc 01       	movw	r22, r24
     404:	cd 01       	movw	r24, r26
     406:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	f8 01       	movw	r30, r16
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	80 83       	st	Z, r24
     414:	24 c0       	rjmp	.+72     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     416:	ce 01       	movw	r24, r28
     418:	85 57       	subi	r24, 0x75	; 117
     41a:	9f 4f       	sbci	r25, 0xFF	; 255
     41c:	20 e9       	ldi	r18, 0x90	; 144
     41e:	31 e0       	ldi	r19, 0x01	; 1
     420:	fc 01       	movw	r30, r24
     422:	31 83       	std	Z+1, r19	; 0x01
     424:	20 83       	st	Z, r18
     426:	ce 01       	movw	r24, r28
     428:	85 57       	subi	r24, 0x75	; 117
     42a:	9f 4f       	sbci	r25, 0xFF	; 255
     42c:	fc 01       	movw	r30, r24
     42e:	80 81       	ld	r24, Z
     430:	91 81       	ldd	r25, Z+1	; 0x01
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	f1 f7       	brne	.-4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     436:	9e 01       	movw	r18, r28
     438:	25 57       	subi	r18, 0x75	; 117
     43a:	3f 4f       	sbci	r19, 0xFF	; 255
     43c:	f9 01       	movw	r30, r18
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     442:	ce 01       	movw	r24, r28
     444:	87 57       	subi	r24, 0x77	; 119
     446:	9f 4f       	sbci	r25, 0xFF	; 255
     448:	9e 01       	movw	r18, r28
     44a:	27 57       	subi	r18, 0x77	; 119
     44c:	3f 4f       	sbci	r19, 0xFF	; 255
     44e:	f9 01       	movw	r30, r18
     450:	20 81       	ld	r18, Z
     452:	31 81       	ldd	r19, Z+1	; 0x01
     454:	21 50       	subi	r18, 0x01	; 1
     456:	31 09       	sbc	r19, r1
     458:	fc 01       	movw	r30, r24
     45a:	31 83       	std	Z+1, r19	; 0x01
     45c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     45e:	ce 01       	movw	r24, r28
     460:	87 57       	subi	r24, 0x77	; 119
     462:	9f 4f       	sbci	r25, 0xFF	; 255
     464:	fc 01       	movw	r30, r24
     466:	80 81       	ld	r24, Z
     468:	91 81       	ldd	r25, Z+1	; 0x01
     46a:	89 2b       	or	r24, r25
     46c:	a1 f6       	brne	.-88     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     46e:	2c c0       	rjmp	.+88     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     470:	8e 01       	movw	r16, r28
     472:	07 57       	subi	r16, 0x77	; 119
     474:	1f 4f       	sbci	r17, 0xFF	; 255
     476:	ce 01       	movw	r24, r28
     478:	8b 57       	subi	r24, 0x7B	; 123
     47a:	9f 4f       	sbci	r25, 0xFF	; 255
     47c:	fc 01       	movw	r30, r24
     47e:	60 81       	ld	r22, Z
     480:	71 81       	ldd	r23, Z+1	; 0x01
     482:	82 81       	ldd	r24, Z+2	; 0x02
     484:	93 81       	ldd	r25, Z+3	; 0x03
     486:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     48a:	dc 01       	movw	r26, r24
     48c:	cb 01       	movw	r24, r22
     48e:	f8 01       	movw	r30, r16
     490:	91 83       	std	Z+1, r25	; 0x01
     492:	80 83       	st	Z, r24
     494:	ce 01       	movw	r24, r28
     496:	83 57       	subi	r24, 0x73	; 115
     498:	9f 4f       	sbci	r25, 0xFF	; 255
     49a:	9e 01       	movw	r18, r28
     49c:	27 57       	subi	r18, 0x77	; 119
     49e:	3f 4f       	sbci	r19, 0xFF	; 255
     4a0:	f9 01       	movw	r30, r18
     4a2:	20 81       	ld	r18, Z
     4a4:	31 81       	ldd	r19, Z+1	; 0x01
     4a6:	fc 01       	movw	r30, r24
     4a8:	31 83       	std	Z+1, r19	; 0x01
     4aa:	20 83       	st	Z, r18
     4ac:	ce 01       	movw	r24, r28
     4ae:	83 57       	subi	r24, 0x73	; 115
     4b0:	9f 4f       	sbci	r25, 0xFF	; 255
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	91 81       	ldd	r25, Z+1	; 0x01
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     4bc:	9e 01       	movw	r18, r28
     4be:	23 57       	subi	r18, 0x73	; 115
     4c0:	3f 4f       	sbci	r19, 0xFF	; 255
     4c2:	f9 01       	movw	r30, r18
     4c4:	91 83       	std	Z+1, r25	; 0x01
     4c6:	80 83       	st	Z, r24
			PORTA = 0x06;
     4c8:	8b e3       	ldi	r24, 0x3B	; 59
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	26 e0       	ldi	r18, 0x06	; 6
     4ce:	fc 01       	movw	r30, r24
     4d0:	20 83       	st	Z, r18
			_delay_ms(period);
     4d2:	8d 81       	ldd	r24, Y+5	; 0x05
     4d4:	9e 81       	ldd	r25, Y+6	; 0x06
     4d6:	09 2e       	mov	r0, r25
     4d8:	00 0c       	add	r0, r0
     4da:	aa 0b       	sbc	r26, r26
     4dc:	bb 0b       	sbc	r27, r27
     4de:	bc 01       	movw	r22, r24
     4e0:	cd 01       	movw	r24, r26
     4e2:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
     4e6:	dc 01       	movw	r26, r24
     4e8:	cb 01       	movw	r24, r22
     4ea:	8b 8b       	std	Y+19, r24	; 0x13
     4ec:	9c 8b       	std	Y+20, r25	; 0x14
     4ee:	ad 8b       	std	Y+21, r26	; 0x15
     4f0:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4f2:	8e 01       	movw	r16, r28
     4f4:	05 58       	subi	r16, 0x85	; 133
     4f6:	1f 4f       	sbci	r17, 0xFF	; 255
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	4a e7       	ldi	r20, 0x7A	; 122
     4fe:	55 e4       	ldi	r21, 0x45	; 69
     500:	6b 89       	ldd	r22, Y+19	; 0x13
     502:	7c 89       	ldd	r23, Y+20	; 0x14
     504:	8d 89       	ldd	r24, Y+21	; 0x15
     506:	9e 89       	ldd	r25, Y+22	; 0x16
     508:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     50c:	dc 01       	movw	r26, r24
     50e:	cb 01       	movw	r24, r22
     510:	f8 01       	movw	r30, r16
     512:	80 83       	st	Z, r24
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	a2 83       	std	Z+2, r26	; 0x02
     518:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     51a:	ce 01       	movw	r24, r28
     51c:	85 58       	subi	r24, 0x85	; 133
     51e:	9f 4f       	sbci	r25, 0xFF	; 255
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	40 e8       	ldi	r20, 0x80	; 128
     526:	5f e3       	ldi	r21, 0x3F	; 63
     528:	fc 01       	movw	r30, r24
     52a:	60 81       	ld	r22, Z
     52c:	71 81       	ldd	r23, Z+1	; 0x01
     52e:	82 81       	ldd	r24, Z+2	; 0x02
     530:	93 81       	ldd	r25, Z+3	; 0x03
     532:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
     536:	88 23       	and	r24, r24
     538:	4c f4       	brge	.+18     	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
		__ticks = 1;
     53a:	ce 01       	movw	r24, r28
     53c:	81 58       	subi	r24, 0x81	; 129
     53e:	9f 4f       	sbci	r25, 0xFF	; 255
     540:	21 e0       	ldi	r18, 0x01	; 1
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	fc 01       	movw	r30, r24
     546:	31 83       	std	Z+1, r19	; 0x01
     548:	20 83       	st	Z, r18
     54a:	69 c0       	rjmp	.+210    	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
	else if (__tmp > 65535)
     54c:	ce 01       	movw	r24, r28
     54e:	85 58       	subi	r24, 0x85	; 133
     550:	9f 4f       	sbci	r25, 0xFF	; 255
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	3f ef       	ldi	r19, 0xFF	; 255
     556:	4f e7       	ldi	r20, 0x7F	; 127
     558:	57 e4       	ldi	r21, 0x47	; 71
     55a:	fc 01       	movw	r30, r24
     55c:	60 81       	ld	r22, Z
     55e:	71 81       	ldd	r23, Z+1	; 0x01
     560:	82 81       	ldd	r24, Z+2	; 0x02
     562:	93 81       	ldd	r25, Z+3	; 0x03
     564:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
     568:	18 16       	cp	r1, r24
     56a:	0c f0       	brlt	.+2      	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
     56c:	46 c0       	rjmp	.+140    	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 e2       	ldi	r20, 0x20	; 32
     574:	51 e4       	ldi	r21, 0x41	; 65
     576:	6b 89       	ldd	r22, Y+19	; 0x13
     578:	7c 89       	ldd	r23, Y+20	; 0x14
     57a:	8d 89       	ldd	r24, Y+21	; 0x15
     57c:	9e 89       	ldd	r25, Y+22	; 0x16
     57e:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     582:	dc 01       	movw	r26, r24
     584:	cb 01       	movw	r24, r22
     586:	8e 01       	movw	r16, r28
     588:	01 58       	subi	r16, 0x81	; 129
     58a:	1f 4f       	sbci	r17, 0xFF	; 255
     58c:	bc 01       	movw	r22, r24
     58e:	cd 01       	movw	r24, r26
     590:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	f8 01       	movw	r30, r16
     59a:	91 83       	std	Z+1, r25	; 0x01
     59c:	80 83       	st	Z, r24
     59e:	24 c0       	rjmp	.+72     	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
     5a0:	ce 01       	movw	r24, r28
     5a2:	8f 57       	subi	r24, 0x7F	; 127
     5a4:	9f 4f       	sbci	r25, 0xFF	; 255
     5a6:	20 e9       	ldi	r18, 0x90	; 144
     5a8:	31 e0       	ldi	r19, 0x01	; 1
     5aa:	fc 01       	movw	r30, r24
     5ac:	31 83       	std	Z+1, r19	; 0x01
     5ae:	20 83       	st	Z, r18
     5b0:	ce 01       	movw	r24, r28
     5b2:	8f 57       	subi	r24, 0x7F	; 127
     5b4:	9f 4f       	sbci	r25, 0xFF	; 255
     5b6:	fc 01       	movw	r30, r24
     5b8:	80 81       	ld	r24, Z
     5ba:	91 81       	ldd	r25, Z+1	; 0x01
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
     5c0:	9e 01       	movw	r18, r28
     5c2:	2f 57       	subi	r18, 0x7F	; 127
     5c4:	3f 4f       	sbci	r19, 0xFF	; 255
     5c6:	f9 01       	movw	r30, r18
     5c8:	91 83       	std	Z+1, r25	; 0x01
     5ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5cc:	ce 01       	movw	r24, r28
     5ce:	81 58       	subi	r24, 0x81	; 129
     5d0:	9f 4f       	sbci	r25, 0xFF	; 255
     5d2:	9e 01       	movw	r18, r28
     5d4:	21 58       	subi	r18, 0x81	; 129
     5d6:	3f 4f       	sbci	r19, 0xFF	; 255
     5d8:	f9 01       	movw	r30, r18
     5da:	20 81       	ld	r18, Z
     5dc:	31 81       	ldd	r19, Z+1	; 0x01
     5de:	21 50       	subi	r18, 0x01	; 1
     5e0:	31 09       	sbc	r19, r1
     5e2:	fc 01       	movw	r30, r24
     5e4:	31 83       	std	Z+1, r19	; 0x01
     5e6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5e8:	ce 01       	movw	r24, r28
     5ea:	81 58       	subi	r24, 0x81	; 129
     5ec:	9f 4f       	sbci	r25, 0xFF	; 255
     5ee:	fc 01       	movw	r30, r24
     5f0:	80 81       	ld	r24, Z
     5f2:	91 81       	ldd	r25, Z+1	; 0x01
     5f4:	89 2b       	or	r24, r25
     5f6:	a1 f6       	brne	.-88     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
     5f8:	2c c0       	rjmp	.+88     	; 0x652 <__EEPROM_REGION_LENGTH__+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5fa:	8e 01       	movw	r16, r28
     5fc:	01 58       	subi	r16, 0x81	; 129
     5fe:	1f 4f       	sbci	r17, 0xFF	; 255
     600:	ce 01       	movw	r24, r28
     602:	85 58       	subi	r24, 0x85	; 133
     604:	9f 4f       	sbci	r25, 0xFF	; 255
     606:	fc 01       	movw	r30, r24
     608:	60 81       	ld	r22, Z
     60a:	71 81       	ldd	r23, Z+1	; 0x01
     60c:	82 81       	ldd	r24, Z+2	; 0x02
     60e:	93 81       	ldd	r25, Z+3	; 0x03
     610:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     614:	dc 01       	movw	r26, r24
     616:	cb 01       	movw	r24, r22
     618:	f8 01       	movw	r30, r16
     61a:	91 83       	std	Z+1, r25	; 0x01
     61c:	80 83       	st	Z, r24
     61e:	ce 01       	movw	r24, r28
     620:	8d 57       	subi	r24, 0x7D	; 125
     622:	9f 4f       	sbci	r25, 0xFF	; 255
     624:	9e 01       	movw	r18, r28
     626:	21 58       	subi	r18, 0x81	; 129
     628:	3f 4f       	sbci	r19, 0xFF	; 255
     62a:	f9 01       	movw	r30, r18
     62c:	20 81       	ld	r18, Z
     62e:	31 81       	ldd	r19, Z+1	; 0x01
     630:	fc 01       	movw	r30, r24
     632:	31 83       	std	Z+1, r19	; 0x01
     634:	20 83       	st	Z, r18
     636:	ce 01       	movw	r24, r28
     638:	8d 57       	subi	r24, 0x7D	; 125
     63a:	9f 4f       	sbci	r25, 0xFF	; 255
     63c:	fc 01       	movw	r30, r24
     63e:	80 81       	ld	r24, Z
     640:	91 81       	ldd	r25, Z+1	; 0x01
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	f1 f7       	brne	.-4      	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
     646:	9e 01       	movw	r18, r28
     648:	2d 57       	subi	r18, 0x7D	; 125
     64a:	3f 4f       	sbci	r19, 0xFF	; 255
     64c:	f9 01       	movw	r30, r18
     64e:	91 83       	std	Z+1, r25	; 0x01
     650:	80 83       	st	Z, r24
			PORTA = 0x04;
     652:	8b e3       	ldi	r24, 0x3B	; 59
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	24 e0       	ldi	r18, 0x04	; 4
     658:	fc 01       	movw	r30, r24
     65a:	20 83       	st	Z, r18
			_delay_ms(period);
     65c:	8d 81       	ldd	r24, Y+5	; 0x05
     65e:	9e 81       	ldd	r25, Y+6	; 0x06
     660:	09 2e       	mov	r0, r25
     662:	00 0c       	add	r0, r0
     664:	aa 0b       	sbc	r26, r26
     666:	bb 0b       	sbc	r27, r27
     668:	bc 01       	movw	r22, r24
     66a:	cd 01       	movw	r24, r26
     66c:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	8f 8b       	std	Y+23, r24	; 0x17
     676:	98 8f       	std	Y+24, r25	; 0x18
     678:	a9 8f       	std	Y+25, r26	; 0x19
     67a:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     67c:	8e 01       	movw	r16, r28
     67e:	0f 58       	subi	r16, 0x8F	; 143
     680:	1f 4f       	sbci	r17, 0xFF	; 255
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	4a e7       	ldi	r20, 0x7A	; 122
     688:	55 e4       	ldi	r21, 0x45	; 69
     68a:	6f 89       	ldd	r22, Y+23	; 0x17
     68c:	78 8d       	ldd	r23, Y+24	; 0x18
     68e:	89 8d       	ldd	r24, Y+25	; 0x19
     690:	9a 8d       	ldd	r25, Y+26	; 0x1a
     692:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     696:	dc 01       	movw	r26, r24
     698:	cb 01       	movw	r24, r22
     69a:	f8 01       	movw	r30, r16
     69c:	80 83       	st	Z, r24
     69e:	91 83       	std	Z+1, r25	; 0x01
     6a0:	a2 83       	std	Z+2, r26	; 0x02
     6a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6a4:	ce 01       	movw	r24, r28
     6a6:	8f 58       	subi	r24, 0x8F	; 143
     6a8:	9f 4f       	sbci	r25, 0xFF	; 255
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	40 e8       	ldi	r20, 0x80	; 128
     6b0:	5f e3       	ldi	r21, 0x3F	; 63
     6b2:	fc 01       	movw	r30, r24
     6b4:	60 81       	ld	r22, Z
     6b6:	71 81       	ldd	r23, Z+1	; 0x01
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
     6c0:	88 23       	and	r24, r24
     6c2:	4c f4       	brge	.+18     	; 0x6d6 <__EEPROM_REGION_LENGTH__+0x2d6>
		__ticks = 1;
     6c4:	ce 01       	movw	r24, r28
     6c6:	8b 58       	subi	r24, 0x8B	; 139
     6c8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ca:	21 e0       	ldi	r18, 0x01	; 1
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	fc 01       	movw	r30, r24
     6d0:	31 83       	std	Z+1, r19	; 0x01
     6d2:	20 83       	st	Z, r18
     6d4:	69 c0       	rjmp	.+210    	; 0x7a8 <__EEPROM_REGION_LENGTH__+0x3a8>
	else if (__tmp > 65535)
     6d6:	ce 01       	movw	r24, r28
     6d8:	8f 58       	subi	r24, 0x8F	; 143
     6da:	9f 4f       	sbci	r25, 0xFF	; 255
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	3f ef       	ldi	r19, 0xFF	; 255
     6e0:	4f e7       	ldi	r20, 0x7F	; 127
     6e2:	57 e4       	ldi	r21, 0x47	; 71
     6e4:	fc 01       	movw	r30, r24
     6e6:	60 81       	ld	r22, Z
     6e8:	71 81       	ldd	r23, Z+1	; 0x01
     6ea:	82 81       	ldd	r24, Z+2	; 0x02
     6ec:	93 81       	ldd	r25, Z+3	; 0x03
     6ee:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
     6f2:	18 16       	cp	r1, r24
     6f4:	0c f0       	brlt	.+2      	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
     6f6:	46 c0       	rjmp	.+140    	; 0x784 <__EEPROM_REGION_LENGTH__+0x384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e2       	ldi	r20, 0x20	; 32
     6fe:	51 e4       	ldi	r21, 0x41	; 65
     700:	6f 89       	ldd	r22, Y+23	; 0x17
     702:	78 8d       	ldd	r23, Y+24	; 0x18
     704:	89 8d       	ldd	r24, Y+25	; 0x19
     706:	9a 8d       	ldd	r25, Y+26	; 0x1a
     708:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	8e 01       	movw	r16, r28
     712:	0b 58       	subi	r16, 0x8B	; 139
     714:	1f 4f       	sbci	r17, 0xFF	; 255
     716:	bc 01       	movw	r22, r24
     718:	cd 01       	movw	r24, r26
     71a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     71e:	dc 01       	movw	r26, r24
     720:	cb 01       	movw	r24, r22
     722:	f8 01       	movw	r30, r16
     724:	91 83       	std	Z+1, r25	; 0x01
     726:	80 83       	st	Z, r24
     728:	24 c0       	rjmp	.+72     	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
     72a:	ce 01       	movw	r24, r28
     72c:	89 58       	subi	r24, 0x89	; 137
     72e:	9f 4f       	sbci	r25, 0xFF	; 255
     730:	20 e9       	ldi	r18, 0x90	; 144
     732:	31 e0       	ldi	r19, 0x01	; 1
     734:	fc 01       	movw	r30, r24
     736:	31 83       	std	Z+1, r19	; 0x01
     738:	20 83       	st	Z, r18
     73a:	ce 01       	movw	r24, r28
     73c:	89 58       	subi	r24, 0x89	; 137
     73e:	9f 4f       	sbci	r25, 0xFF	; 255
     740:	fc 01       	movw	r30, r24
     742:	80 81       	ld	r24, Z
     744:	91 81       	ldd	r25, Z+1	; 0x01
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	f1 f7       	brne	.-4      	; 0x746 <__EEPROM_REGION_LENGTH__+0x346>
     74a:	9e 01       	movw	r18, r28
     74c:	29 58       	subi	r18, 0x89	; 137
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
     750:	f9 01       	movw	r30, r18
     752:	91 83       	std	Z+1, r25	; 0x01
     754:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     756:	ce 01       	movw	r24, r28
     758:	8b 58       	subi	r24, 0x8B	; 139
     75a:	9f 4f       	sbci	r25, 0xFF	; 255
     75c:	9e 01       	movw	r18, r28
     75e:	2b 58       	subi	r18, 0x8B	; 139
     760:	3f 4f       	sbci	r19, 0xFF	; 255
     762:	f9 01       	movw	r30, r18
     764:	20 81       	ld	r18, Z
     766:	31 81       	ldd	r19, Z+1	; 0x01
     768:	21 50       	subi	r18, 0x01	; 1
     76a:	31 09       	sbc	r19, r1
     76c:	fc 01       	movw	r30, r24
     76e:	31 83       	std	Z+1, r19	; 0x01
     770:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     772:	ce 01       	movw	r24, r28
     774:	8b 58       	subi	r24, 0x8B	; 139
     776:	9f 4f       	sbci	r25, 0xFF	; 255
     778:	fc 01       	movw	r30, r24
     77a:	80 81       	ld	r24, Z
     77c:	91 81       	ldd	r25, Z+1	; 0x01
     77e:	89 2b       	or	r24, r25
     780:	a1 f6       	brne	.-88     	; 0x72a <__EEPROM_REGION_LENGTH__+0x32a>
     782:	2c c0       	rjmp	.+88     	; 0x7dc <__EEPROM_REGION_LENGTH__+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     784:	8e 01       	movw	r16, r28
     786:	0b 58       	subi	r16, 0x8B	; 139
     788:	1f 4f       	sbci	r17, 0xFF	; 255
     78a:	ce 01       	movw	r24, r28
     78c:	8f 58       	subi	r24, 0x8F	; 143
     78e:	9f 4f       	sbci	r25, 0xFF	; 255
     790:	fc 01       	movw	r30, r24
     792:	60 81       	ld	r22, Z
     794:	71 81       	ldd	r23, Z+1	; 0x01
     796:	82 81       	ldd	r24, Z+2	; 0x02
     798:	93 81       	ldd	r25, Z+3	; 0x03
     79a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     79e:	dc 01       	movw	r26, r24
     7a0:	cb 01       	movw	r24, r22
     7a2:	f8 01       	movw	r30, r16
     7a4:	91 83       	std	Z+1, r25	; 0x01
     7a6:	80 83       	st	Z, r24
     7a8:	ce 01       	movw	r24, r28
     7aa:	87 58       	subi	r24, 0x87	; 135
     7ac:	9f 4f       	sbci	r25, 0xFF	; 255
     7ae:	9e 01       	movw	r18, r28
     7b0:	2b 58       	subi	r18, 0x8B	; 139
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	f9 01       	movw	r30, r18
     7b6:	20 81       	ld	r18, Z
     7b8:	31 81       	ldd	r19, Z+1	; 0x01
     7ba:	fc 01       	movw	r30, r24
     7bc:	31 83       	std	Z+1, r19	; 0x01
     7be:	20 83       	st	Z, r18
     7c0:	ce 01       	movw	r24, r28
     7c2:	87 58       	subi	r24, 0x87	; 135
     7c4:	9f 4f       	sbci	r25, 0xFF	; 255
     7c6:	fc 01       	movw	r30, r24
     7c8:	80 81       	ld	r24, Z
     7ca:	91 81       	ldd	r25, Z+1	; 0x01
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <__EEPROM_REGION_LENGTH__+0x3cc>
     7d0:	9e 01       	movw	r18, r28
     7d2:	27 58       	subi	r18, 0x87	; 135
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
     7d6:	f9 01       	movw	r30, r18
     7d8:	91 83       	std	Z+1, r25	; 0x01
     7da:	80 83       	st	Z, r24
			PORTA = 0x0c;
     7dc:	8b e3       	ldi	r24, 0x3B	; 59
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	2c e0       	ldi	r18, 0x0C	; 12
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
			_delay_ms(period);
     7e6:	8d 81       	ldd	r24, Y+5	; 0x05
     7e8:	9e 81       	ldd	r25, Y+6	; 0x06
     7ea:	09 2e       	mov	r0, r25
     7ec:	00 0c       	add	r0, r0
     7ee:	aa 0b       	sbc	r26, r26
     7f0:	bb 0b       	sbc	r27, r27
     7f2:	bc 01       	movw	r22, r24
     7f4:	cd 01       	movw	r24, r26
     7f6:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
     7fa:	dc 01       	movw	r26, r24
     7fc:	cb 01       	movw	r24, r22
     7fe:	8b 8f       	std	Y+27, r24	; 0x1b
     800:	9c 8f       	std	Y+28, r25	; 0x1c
     802:	ad 8f       	std	Y+29, r26	; 0x1d
     804:	be 8f       	std	Y+30, r27	; 0x1e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     806:	8e 01       	movw	r16, r28
     808:	09 59       	subi	r16, 0x99	; 153
     80a:	1f 4f       	sbci	r17, 0xFF	; 255
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	4a e7       	ldi	r20, 0x7A	; 122
     812:	55 e4       	ldi	r21, 0x45	; 69
     814:	6b 8d       	ldd	r22, Y+27	; 0x1b
     816:	7c 8d       	ldd	r23, Y+28	; 0x1c
     818:	8d 8d       	ldd	r24, Y+29	; 0x1d
     81a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     81c:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     820:	dc 01       	movw	r26, r24
     822:	cb 01       	movw	r24, r22
     824:	f8 01       	movw	r30, r16
     826:	80 83       	st	Z, r24
     828:	91 83       	std	Z+1, r25	; 0x01
     82a:	a2 83       	std	Z+2, r26	; 0x02
     82c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     82e:	ce 01       	movw	r24, r28
     830:	89 59       	subi	r24, 0x99	; 153
     832:	9f 4f       	sbci	r25, 0xFF	; 255
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e8       	ldi	r20, 0x80	; 128
     83a:	5f e3       	ldi	r21, 0x3F	; 63
     83c:	fc 01       	movw	r30, r24
     83e:	60 81       	ld	r22, Z
     840:	71 81       	ldd	r23, Z+1	; 0x01
     842:	82 81       	ldd	r24, Z+2	; 0x02
     844:	93 81       	ldd	r25, Z+3	; 0x03
     846:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
     84a:	88 23       	and	r24, r24
     84c:	4c f4       	brge	.+18     	; 0x860 <__stack+0x1>
		__ticks = 1;
     84e:	ce 01       	movw	r24, r28
     850:	85 59       	subi	r24, 0x95	; 149
     852:	9f 4f       	sbci	r25, 0xFF	; 255
     854:	21 e0       	ldi	r18, 0x01	; 1
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	fc 01       	movw	r30, r24
     85a:	31 83       	std	Z+1, r19	; 0x01
     85c:	20 83       	st	Z, r18
     85e:	69 c0       	rjmp	.+210    	; 0x932 <__stack+0xd3>
	else if (__tmp > 65535)
     860:	ce 01       	movw	r24, r28
     862:	89 59       	subi	r24, 0x99	; 153
     864:	9f 4f       	sbci	r25, 0xFF	; 255
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	3f ef       	ldi	r19, 0xFF	; 255
     86a:	4f e7       	ldi	r20, 0x7F	; 127
     86c:	57 e4       	ldi	r21, 0x47	; 71
     86e:	fc 01       	movw	r30, r24
     870:	60 81       	ld	r22, Z
     872:	71 81       	ldd	r23, Z+1	; 0x01
     874:	82 81       	ldd	r24, Z+2	; 0x02
     876:	93 81       	ldd	r25, Z+3	; 0x03
     878:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
     87c:	18 16       	cp	r1, r24
     87e:	0c f0       	brlt	.+2      	; 0x882 <__stack+0x23>
     880:	46 c0       	rjmp	.+140    	; 0x90e <__stack+0xaf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	40 e2       	ldi	r20, 0x20	; 32
     888:	51 e4       	ldi	r21, 0x41	; 65
     88a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     88c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     88e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     890:	9e 8d       	ldd	r25, Y+30	; 0x1e
     892:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     896:	dc 01       	movw	r26, r24
     898:	cb 01       	movw	r24, r22
     89a:	8e 01       	movw	r16, r28
     89c:	05 59       	subi	r16, 0x95	; 149
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	bc 01       	movw	r22, r24
     8a2:	cd 01       	movw	r24, r26
     8a4:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	f8 01       	movw	r30, r16
     8ae:	91 83       	std	Z+1, r25	; 0x01
     8b0:	80 83       	st	Z, r24
     8b2:	24 c0       	rjmp	.+72     	; 0x8fc <__stack+0x9d>
     8b4:	ce 01       	movw	r24, r28
     8b6:	83 59       	subi	r24, 0x93	; 147
     8b8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ba:	20 e9       	ldi	r18, 0x90	; 144
     8bc:	31 e0       	ldi	r19, 0x01	; 1
     8be:	fc 01       	movw	r30, r24
     8c0:	31 83       	std	Z+1, r19	; 0x01
     8c2:	20 83       	st	Z, r18
     8c4:	ce 01       	movw	r24, r28
     8c6:	83 59       	subi	r24, 0x93	; 147
     8c8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ca:	fc 01       	movw	r30, r24
     8cc:	80 81       	ld	r24, Z
     8ce:	91 81       	ldd	r25, Z+1	; 0x01
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <__stack+0x71>
     8d4:	9e 01       	movw	r18, r28
     8d6:	23 59       	subi	r18, 0x93	; 147
     8d8:	3f 4f       	sbci	r19, 0xFF	; 255
     8da:	f9 01       	movw	r30, r18
     8dc:	91 83       	std	Z+1, r25	; 0x01
     8de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e0:	ce 01       	movw	r24, r28
     8e2:	85 59       	subi	r24, 0x95	; 149
     8e4:	9f 4f       	sbci	r25, 0xFF	; 255
     8e6:	9e 01       	movw	r18, r28
     8e8:	25 59       	subi	r18, 0x95	; 149
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	f9 01       	movw	r30, r18
     8ee:	20 81       	ld	r18, Z
     8f0:	31 81       	ldd	r19, Z+1	; 0x01
     8f2:	21 50       	subi	r18, 0x01	; 1
     8f4:	31 09       	sbc	r19, r1
     8f6:	fc 01       	movw	r30, r24
     8f8:	31 83       	std	Z+1, r19	; 0x01
     8fa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8fc:	ce 01       	movw	r24, r28
     8fe:	85 59       	subi	r24, 0x95	; 149
     900:	9f 4f       	sbci	r25, 0xFF	; 255
     902:	fc 01       	movw	r30, r24
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	89 2b       	or	r24, r25
     90a:	a1 f6       	brne	.-88     	; 0x8b4 <__stack+0x55>
     90c:	2c c0       	rjmp	.+88     	; 0x966 <__stack+0x107>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     90e:	8e 01       	movw	r16, r28
     910:	05 59       	subi	r16, 0x95	; 149
     912:	1f 4f       	sbci	r17, 0xFF	; 255
     914:	ce 01       	movw	r24, r28
     916:	89 59       	subi	r24, 0x99	; 153
     918:	9f 4f       	sbci	r25, 0xFF	; 255
     91a:	fc 01       	movw	r30, r24
     91c:	60 81       	ld	r22, Z
     91e:	71 81       	ldd	r23, Z+1	; 0x01
     920:	82 81       	ldd	r24, Z+2	; 0x02
     922:	93 81       	ldd	r25, Z+3	; 0x03
     924:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     928:	dc 01       	movw	r26, r24
     92a:	cb 01       	movw	r24, r22
     92c:	f8 01       	movw	r30, r16
     92e:	91 83       	std	Z+1, r25	; 0x01
     930:	80 83       	st	Z, r24
     932:	ce 01       	movw	r24, r28
     934:	81 59       	subi	r24, 0x91	; 145
     936:	9f 4f       	sbci	r25, 0xFF	; 255
     938:	9e 01       	movw	r18, r28
     93a:	25 59       	subi	r18, 0x95	; 149
     93c:	3f 4f       	sbci	r19, 0xFF	; 255
     93e:	f9 01       	movw	r30, r18
     940:	20 81       	ld	r18, Z
     942:	31 81       	ldd	r19, Z+1	; 0x01
     944:	fc 01       	movw	r30, r24
     946:	31 83       	std	Z+1, r19	; 0x01
     948:	20 83       	st	Z, r18
     94a:	ce 01       	movw	r24, r28
     94c:	81 59       	subi	r24, 0x91	; 145
     94e:	9f 4f       	sbci	r25, 0xFF	; 255
     950:	fc 01       	movw	r30, r24
     952:	80 81       	ld	r24, Z
     954:	91 81       	ldd	r25, Z+1	; 0x01
     956:	01 97       	sbiw	r24, 0x01	; 1
     958:	f1 f7       	brne	.-4      	; 0x956 <__stack+0xf7>
     95a:	9e 01       	movw	r18, r28
     95c:	21 59       	subi	r18, 0x91	; 145
     95e:	3f 4f       	sbci	r19, 0xFF	; 255
     960:	f9 01       	movw	r30, r18
     962:	91 83       	std	Z+1, r25	; 0x01
     964:	80 83       	st	Z, r24
			PORTA = 0x08;
     966:	8b e3       	ldi	r24, 0x3B	; 59
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	28 e0       	ldi	r18, 0x08	; 8
     96c:	fc 01       	movw	r30, r24
     96e:	20 83       	st	Z, r18
			_delay_ms(period);
     970:	8d 81       	ldd	r24, Y+5	; 0x05
     972:	9e 81       	ldd	r25, Y+6	; 0x06
     974:	09 2e       	mov	r0, r25
     976:	00 0c       	add	r0, r0
     978:	aa 0b       	sbc	r26, r26
     97a:	bb 0b       	sbc	r27, r27
     97c:	bc 01       	movw	r22, r24
     97e:	cd 01       	movw	r24, r26
     980:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
     984:	dc 01       	movw	r26, r24
     986:	cb 01       	movw	r24, r22
     988:	8f 8f       	std	Y+31, r24	; 0x1f
     98a:	98 a3       	std	Y+32, r25	; 0x20
     98c:	a9 a3       	std	Y+33, r26	; 0x21
     98e:	ba a3       	std	Y+34, r27	; 0x22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     990:	8e 01       	movw	r16, r28
     992:	03 5a       	subi	r16, 0xA3	; 163
     994:	1f 4f       	sbci	r17, 0xFF	; 255
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	4a e7       	ldi	r20, 0x7A	; 122
     99c:	55 e4       	ldi	r21, 0x45	; 69
     99e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     9a0:	78 a1       	ldd	r23, Y+32	; 0x20
     9a2:	89 a1       	ldd	r24, Y+33	; 0x21
     9a4:	9a a1       	ldd	r25, Y+34	; 0x22
     9a6:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	f8 01       	movw	r30, r16
     9b0:	80 83       	st	Z, r24
     9b2:	91 83       	std	Z+1, r25	; 0x01
     9b4:	a2 83       	std	Z+2, r26	; 0x02
     9b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9b8:	ce 01       	movw	r24, r28
     9ba:	83 5a       	subi	r24, 0xA3	; 163
     9bc:	9f 4f       	sbci	r25, 0xFF	; 255
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e8       	ldi	r20, 0x80	; 128
     9c4:	5f e3       	ldi	r21, 0x3F	; 63
     9c6:	fc 01       	movw	r30, r24
     9c8:	60 81       	ld	r22, Z
     9ca:	71 81       	ldd	r23, Z+1	; 0x01
     9cc:	82 81       	ldd	r24, Z+2	; 0x02
     9ce:	93 81       	ldd	r25, Z+3	; 0x03
     9d0:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
     9d4:	88 23       	and	r24, r24
     9d6:	4c f4       	brge	.+18     	; 0x9ea <__stack+0x18b>
		__ticks = 1;
     9d8:	ce 01       	movw	r24, r28
     9da:	8f 59       	subi	r24, 0x9F	; 159
     9dc:	9f 4f       	sbci	r25, 0xFF	; 255
     9de:	21 e0       	ldi	r18, 0x01	; 1
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	fc 01       	movw	r30, r24
     9e4:	31 83       	std	Z+1, r19	; 0x01
     9e6:	20 83       	st	Z, r18
     9e8:	69 c0       	rjmp	.+210    	; 0xabc <__stack+0x25d>
	else if (__tmp > 65535)
     9ea:	ce 01       	movw	r24, r28
     9ec:	83 5a       	subi	r24, 0xA3	; 163
     9ee:	9f 4f       	sbci	r25, 0xFF	; 255
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f e7       	ldi	r20, 0x7F	; 127
     9f6:	57 e4       	ldi	r21, 0x47	; 71
     9f8:	fc 01       	movw	r30, r24
     9fa:	60 81       	ld	r22, Z
     9fc:	71 81       	ldd	r23, Z+1	; 0x01
     9fe:	82 81       	ldd	r24, Z+2	; 0x02
     a00:	93 81       	ldd	r25, Z+3	; 0x03
     a02:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
     a06:	18 16       	cp	r1, r24
     a08:	0c f0       	brlt	.+2      	; 0xa0c <__stack+0x1ad>
     a0a:	46 c0       	rjmp	.+140    	; 0xa98 <__stack+0x239>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e2       	ldi	r20, 0x20	; 32
     a12:	51 e4       	ldi	r21, 0x41	; 65
     a14:	6f 8d       	ldd	r22, Y+31	; 0x1f
     a16:	78 a1       	ldd	r23, Y+32	; 0x20
     a18:	89 a1       	ldd	r24, Y+33	; 0x21
     a1a:	9a a1       	ldd	r25, Y+34	; 0x22
     a1c:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	8e 01       	movw	r16, r28
     a26:	0f 59       	subi	r16, 0x9F	; 159
     a28:	1f 4f       	sbci	r17, 0xFF	; 255
     a2a:	bc 01       	movw	r22, r24
     a2c:	cd 01       	movw	r24, r26
     a2e:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     a32:	dc 01       	movw	r26, r24
     a34:	cb 01       	movw	r24, r22
     a36:	f8 01       	movw	r30, r16
     a38:	91 83       	std	Z+1, r25	; 0x01
     a3a:	80 83       	st	Z, r24
     a3c:	24 c0       	rjmp	.+72     	; 0xa86 <__stack+0x227>
     a3e:	ce 01       	movw	r24, r28
     a40:	8d 59       	subi	r24, 0x9D	; 157
     a42:	9f 4f       	sbci	r25, 0xFF	; 255
     a44:	20 e9       	ldi	r18, 0x90	; 144
     a46:	31 e0       	ldi	r19, 0x01	; 1
     a48:	fc 01       	movw	r30, r24
     a4a:	31 83       	std	Z+1, r19	; 0x01
     a4c:	20 83       	st	Z, r18
     a4e:	ce 01       	movw	r24, r28
     a50:	8d 59       	subi	r24, 0x9D	; 157
     a52:	9f 4f       	sbci	r25, 0xFF	; 255
     a54:	fc 01       	movw	r30, r24
     a56:	80 81       	ld	r24, Z
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	f1 f7       	brne	.-4      	; 0xa5a <__stack+0x1fb>
     a5e:	9e 01       	movw	r18, r28
     a60:	2d 59       	subi	r18, 0x9D	; 157
     a62:	3f 4f       	sbci	r19, 0xFF	; 255
     a64:	f9 01       	movw	r30, r18
     a66:	91 83       	std	Z+1, r25	; 0x01
     a68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a6a:	ce 01       	movw	r24, r28
     a6c:	8f 59       	subi	r24, 0x9F	; 159
     a6e:	9f 4f       	sbci	r25, 0xFF	; 255
     a70:	9e 01       	movw	r18, r28
     a72:	2f 59       	subi	r18, 0x9F	; 159
     a74:	3f 4f       	sbci	r19, 0xFF	; 255
     a76:	f9 01       	movw	r30, r18
     a78:	20 81       	ld	r18, Z
     a7a:	31 81       	ldd	r19, Z+1	; 0x01
     a7c:	21 50       	subi	r18, 0x01	; 1
     a7e:	31 09       	sbc	r19, r1
     a80:	fc 01       	movw	r30, r24
     a82:	31 83       	std	Z+1, r19	; 0x01
     a84:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a86:	ce 01       	movw	r24, r28
     a88:	8f 59       	subi	r24, 0x9F	; 159
     a8a:	9f 4f       	sbci	r25, 0xFF	; 255
     a8c:	fc 01       	movw	r30, r24
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	89 2b       	or	r24, r25
     a94:	a1 f6       	brne	.-88     	; 0xa3e <__stack+0x1df>
     a96:	2c c0       	rjmp	.+88     	; 0xaf0 <__stack+0x291>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a98:	8e 01       	movw	r16, r28
     a9a:	0f 59       	subi	r16, 0x9F	; 159
     a9c:	1f 4f       	sbci	r17, 0xFF	; 255
     a9e:	ce 01       	movw	r24, r28
     aa0:	83 5a       	subi	r24, 0xA3	; 163
     aa2:	9f 4f       	sbci	r25, 0xFF	; 255
     aa4:	fc 01       	movw	r30, r24
     aa6:	60 81       	ld	r22, Z
     aa8:	71 81       	ldd	r23, Z+1	; 0x01
     aaa:	82 81       	ldd	r24, Z+2	; 0x02
     aac:	93 81       	ldd	r25, Z+3	; 0x03
     aae:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     ab2:	dc 01       	movw	r26, r24
     ab4:	cb 01       	movw	r24, r22
     ab6:	f8 01       	movw	r30, r16
     ab8:	91 83       	std	Z+1, r25	; 0x01
     aba:	80 83       	st	Z, r24
     abc:	ce 01       	movw	r24, r28
     abe:	8b 59       	subi	r24, 0x9B	; 155
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	9e 01       	movw	r18, r28
     ac4:	2f 59       	subi	r18, 0x9F	; 159
     ac6:	3f 4f       	sbci	r19, 0xFF	; 255
     ac8:	f9 01       	movw	r30, r18
     aca:	20 81       	ld	r18, Z
     acc:	31 81       	ldd	r19, Z+1	; 0x01
     ace:	fc 01       	movw	r30, r24
     ad0:	31 83       	std	Z+1, r19	; 0x01
     ad2:	20 83       	st	Z, r18
     ad4:	ce 01       	movw	r24, r28
     ad6:	8b 59       	subi	r24, 0x9B	; 155
     ad8:	9f 4f       	sbci	r25, 0xFF	; 255
     ada:	fc 01       	movw	r30, r24
     adc:	80 81       	ld	r24, Z
     ade:	91 81       	ldd	r25, Z+1	; 0x01
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	f1 f7       	brne	.-4      	; 0xae0 <__stack+0x281>
     ae4:	9e 01       	movw	r18, r28
     ae6:	2b 59       	subi	r18, 0x9B	; 155
     ae8:	3f 4f       	sbci	r19, 0xFF	; 255
     aea:	f9 01       	movw	r30, r18
     aec:	91 83       	std	Z+1, r25	; 0x01
     aee:	80 83       	st	Z, r24
			PORTA = 0x09;
     af0:	8b e3       	ldi	r24, 0x3B	; 59
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	29 e0       	ldi	r18, 0x09	; 9
     af6:	fc 01       	movw	r30, r24
     af8:	20 83       	st	Z, r18
			_delay_ms(period);
     afa:	8d 81       	ldd	r24, Y+5	; 0x05
     afc:	9e 81       	ldd	r25, Y+6	; 0x06
     afe:	09 2e       	mov	r0, r25
     b00:	00 0c       	add	r0, r0
     b02:	aa 0b       	sbc	r26, r26
     b04:	bb 0b       	sbc	r27, r27
     b06:	bc 01       	movw	r22, r24
     b08:	cd 01       	movw	r24, r26
     b0a:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
     b0e:	dc 01       	movw	r26, r24
     b10:	cb 01       	movw	r24, r22
     b12:	8b a3       	std	Y+35, r24	; 0x23
     b14:	9c a3       	std	Y+36, r25	; 0x24
     b16:	ad a3       	std	Y+37, r26	; 0x25
     b18:	be a3       	std	Y+38, r27	; 0x26

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b1a:	8e 01       	movw	r16, r28
     b1c:	0d 5a       	subi	r16, 0xAD	; 173
     b1e:	1f 4f       	sbci	r17, 0xFF	; 255
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	4a e7       	ldi	r20, 0x7A	; 122
     b26:	55 e4       	ldi	r21, 0x45	; 69
     b28:	6b a1       	ldd	r22, Y+35	; 0x23
     b2a:	7c a1       	ldd	r23, Y+36	; 0x24
     b2c:	8d a1       	ldd	r24, Y+37	; 0x25
     b2e:	9e a1       	ldd	r25, Y+38	; 0x26
     b30:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	f8 01       	movw	r30, r16
     b3a:	80 83       	st	Z, r24
     b3c:	91 83       	std	Z+1, r25	; 0x01
     b3e:	a2 83       	std	Z+2, r26	; 0x02
     b40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b42:	ce 01       	movw	r24, r28
     b44:	8d 5a       	subi	r24, 0xAD	; 173
     b46:	9f 4f       	sbci	r25, 0xFF	; 255
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	40 e8       	ldi	r20, 0x80	; 128
     b4e:	5f e3       	ldi	r21, 0x3F	; 63
     b50:	fc 01       	movw	r30, r24
     b52:	60 81       	ld	r22, Z
     b54:	71 81       	ldd	r23, Z+1	; 0x01
     b56:	82 81       	ldd	r24, Z+2	; 0x02
     b58:	93 81       	ldd	r25, Z+3	; 0x03
     b5a:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
     b5e:	88 23       	and	r24, r24
     b60:	4c f4       	brge	.+18     	; 0xb74 <__stack+0x315>
		__ticks = 1;
     b62:	ce 01       	movw	r24, r28
     b64:	89 5a       	subi	r24, 0xA9	; 169
     b66:	9f 4f       	sbci	r25, 0xFF	; 255
     b68:	21 e0       	ldi	r18, 0x01	; 1
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	fc 01       	movw	r30, r24
     b6e:	31 83       	std	Z+1, r19	; 0x01
     b70:	20 83       	st	Z, r18
     b72:	69 c0       	rjmp	.+210    	; 0xc46 <__stack+0x3e7>
	else if (__tmp > 65535)
     b74:	ce 01       	movw	r24, r28
     b76:	8d 5a       	subi	r24, 0xAD	; 173
     b78:	9f 4f       	sbci	r25, 0xFF	; 255
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	3f ef       	ldi	r19, 0xFF	; 255
     b7e:	4f e7       	ldi	r20, 0x7F	; 127
     b80:	57 e4       	ldi	r21, 0x47	; 71
     b82:	fc 01       	movw	r30, r24
     b84:	60 81       	ld	r22, Z
     b86:	71 81       	ldd	r23, Z+1	; 0x01
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	93 81       	ldd	r25, Z+3	; 0x03
     b8c:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
     b90:	18 16       	cp	r1, r24
     b92:	0c f0       	brlt	.+2      	; 0xb96 <__stack+0x337>
     b94:	46 c0       	rjmp	.+140    	; 0xc22 <__stack+0x3c3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	40 e2       	ldi	r20, 0x20	; 32
     b9c:	51 e4       	ldi	r21, 0x41	; 65
     b9e:	6b a1       	ldd	r22, Y+35	; 0x23
     ba0:	7c a1       	ldd	r23, Y+36	; 0x24
     ba2:	8d a1       	ldd	r24, Y+37	; 0x25
     ba4:	9e a1       	ldd	r25, Y+38	; 0x26
     ba6:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	8e 01       	movw	r16, r28
     bb0:	09 5a       	subi	r16, 0xA9	; 169
     bb2:	1f 4f       	sbci	r17, 0xFF	; 255
     bb4:	bc 01       	movw	r22, r24
     bb6:	cd 01       	movw	r24, r26
     bb8:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     bbc:	dc 01       	movw	r26, r24
     bbe:	cb 01       	movw	r24, r22
     bc0:	f8 01       	movw	r30, r16
     bc2:	91 83       	std	Z+1, r25	; 0x01
     bc4:	80 83       	st	Z, r24
     bc6:	24 c0       	rjmp	.+72     	; 0xc10 <__stack+0x3b1>
     bc8:	ce 01       	movw	r24, r28
     bca:	87 5a       	subi	r24, 0xA7	; 167
     bcc:	9f 4f       	sbci	r25, 0xFF	; 255
     bce:	20 e9       	ldi	r18, 0x90	; 144
     bd0:	31 e0       	ldi	r19, 0x01	; 1
     bd2:	fc 01       	movw	r30, r24
     bd4:	31 83       	std	Z+1, r19	; 0x01
     bd6:	20 83       	st	Z, r18
     bd8:	ce 01       	movw	r24, r28
     bda:	87 5a       	subi	r24, 0xA7	; 167
     bdc:	9f 4f       	sbci	r25, 0xFF	; 255
     bde:	fc 01       	movw	r30, r24
     be0:	80 81       	ld	r24, Z
     be2:	91 81       	ldd	r25, Z+1	; 0x01
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <__stack+0x385>
     be8:	9e 01       	movw	r18, r28
     bea:	27 5a       	subi	r18, 0xA7	; 167
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	f9 01       	movw	r30, r18
     bf0:	91 83       	std	Z+1, r25	; 0x01
     bf2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bf4:	ce 01       	movw	r24, r28
     bf6:	89 5a       	subi	r24, 0xA9	; 169
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	9e 01       	movw	r18, r28
     bfc:	29 5a       	subi	r18, 0xA9	; 169
     bfe:	3f 4f       	sbci	r19, 0xFF	; 255
     c00:	f9 01       	movw	r30, r18
     c02:	20 81       	ld	r18, Z
     c04:	31 81       	ldd	r19, Z+1	; 0x01
     c06:	21 50       	subi	r18, 0x01	; 1
     c08:	31 09       	sbc	r19, r1
     c0a:	fc 01       	movw	r30, r24
     c0c:	31 83       	std	Z+1, r19	; 0x01
     c0e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c10:	ce 01       	movw	r24, r28
     c12:	89 5a       	subi	r24, 0xA9	; 169
     c14:	9f 4f       	sbci	r25, 0xFF	; 255
     c16:	fc 01       	movw	r30, r24
     c18:	80 81       	ld	r24, Z
     c1a:	91 81       	ldd	r25, Z+1	; 0x01
     c1c:	89 2b       	or	r24, r25
     c1e:	a1 f6       	brne	.-88     	; 0xbc8 <__stack+0x369>
     c20:	2c c0       	rjmp	.+88     	; 0xc7a <__stack+0x41b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c22:	8e 01       	movw	r16, r28
     c24:	09 5a       	subi	r16, 0xA9	; 169
     c26:	1f 4f       	sbci	r17, 0xFF	; 255
     c28:	ce 01       	movw	r24, r28
     c2a:	8d 5a       	subi	r24, 0xAD	; 173
     c2c:	9f 4f       	sbci	r25, 0xFF	; 255
     c2e:	fc 01       	movw	r30, r24
     c30:	60 81       	ld	r22, Z
     c32:	71 81       	ldd	r23, Z+1	; 0x01
     c34:	82 81       	ldd	r24, Z+2	; 0x02
     c36:	93 81       	ldd	r25, Z+3	; 0x03
     c38:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	f8 01       	movw	r30, r16
     c42:	91 83       	std	Z+1, r25	; 0x01
     c44:	80 83       	st	Z, r24
     c46:	ce 01       	movw	r24, r28
     c48:	85 5a       	subi	r24, 0xA5	; 165
     c4a:	9f 4f       	sbci	r25, 0xFF	; 255
     c4c:	9e 01       	movw	r18, r28
     c4e:	29 5a       	subi	r18, 0xA9	; 169
     c50:	3f 4f       	sbci	r19, 0xFF	; 255
     c52:	f9 01       	movw	r30, r18
     c54:	20 81       	ld	r18, Z
     c56:	31 81       	ldd	r19, Z+1	; 0x01
     c58:	fc 01       	movw	r30, r24
     c5a:	31 83       	std	Z+1, r19	; 0x01
     c5c:	20 83       	st	Z, r18
     c5e:	ce 01       	movw	r24, r28
     c60:	85 5a       	subi	r24, 0xA5	; 165
     c62:	9f 4f       	sbci	r25, 0xFF	; 255
     c64:	fc 01       	movw	r30, r24
     c66:	80 81       	ld	r24, Z
     c68:	91 81       	ldd	r25, Z+1	; 0x01
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <__stack+0x40b>
     c6e:	9e 01       	movw	r18, r28
     c70:	25 5a       	subi	r18, 0xA5	; 165
     c72:	3f 4f       	sbci	r19, 0xFF	; 255
     c74:	f9 01       	movw	r30, r18
     c76:	91 83       	std	Z+1, r25	; 0x01
     c78:	80 83       	st	Z, r24
			PORTA = 0x01;
     c7a:	8b e3       	ldi	r24, 0x3B	; 59
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	21 e0       	ldi	r18, 0x01	; 1
     c80:	fc 01       	movw	r30, r24
     c82:	20 83       	st	Z, r18
			_delay_ms(period);
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	9e 81       	ldd	r25, Y+6	; 0x06
     c88:	09 2e       	mov	r0, r25
     c8a:	00 0c       	add	r0, r0
     c8c:	aa 0b       	sbc	r26, r26
     c8e:	bb 0b       	sbc	r27, r27
     c90:	bc 01       	movw	r22, r24
     c92:	cd 01       	movw	r24, r26
     c94:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
     c98:	dc 01       	movw	r26, r24
     c9a:	cb 01       	movw	r24, r22
     c9c:	8f a3       	std	Y+39, r24	; 0x27
     c9e:	98 a7       	std	Y+40, r25	; 0x28
     ca0:	a9 a7       	std	Y+41, r26	; 0x29
     ca2:	ba a7       	std	Y+42, r27	; 0x2a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ca4:	8e 01       	movw	r16, r28
     ca6:	07 5b       	subi	r16, 0xB7	; 183
     ca8:	1f 4f       	sbci	r17, 0xFF	; 255
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	4a e7       	ldi	r20, 0x7A	; 122
     cb0:	55 e4       	ldi	r21, 0x45	; 69
     cb2:	6f a1       	ldd	r22, Y+39	; 0x27
     cb4:	78 a5       	ldd	r23, Y+40	; 0x28
     cb6:	89 a5       	ldd	r24, Y+41	; 0x29
     cb8:	9a a5       	ldd	r25, Y+42	; 0x2a
     cba:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	f8 01       	movw	r30, r16
     cc4:	80 83       	st	Z, r24
     cc6:	91 83       	std	Z+1, r25	; 0x01
     cc8:	a2 83       	std	Z+2, r26	; 0x02
     cca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ccc:	ce 01       	movw	r24, r28
     cce:	87 5b       	subi	r24, 0xB7	; 183
     cd0:	9f 4f       	sbci	r25, 0xFF	; 255
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	40 e8       	ldi	r20, 0x80	; 128
     cd8:	5f e3       	ldi	r21, 0x3F	; 63
     cda:	fc 01       	movw	r30, r24
     cdc:	60 81       	ld	r22, Z
     cde:	71 81       	ldd	r23, Z+1	; 0x01
     ce0:	82 81       	ldd	r24, Z+2	; 0x02
     ce2:	93 81       	ldd	r25, Z+3	; 0x03
     ce4:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
     ce8:	88 23       	and	r24, r24
     cea:	4c f4       	brge	.+18     	; 0xcfe <__stack+0x49f>
		__ticks = 1;
     cec:	ce 01       	movw	r24, r28
     cee:	83 5b       	subi	r24, 0xB3	; 179
     cf0:	9f 4f       	sbci	r25, 0xFF	; 255
     cf2:	21 e0       	ldi	r18, 0x01	; 1
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	fc 01       	movw	r30, r24
     cf8:	31 83       	std	Z+1, r19	; 0x01
     cfa:	20 83       	st	Z, r18
     cfc:	69 c0       	rjmp	.+210    	; 0xdd0 <__stack+0x571>
	else if (__tmp > 65535)
     cfe:	ce 01       	movw	r24, r28
     d00:	87 5b       	subi	r24, 0xB7	; 183
     d02:	9f 4f       	sbci	r25, 0xFF	; 255
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	3f ef       	ldi	r19, 0xFF	; 255
     d08:	4f e7       	ldi	r20, 0x7F	; 127
     d0a:	57 e4       	ldi	r21, 0x47	; 71
     d0c:	fc 01       	movw	r30, r24
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	93 81       	ldd	r25, Z+3	; 0x03
     d16:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
     d1a:	18 16       	cp	r1, r24
     d1c:	0c f0       	brlt	.+2      	; 0xd20 <__stack+0x4c1>
     d1e:	46 c0       	rjmp	.+140    	; 0xdac <__stack+0x54d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	6f a1       	ldd	r22, Y+39	; 0x27
     d2a:	78 a5       	ldd	r23, Y+40	; 0x28
     d2c:	89 a5       	ldd	r24, Y+41	; 0x29
     d2e:	9a a5       	ldd	r25, Y+42	; 0x2a
     d30:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	8e 01       	movw	r16, r28
     d3a:	03 5b       	subi	r16, 0xB3	; 179
     d3c:	1f 4f       	sbci	r17, 0xFF	; 255
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	f8 01       	movw	r30, r16
     d4c:	91 83       	std	Z+1, r25	; 0x01
     d4e:	80 83       	st	Z, r24
     d50:	24 c0       	rjmp	.+72     	; 0xd9a <__stack+0x53b>
     d52:	ce 01       	movw	r24, r28
     d54:	81 5b       	subi	r24, 0xB1	; 177
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	20 e9       	ldi	r18, 0x90	; 144
     d5a:	31 e0       	ldi	r19, 0x01	; 1
     d5c:	fc 01       	movw	r30, r24
     d5e:	31 83       	std	Z+1, r19	; 0x01
     d60:	20 83       	st	Z, r18
     d62:	ce 01       	movw	r24, r28
     d64:	81 5b       	subi	r24, 0xB1	; 177
     d66:	9f 4f       	sbci	r25, 0xFF	; 255
     d68:	fc 01       	movw	r30, r24
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <__stack+0x50f>
     d72:	9e 01       	movw	r18, r28
     d74:	21 5b       	subi	r18, 0xB1	; 177
     d76:	3f 4f       	sbci	r19, 0xFF	; 255
     d78:	f9 01       	movw	r30, r18
     d7a:	91 83       	std	Z+1, r25	; 0x01
     d7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7e:	ce 01       	movw	r24, r28
     d80:	83 5b       	subi	r24, 0xB3	; 179
     d82:	9f 4f       	sbci	r25, 0xFF	; 255
     d84:	9e 01       	movw	r18, r28
     d86:	23 5b       	subi	r18, 0xB3	; 179
     d88:	3f 4f       	sbci	r19, 0xFF	; 255
     d8a:	f9 01       	movw	r30, r18
     d8c:	20 81       	ld	r18, Z
     d8e:	31 81       	ldd	r19, Z+1	; 0x01
     d90:	21 50       	subi	r18, 0x01	; 1
     d92:	31 09       	sbc	r19, r1
     d94:	fc 01       	movw	r30, r24
     d96:	31 83       	std	Z+1, r19	; 0x01
     d98:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d9a:	ce 01       	movw	r24, r28
     d9c:	83 5b       	subi	r24, 0xB3	; 179
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	fc 01       	movw	r30, r24
     da2:	80 81       	ld	r24, Z
     da4:	91 81       	ldd	r25, Z+1	; 0x01
     da6:	89 2b       	or	r24, r25
     da8:	a1 f6       	brne	.-88     	; 0xd52 <__stack+0x4f3>
     daa:	2c c0       	rjmp	.+88     	; 0xe04 <__stack+0x5a5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dac:	8e 01       	movw	r16, r28
     dae:	03 5b       	subi	r16, 0xB3	; 179
     db0:	1f 4f       	sbci	r17, 0xFF	; 255
     db2:	ce 01       	movw	r24, r28
     db4:	87 5b       	subi	r24, 0xB7	; 183
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	fc 01       	movw	r30, r24
     dba:	60 81       	ld	r22, Z
     dbc:	71 81       	ldd	r23, Z+1	; 0x01
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	93 81       	ldd	r25, Z+3	; 0x03
     dc2:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	f8 01       	movw	r30, r16
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	80 83       	st	Z, r24
     dd0:	ce 01       	movw	r24, r28
     dd2:	8f 5a       	subi	r24, 0xAF	; 175
     dd4:	9f 4f       	sbci	r25, 0xFF	; 255
     dd6:	9e 01       	movw	r18, r28
     dd8:	23 5b       	subi	r18, 0xB3	; 179
     dda:	3f 4f       	sbci	r19, 0xFF	; 255
     ddc:	f9 01       	movw	r30, r18
     dde:	20 81       	ld	r18, Z
     de0:	31 81       	ldd	r19, Z+1	; 0x01
     de2:	fc 01       	movw	r30, r24
     de4:	31 83       	std	Z+1, r19	; 0x01
     de6:	20 83       	st	Z, r18
     de8:	ce 01       	movw	r24, r28
     dea:	8f 5a       	subi	r24, 0xAF	; 175
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	fc 01       	movw	r30, r24
     df0:	80 81       	ld	r24, Z
     df2:	91 81       	ldd	r25, Z+1	; 0x01
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <__stack+0x595>
     df8:	9e 01       	movw	r18, r28
     dfa:	2f 5a       	subi	r18, 0xAF	; 175
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	f9 01       	movw	r30, r18
     e00:	91 83       	std	Z+1, r25	; 0x01
     e02:	80 83       	st	Z, r24
			PORTA = 0x03;
     e04:	8b e3       	ldi	r24, 0x3B	; 59
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	23 e0       	ldi	r18, 0x03	; 3
     e0a:	fc 01       	movw	r30, r24
     e0c:	20 83       	st	Z, r18
			_delay_ms(period);
     e0e:	8d 81       	ldd	r24, Y+5	; 0x05
     e10:	9e 81       	ldd	r25, Y+6	; 0x06
     e12:	09 2e       	mov	r0, r25
     e14:	00 0c       	add	r0, r0
     e16:	aa 0b       	sbc	r26, r26
     e18:	bb 0b       	sbc	r27, r27
     e1a:	bc 01       	movw	r22, r24
     e1c:	cd 01       	movw	r24, r26
     e1e:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	8b af       	std	Y+59, r24	; 0x3b
     e28:	9c af       	std	Y+60, r25	; 0x3c
     e2a:	ad af       	std	Y+61, r26	; 0x3d
     e2c:	be af       	std	Y+62, r27	; 0x3e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e2e:	8e 01       	movw	r16, r28
     e30:	01 5c       	subi	r16, 0xC1	; 193
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	4a e7       	ldi	r20, 0x7A	; 122
     e3a:	55 e4       	ldi	r21, 0x45	; 69
     e3c:	6b ad       	ldd	r22, Y+59	; 0x3b
     e3e:	7c ad       	ldd	r23, Y+60	; 0x3c
     e40:	8d ad       	ldd	r24, Y+61	; 0x3d
     e42:	9e ad       	ldd	r25, Y+62	; 0x3e
     e44:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	f8 01       	movw	r30, r16
     e4e:	80 83       	st	Z, r24
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	a2 83       	std	Z+2, r26	; 0x02
     e54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e56:	ce 01       	movw	r24, r28
     e58:	cf 96       	adiw	r24, 0x3f	; 63
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e8       	ldi	r20, 0x80	; 128
     e60:	5f e3       	ldi	r21, 0x3F	; 63
     e62:	fc 01       	movw	r30, r24
     e64:	60 81       	ld	r22, Z
     e66:	71 81       	ldd	r23, Z+1	; 0x01
     e68:	82 81       	ldd	r24, Z+2	; 0x02
     e6a:	93 81       	ldd	r25, Z+3	; 0x03
     e6c:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
     e70:	88 23       	and	r24, r24
     e72:	4c f4       	brge	.+18     	; 0xe86 <__stack+0x627>
		__ticks = 1;
     e74:	ce 01       	movw	r24, r28
     e76:	8d 5b       	subi	r24, 0xBD	; 189
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	fc 01       	movw	r30, r24
     e80:	31 83       	std	Z+1, r19	; 0x01
     e82:	20 83       	st	Z, r18
     e84:	67 c0       	rjmp	.+206    	; 0xf54 <__stack+0x6f5>
	else if (__tmp > 65535)
     e86:	ce 01       	movw	r24, r28
     e88:	cf 96       	adiw	r24, 0x3f	; 63
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	3f ef       	ldi	r19, 0xFF	; 255
     e8e:	4f e7       	ldi	r20, 0x7F	; 127
     e90:	57 e4       	ldi	r21, 0x47	; 71
     e92:	fc 01       	movw	r30, r24
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
     ea0:	18 16       	cp	r1, r24
     ea2:	0c f0       	brlt	.+2      	; 0xea6 <__stack+0x647>
     ea4:	46 c0       	rjmp	.+140    	; 0xf32 <__stack+0x6d3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e2       	ldi	r20, 0x20	; 32
     eac:	51 e4       	ldi	r21, 0x41	; 65
     eae:	6b ad       	ldd	r22, Y+59	; 0x3b
     eb0:	7c ad       	ldd	r23, Y+60	; 0x3c
     eb2:	8d ad       	ldd	r24, Y+61	; 0x3d
     eb4:	9e ad       	ldd	r25, Y+62	; 0x3e
     eb6:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	8e 01       	movw	r16, r28
     ec0:	0d 5b       	subi	r16, 0xBD	; 189
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	f8 01       	movw	r30, r16
     ed2:	91 83       	std	Z+1, r25	; 0x01
     ed4:	80 83       	st	Z, r24
     ed6:	24 c0       	rjmp	.+72     	; 0xf20 <__stack+0x6c1>
     ed8:	ce 01       	movw	r24, r28
     eda:	8b 5b       	subi	r24, 0xBB	; 187
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	20 e9       	ldi	r18, 0x90	; 144
     ee0:	31 e0       	ldi	r19, 0x01	; 1
     ee2:	fc 01       	movw	r30, r24
     ee4:	31 83       	std	Z+1, r19	; 0x01
     ee6:	20 83       	st	Z, r18
     ee8:	ce 01       	movw	r24, r28
     eea:	8b 5b       	subi	r24, 0xBB	; 187
     eec:	9f 4f       	sbci	r25, 0xFF	; 255
     eee:	fc 01       	movw	r30, r24
     ef0:	80 81       	ld	r24, Z
     ef2:	91 81       	ldd	r25, Z+1	; 0x01
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <__stack+0x695>
     ef8:	9e 01       	movw	r18, r28
     efa:	2b 5b       	subi	r18, 0xBB	; 187
     efc:	3f 4f       	sbci	r19, 0xFF	; 255
     efe:	f9 01       	movw	r30, r18
     f00:	91 83       	std	Z+1, r25	; 0x01
     f02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f04:	ce 01       	movw	r24, r28
     f06:	8d 5b       	subi	r24, 0xBD	; 189
     f08:	9f 4f       	sbci	r25, 0xFF	; 255
     f0a:	9e 01       	movw	r18, r28
     f0c:	2d 5b       	subi	r18, 0xBD	; 189
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
     f10:	f9 01       	movw	r30, r18
     f12:	20 81       	ld	r18, Z
     f14:	31 81       	ldd	r19, Z+1	; 0x01
     f16:	21 50       	subi	r18, 0x01	; 1
     f18:	31 09       	sbc	r19, r1
     f1a:	fc 01       	movw	r30, r24
     f1c:	31 83       	std	Z+1, r19	; 0x01
     f1e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f20:	ce 01       	movw	r24, r28
     f22:	8d 5b       	subi	r24, 0xBD	; 189
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	fc 01       	movw	r30, r24
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	89 2b       	or	r24, r25
     f2e:	a1 f6       	brne	.-88     	; 0xed8 <__stack+0x679>
     f30:	2b c0       	rjmp	.+86     	; 0xf88 <__stack+0x729>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f32:	8e 01       	movw	r16, r28
     f34:	0d 5b       	subi	r16, 0xBD	; 189
     f36:	1f 4f       	sbci	r17, 0xFF	; 255
     f38:	ce 01       	movw	r24, r28
     f3a:	cf 96       	adiw	r24, 0x3f	; 63
     f3c:	fc 01       	movw	r30, r24
     f3e:	60 81       	ld	r22, Z
     f40:	71 81       	ldd	r23, Z+1	; 0x01
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	f8 01       	movw	r30, r16
     f50:	91 83       	std	Z+1, r25	; 0x01
     f52:	80 83       	st	Z, r24
     f54:	ce 01       	movw	r24, r28
     f56:	89 5b       	subi	r24, 0xB9	; 185
     f58:	9f 4f       	sbci	r25, 0xFF	; 255
     f5a:	9e 01       	movw	r18, r28
     f5c:	2d 5b       	subi	r18, 0xBD	; 189
     f5e:	3f 4f       	sbci	r19, 0xFF	; 255
     f60:	f9 01       	movw	r30, r18
     f62:	20 81       	ld	r18, Z
     f64:	31 81       	ldd	r19, Z+1	; 0x01
     f66:	fc 01       	movw	r30, r24
     f68:	31 83       	std	Z+1, r19	; 0x01
     f6a:	20 83       	st	Z, r18
     f6c:	ce 01       	movw	r24, r28
     f6e:	89 5b       	subi	r24, 0xB9	; 185
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	fc 01       	movw	r30, r24
     f74:	80 81       	ld	r24, Z
     f76:	91 81       	ldd	r25, Z+1	; 0x01
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <__stack+0x719>
     f7c:	9e 01       	movw	r18, r28
     f7e:	29 5b       	subi	r18, 0xB9	; 185
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	f9 01       	movw	r30, r18
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	80 83       	st	Z, r24

	int period;
	period = 10;
	if (direction == 1)
	{
		for (int i = 0; i < round(distance); i++)
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	9a 83       	std	Y+2, r25	; 0x02
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	09 2e       	mov	r0, r25
     f98:	00 0c       	add	r0, r0
     f9a:	aa 0b       	sbc	r26, r26
     f9c:	bb 0b       	sbc	r27, r27
     f9e:	bc 01       	movw	r22, r24
     fa0:	cd 01       	movw	r24, r26
     fa2:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
     fa6:	6b 01       	movw	r12, r22
     fa8:	7c 01       	movw	r14, r24
     faa:	ce 01       	movw	r24, r28
     fac:	83 53       	subi	r24, 0x33	; 51
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	fc 01       	movw	r30, r24
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	a2 81       	ldd	r26, Z+2	; 0x02
     fb8:	b3 81       	ldd	r27, Z+3	; 0x03
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <round>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	9c 01       	movw	r18, r24
     fc8:	ad 01       	movw	r20, r26
     fca:	c7 01       	movw	r24, r14
     fcc:	b6 01       	movw	r22, r12
     fce:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
     fd2:	88 23       	and	r24, r24
     fd4:	0c f4       	brge	.+2      	; 0xfd8 <__stack+0x779>
     fd6:	ee c8       	rjmp	.-3620   	; 0x1b4 <rotateStepper_1+0x5e>
			_delay_ms(period);
			PORTA = 0x03;
			_delay_ms(period);
		}
	}
}
     fd8:	04 c4       	rjmp	.+2056   	; 0x17e2 <__stack+0xf83>
			_delay_ms(period);
		}
	}
	else
	{
		for (int i = 0; i < round(distance); i++)
     fda:	1c 82       	std	Y+4, r1	; 0x04
     fdc:	1b 82       	std	Y+3, r1	; 0x03
     fde:	de c3       	rjmp	.+1980   	; 0x179c <__stack+0xf3d>
		{
			PORTA = 0x03;
     fe0:	8b e3       	ldi	r24, 0x3B	; 59
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	23 e0       	ldi	r18, 0x03	; 3
     fe6:	fc 01       	movw	r30, r24
     fe8:	20 83       	st	Z, r18
			_delay_ms(period);
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	09 2e       	mov	r0, r25
     ff0:	00 0c       	add	r0, r0
     ff2:	aa 0b       	sbc	r26, r26
     ff4:	bb 0b       	sbc	r27, r27
     ff6:	bc 01       	movw	r22, r24
     ff8:	cd 01       	movw	r24, r26
     ffa:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	8b a7       	std	Y+43, r24	; 0x2b
    1004:	9c a7       	std	Y+44, r25	; 0x2c
    1006:	ad a7       	std	Y+45, r26	; 0x2d
    1008:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    100a:	8e 01       	movw	r16, r28
    100c:	0f 53       	subi	r16, 0x3F	; 63
    100e:	1f 4f       	sbci	r17, 0xFF	; 255
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	4a e7       	ldi	r20, 0x7A	; 122
    1016:	55 e4       	ldi	r21, 0x45	; 69
    1018:	6b a5       	ldd	r22, Y+43	; 0x2b
    101a:	7c a5       	ldd	r23, Y+44	; 0x2c
    101c:	8d a5       	ldd	r24, Y+45	; 0x2d
    101e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1020:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	f8 01       	movw	r30, r16
    102a:	80 83       	st	Z, r24
    102c:	91 83       	std	Z+1, r25	; 0x01
    102e:	a2 83       	std	Z+2, r26	; 0x02
    1030:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1032:	ce 01       	movw	r24, r28
    1034:	8f 53       	subi	r24, 0x3F	; 63
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e8       	ldi	r20, 0x80	; 128
    103e:	5f e3       	ldi	r21, 0x3F	; 63
    1040:	fc 01       	movw	r30, r24
    1042:	60 81       	ld	r22, Z
    1044:	71 81       	ldd	r23, Z+1	; 0x01
    1046:	82 81       	ldd	r24, Z+2	; 0x02
    1048:	93 81       	ldd	r25, Z+3	; 0x03
    104a:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    104e:	88 23       	and	r24, r24
    1050:	4c f4       	brge	.+18     	; 0x1064 <__stack+0x805>
		__ticks = 1;
    1052:	ce 01       	movw	r24, r28
    1054:	8b 53       	subi	r24, 0x3B	; 59
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	fc 01       	movw	r30, r24
    105e:	31 83       	std	Z+1, r19	; 0x01
    1060:	20 83       	st	Z, r18
    1062:	69 c0       	rjmp	.+210    	; 0x1136 <__stack+0x8d7>
	else if (__tmp > 65535)
    1064:	ce 01       	movw	r24, r28
    1066:	8f 53       	subi	r24, 0x3F	; 63
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	3f ef       	ldi	r19, 0xFF	; 255
    106e:	4f e7       	ldi	r20, 0x7F	; 127
    1070:	57 e4       	ldi	r21, 0x47	; 71
    1072:	fc 01       	movw	r30, r24
    1074:	60 81       	ld	r22, Z
    1076:	71 81       	ldd	r23, Z+1	; 0x01
    1078:	82 81       	ldd	r24, Z+2	; 0x02
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    1080:	18 16       	cp	r1, r24
    1082:	0c f0       	brlt	.+2      	; 0x1086 <__stack+0x827>
    1084:	46 c0       	rjmp	.+140    	; 0x1112 <__stack+0x8b3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e2       	ldi	r20, 0x20	; 32
    108c:	51 e4       	ldi	r21, 0x41	; 65
    108e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1090:	7c a5       	ldd	r23, Y+44	; 0x2c
    1092:	8d a5       	ldd	r24, Y+45	; 0x2d
    1094:	9e a5       	ldd	r25, Y+46	; 0x2e
    1096:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	8e 01       	movw	r16, r28
    10a0:	0b 53       	subi	r16, 0x3B	; 59
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	bc 01       	movw	r22, r24
    10a6:	cd 01       	movw	r24, r26
    10a8:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	f8 01       	movw	r30, r16
    10b2:	91 83       	std	Z+1, r25	; 0x01
    10b4:	80 83       	st	Z, r24
    10b6:	24 c0       	rjmp	.+72     	; 0x1100 <__stack+0x8a1>
    10b8:	ce 01       	movw	r24, r28
    10ba:	89 53       	subi	r24, 0x39	; 57
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	20 e9       	ldi	r18, 0x90	; 144
    10c0:	31 e0       	ldi	r19, 0x01	; 1
    10c2:	fc 01       	movw	r30, r24
    10c4:	31 83       	std	Z+1, r19	; 0x01
    10c6:	20 83       	st	Z, r18
    10c8:	ce 01       	movw	r24, r28
    10ca:	89 53       	subi	r24, 0x39	; 57
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	fc 01       	movw	r30, r24
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <__stack+0x875>
    10d8:	9e 01       	movw	r18, r28
    10da:	29 53       	subi	r18, 0x39	; 57
    10dc:	3f 4f       	sbci	r19, 0xFF	; 255
    10de:	f9 01       	movw	r30, r18
    10e0:	91 83       	std	Z+1, r25	; 0x01
    10e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e4:	ce 01       	movw	r24, r28
    10e6:	8b 53       	subi	r24, 0x3B	; 59
    10e8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ea:	9e 01       	movw	r18, r28
    10ec:	2b 53       	subi	r18, 0x3B	; 59
    10ee:	3f 4f       	sbci	r19, 0xFF	; 255
    10f0:	f9 01       	movw	r30, r18
    10f2:	20 81       	ld	r18, Z
    10f4:	31 81       	ldd	r19, Z+1	; 0x01
    10f6:	21 50       	subi	r18, 0x01	; 1
    10f8:	31 09       	sbc	r19, r1
    10fa:	fc 01       	movw	r30, r24
    10fc:	31 83       	std	Z+1, r19	; 0x01
    10fe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1100:	ce 01       	movw	r24, r28
    1102:	8b 53       	subi	r24, 0x3B	; 59
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	fc 01       	movw	r30, r24
    1108:	80 81       	ld	r24, Z
    110a:	91 81       	ldd	r25, Z+1	; 0x01
    110c:	89 2b       	or	r24, r25
    110e:	a1 f6       	brne	.-88     	; 0x10b8 <__stack+0x859>
    1110:	2c c0       	rjmp	.+88     	; 0x116a <__stack+0x90b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1112:	8e 01       	movw	r16, r28
    1114:	0b 53       	subi	r16, 0x3B	; 59
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	ce 01       	movw	r24, r28
    111a:	8f 53       	subi	r24, 0x3F	; 63
    111c:	9f 4f       	sbci	r25, 0xFF	; 255
    111e:	fc 01       	movw	r30, r24
    1120:	60 81       	ld	r22, Z
    1122:	71 81       	ldd	r23, Z+1	; 0x01
    1124:	82 81       	ldd	r24, Z+2	; 0x02
    1126:	93 81       	ldd	r25, Z+3	; 0x03
    1128:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	f8 01       	movw	r30, r16
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	80 83       	st	Z, r24
    1136:	ce 01       	movw	r24, r28
    1138:	87 53       	subi	r24, 0x37	; 55
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	9e 01       	movw	r18, r28
    113e:	2b 53       	subi	r18, 0x3B	; 59
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	f9 01       	movw	r30, r18
    1144:	20 81       	ld	r18, Z
    1146:	31 81       	ldd	r19, Z+1	; 0x01
    1148:	fc 01       	movw	r30, r24
    114a:	31 83       	std	Z+1, r19	; 0x01
    114c:	20 83       	st	Z, r18
    114e:	ce 01       	movw	r24, r28
    1150:	87 53       	subi	r24, 0x37	; 55
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	fc 01       	movw	r30, r24
    1156:	80 81       	ld	r24, Z
    1158:	91 81       	ldd	r25, Z+1	; 0x01
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <__stack+0x8fb>
    115e:	9e 01       	movw	r18, r28
    1160:	27 53       	subi	r18, 0x37	; 55
    1162:	3f 4f       	sbci	r19, 0xFF	; 255
    1164:	f9 01       	movw	r30, r18
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	80 83       	st	Z, r24
			PORTA = 0x09;
    116a:	8b e3       	ldi	r24, 0x3B	; 59
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	29 e0       	ldi	r18, 0x09	; 9
    1170:	fc 01       	movw	r30, r24
    1172:	20 83       	st	Z, r18
			_delay_ms(period);
    1174:	8d 81       	ldd	r24, Y+5	; 0x05
    1176:	9e 81       	ldd	r25, Y+6	; 0x06
    1178:	09 2e       	mov	r0, r25
    117a:	00 0c       	add	r0, r0
    117c:	aa 0b       	sbc	r26, r26
    117e:	bb 0b       	sbc	r27, r27
    1180:	bc 01       	movw	r22, r24
    1182:	cd 01       	movw	r24, r26
    1184:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	8f a7       	std	Y+47, r24	; 0x2f
    118e:	98 ab       	std	Y+48, r25	; 0x30
    1190:	a9 ab       	std	Y+49, r26	; 0x31
    1192:	ba ab       	std	Y+50, r27	; 0x32

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1194:	8e 01       	movw	r16, r28
    1196:	09 54       	subi	r16, 0x49	; 73
    1198:	1f 4f       	sbci	r17, 0xFF	; 255
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	4a e7       	ldi	r20, 0x7A	; 122
    11a0:	55 e4       	ldi	r21, 0x45	; 69
    11a2:	6f a5       	ldd	r22, Y+47	; 0x2f
    11a4:	78 a9       	ldd	r23, Y+48	; 0x30
    11a6:	89 a9       	ldd	r24, Y+49	; 0x31
    11a8:	9a a9       	ldd	r25, Y+50	; 0x32
    11aa:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	f8 01       	movw	r30, r16
    11b4:	80 83       	st	Z, r24
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	a2 83       	std	Z+2, r26	; 0x02
    11ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11bc:	ce 01       	movw	r24, r28
    11be:	89 54       	subi	r24, 0x49	; 73
    11c0:	9f 4f       	sbci	r25, 0xFF	; 255
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e8       	ldi	r20, 0x80	; 128
    11c8:	5f e3       	ldi	r21, 0x3F	; 63
    11ca:	fc 01       	movw	r30, r24
    11cc:	60 81       	ld	r22, Z
    11ce:	71 81       	ldd	r23, Z+1	; 0x01
    11d0:	82 81       	ldd	r24, Z+2	; 0x02
    11d2:	93 81       	ldd	r25, Z+3	; 0x03
    11d4:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    11d8:	88 23       	and	r24, r24
    11da:	4c f4       	brge	.+18     	; 0x11ee <__stack+0x98f>
		__ticks = 1;
    11dc:	ce 01       	movw	r24, r28
    11de:	85 54       	subi	r24, 0x45	; 69
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	21 e0       	ldi	r18, 0x01	; 1
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	fc 01       	movw	r30, r24
    11e8:	31 83       	std	Z+1, r19	; 0x01
    11ea:	20 83       	st	Z, r18
    11ec:	69 c0       	rjmp	.+210    	; 0x12c0 <__stack+0xa61>
	else if (__tmp > 65535)
    11ee:	ce 01       	movw	r24, r28
    11f0:	89 54       	subi	r24, 0x49	; 73
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	3f ef       	ldi	r19, 0xFF	; 255
    11f8:	4f e7       	ldi	r20, 0x7F	; 127
    11fa:	57 e4       	ldi	r21, 0x47	; 71
    11fc:	fc 01       	movw	r30, r24
    11fe:	60 81       	ld	r22, Z
    1200:	71 81       	ldd	r23, Z+1	; 0x01
    1202:	82 81       	ldd	r24, Z+2	; 0x02
    1204:	93 81       	ldd	r25, Z+3	; 0x03
    1206:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    120a:	18 16       	cp	r1, r24
    120c:	0c f0       	brlt	.+2      	; 0x1210 <__stack+0x9b1>
    120e:	46 c0       	rjmp	.+140    	; 0x129c <__stack+0xa3d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e2       	ldi	r20, 0x20	; 32
    1216:	51 e4       	ldi	r21, 0x41	; 65
    1218:	6f a5       	ldd	r22, Y+47	; 0x2f
    121a:	78 a9       	ldd	r23, Y+48	; 0x30
    121c:	89 a9       	ldd	r24, Y+49	; 0x31
    121e:	9a a9       	ldd	r25, Y+50	; 0x32
    1220:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	8e 01       	movw	r16, r28
    122a:	05 54       	subi	r16, 0x45	; 69
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	bc 01       	movw	r22, r24
    1230:	cd 01       	movw	r24, r26
    1232:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	f8 01       	movw	r30, r16
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	80 83       	st	Z, r24
    1240:	24 c0       	rjmp	.+72     	; 0x128a <__stack+0xa2b>
    1242:	ce 01       	movw	r24, r28
    1244:	83 54       	subi	r24, 0x43	; 67
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	20 e9       	ldi	r18, 0x90	; 144
    124a:	31 e0       	ldi	r19, 0x01	; 1
    124c:	fc 01       	movw	r30, r24
    124e:	31 83       	std	Z+1, r19	; 0x01
    1250:	20 83       	st	Z, r18
    1252:	ce 01       	movw	r24, r28
    1254:	83 54       	subi	r24, 0x43	; 67
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	fc 01       	movw	r30, r24
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <__stack+0x9ff>
    1262:	9e 01       	movw	r18, r28
    1264:	23 54       	subi	r18, 0x43	; 67
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	f9 01       	movw	r30, r18
    126a:	91 83       	std	Z+1, r25	; 0x01
    126c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126e:	ce 01       	movw	r24, r28
    1270:	85 54       	subi	r24, 0x45	; 69
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	9e 01       	movw	r18, r28
    1276:	25 54       	subi	r18, 0x45	; 69
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	f9 01       	movw	r30, r18
    127c:	20 81       	ld	r18, Z
    127e:	31 81       	ldd	r19, Z+1	; 0x01
    1280:	21 50       	subi	r18, 0x01	; 1
    1282:	31 09       	sbc	r19, r1
    1284:	fc 01       	movw	r30, r24
    1286:	31 83       	std	Z+1, r19	; 0x01
    1288:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128a:	ce 01       	movw	r24, r28
    128c:	85 54       	subi	r24, 0x45	; 69
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	fc 01       	movw	r30, r24
    1292:	80 81       	ld	r24, Z
    1294:	91 81       	ldd	r25, Z+1	; 0x01
    1296:	89 2b       	or	r24, r25
    1298:	a1 f6       	brne	.-88     	; 0x1242 <__stack+0x9e3>
    129a:	2c c0       	rjmp	.+88     	; 0x12f4 <__stack+0xa95>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129c:	8e 01       	movw	r16, r28
    129e:	05 54       	subi	r16, 0x45	; 69
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	ce 01       	movw	r24, r28
    12a4:	89 54       	subi	r24, 0x49	; 73
    12a6:	9f 4f       	sbci	r25, 0xFF	; 255
    12a8:	fc 01       	movw	r30, r24
    12aa:	60 81       	ld	r22, Z
    12ac:	71 81       	ldd	r23, Z+1	; 0x01
    12ae:	82 81       	ldd	r24, Z+2	; 0x02
    12b0:	93 81       	ldd	r25, Z+3	; 0x03
    12b2:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	f8 01       	movw	r30, r16
    12bc:	91 83       	std	Z+1, r25	; 0x01
    12be:	80 83       	st	Z, r24
    12c0:	ce 01       	movw	r24, r28
    12c2:	81 54       	subi	r24, 0x41	; 65
    12c4:	9f 4f       	sbci	r25, 0xFF	; 255
    12c6:	9e 01       	movw	r18, r28
    12c8:	25 54       	subi	r18, 0x45	; 69
    12ca:	3f 4f       	sbci	r19, 0xFF	; 255
    12cc:	f9 01       	movw	r30, r18
    12ce:	20 81       	ld	r18, Z
    12d0:	31 81       	ldd	r19, Z+1	; 0x01
    12d2:	fc 01       	movw	r30, r24
    12d4:	31 83       	std	Z+1, r19	; 0x01
    12d6:	20 83       	st	Z, r18
    12d8:	ce 01       	movw	r24, r28
    12da:	81 54       	subi	r24, 0x41	; 65
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	fc 01       	movw	r30, r24
    12e0:	80 81       	ld	r24, Z
    12e2:	91 81       	ldd	r25, Z+1	; 0x01
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <__stack+0xa85>
    12e8:	9e 01       	movw	r18, r28
    12ea:	21 54       	subi	r18, 0x41	; 65
    12ec:	3f 4f       	sbci	r19, 0xFF	; 255
    12ee:	f9 01       	movw	r30, r18
    12f0:	91 83       	std	Z+1, r25	; 0x01
    12f2:	80 83       	st	Z, r24
			PORTA = 0x0c;
    12f4:	8b e3       	ldi	r24, 0x3B	; 59
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	2c e0       	ldi	r18, 0x0C	; 12
    12fa:	fc 01       	movw	r30, r24
    12fc:	20 83       	st	Z, r18
			_delay_ms(period);
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	9e 81       	ldd	r25, Y+6	; 0x06
    1302:	09 2e       	mov	r0, r25
    1304:	00 0c       	add	r0, r0
    1306:	aa 0b       	sbc	r26, r26
    1308:	bb 0b       	sbc	r27, r27
    130a:	bc 01       	movw	r22, r24
    130c:	cd 01       	movw	r24, r26
    130e:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	8b ab       	std	Y+51, r24	; 0x33
    1318:	9c ab       	std	Y+52, r25	; 0x34
    131a:	ad ab       	std	Y+53, r26	; 0x35
    131c:	be ab       	std	Y+54, r27	; 0x36

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    131e:	8e 01       	movw	r16, r28
    1320:	03 55       	subi	r16, 0x53	; 83
    1322:	1f 4f       	sbci	r17, 0xFF	; 255
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	4a e7       	ldi	r20, 0x7A	; 122
    132a:	55 e4       	ldi	r21, 0x45	; 69
    132c:	6b a9       	ldd	r22, Y+51	; 0x33
    132e:	7c a9       	ldd	r23, Y+52	; 0x34
    1330:	8d a9       	ldd	r24, Y+53	; 0x35
    1332:	9e a9       	ldd	r25, Y+54	; 0x36
    1334:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	f8 01       	movw	r30, r16
    133e:	80 83       	st	Z, r24
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	a2 83       	std	Z+2, r26	; 0x02
    1344:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1346:	ce 01       	movw	r24, r28
    1348:	83 55       	subi	r24, 0x53	; 83
    134a:	9f 4f       	sbci	r25, 0xFF	; 255
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e8       	ldi	r20, 0x80	; 128
    1352:	5f e3       	ldi	r21, 0x3F	; 63
    1354:	fc 01       	movw	r30, r24
    1356:	60 81       	ld	r22, Z
    1358:	71 81       	ldd	r23, Z+1	; 0x01
    135a:	82 81       	ldd	r24, Z+2	; 0x02
    135c:	93 81       	ldd	r25, Z+3	; 0x03
    135e:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    1362:	88 23       	and	r24, r24
    1364:	4c f4       	brge	.+18     	; 0x1378 <__stack+0xb19>
		__ticks = 1;
    1366:	ce 01       	movw	r24, r28
    1368:	8f 54       	subi	r24, 0x4F	; 79
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	21 e0       	ldi	r18, 0x01	; 1
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	fc 01       	movw	r30, r24
    1372:	31 83       	std	Z+1, r19	; 0x01
    1374:	20 83       	st	Z, r18
    1376:	69 c0       	rjmp	.+210    	; 0x144a <__stack+0xbeb>
	else if (__tmp > 65535)
    1378:	ce 01       	movw	r24, r28
    137a:	83 55       	subi	r24, 0x53	; 83
    137c:	9f 4f       	sbci	r25, 0xFF	; 255
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	3f ef       	ldi	r19, 0xFF	; 255
    1382:	4f e7       	ldi	r20, 0x7F	; 127
    1384:	57 e4       	ldi	r21, 0x47	; 71
    1386:	fc 01       	movw	r30, r24
    1388:	60 81       	ld	r22, Z
    138a:	71 81       	ldd	r23, Z+1	; 0x01
    138c:	82 81       	ldd	r24, Z+2	; 0x02
    138e:	93 81       	ldd	r25, Z+3	; 0x03
    1390:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    1394:	18 16       	cp	r1, r24
    1396:	0c f0       	brlt	.+2      	; 0x139a <__stack+0xb3b>
    1398:	46 c0       	rjmp	.+140    	; 0x1426 <__stack+0xbc7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e2       	ldi	r20, 0x20	; 32
    13a0:	51 e4       	ldi	r21, 0x41	; 65
    13a2:	6b a9       	ldd	r22, Y+51	; 0x33
    13a4:	7c a9       	ldd	r23, Y+52	; 0x34
    13a6:	8d a9       	ldd	r24, Y+53	; 0x35
    13a8:	9e a9       	ldd	r25, Y+54	; 0x36
    13aa:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	8e 01       	movw	r16, r28
    13b4:	0f 54       	subi	r16, 0x4F	; 79
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	f8 01       	movw	r30, r16
    13c6:	91 83       	std	Z+1, r25	; 0x01
    13c8:	80 83       	st	Z, r24
    13ca:	24 c0       	rjmp	.+72     	; 0x1414 <__stack+0xbb5>
    13cc:	ce 01       	movw	r24, r28
    13ce:	8d 54       	subi	r24, 0x4D	; 77
    13d0:	9f 4f       	sbci	r25, 0xFF	; 255
    13d2:	20 e9       	ldi	r18, 0x90	; 144
    13d4:	31 e0       	ldi	r19, 0x01	; 1
    13d6:	fc 01       	movw	r30, r24
    13d8:	31 83       	std	Z+1, r19	; 0x01
    13da:	20 83       	st	Z, r18
    13dc:	ce 01       	movw	r24, r28
    13de:	8d 54       	subi	r24, 0x4D	; 77
    13e0:	9f 4f       	sbci	r25, 0xFF	; 255
    13e2:	fc 01       	movw	r30, r24
    13e4:	80 81       	ld	r24, Z
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <__stack+0xb89>
    13ec:	9e 01       	movw	r18, r28
    13ee:	2d 54       	subi	r18, 0x4D	; 77
    13f0:	3f 4f       	sbci	r19, 0xFF	; 255
    13f2:	f9 01       	movw	r30, r18
    13f4:	91 83       	std	Z+1, r25	; 0x01
    13f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f8:	ce 01       	movw	r24, r28
    13fa:	8f 54       	subi	r24, 0x4F	; 79
    13fc:	9f 4f       	sbci	r25, 0xFF	; 255
    13fe:	9e 01       	movw	r18, r28
    1400:	2f 54       	subi	r18, 0x4F	; 79
    1402:	3f 4f       	sbci	r19, 0xFF	; 255
    1404:	f9 01       	movw	r30, r18
    1406:	20 81       	ld	r18, Z
    1408:	31 81       	ldd	r19, Z+1	; 0x01
    140a:	21 50       	subi	r18, 0x01	; 1
    140c:	31 09       	sbc	r19, r1
    140e:	fc 01       	movw	r30, r24
    1410:	31 83       	std	Z+1, r19	; 0x01
    1412:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1414:	ce 01       	movw	r24, r28
    1416:	8f 54       	subi	r24, 0x4F	; 79
    1418:	9f 4f       	sbci	r25, 0xFF	; 255
    141a:	fc 01       	movw	r30, r24
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
    1420:	89 2b       	or	r24, r25
    1422:	a1 f6       	brne	.-88     	; 0x13cc <__stack+0xb6d>
    1424:	2c c0       	rjmp	.+88     	; 0x147e <__stack+0xc1f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1426:	8e 01       	movw	r16, r28
    1428:	0f 54       	subi	r16, 0x4F	; 79
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	ce 01       	movw	r24, r28
    142e:	83 55       	subi	r24, 0x53	; 83
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	fc 01       	movw	r30, r24
    1434:	60 81       	ld	r22, Z
    1436:	71 81       	ldd	r23, Z+1	; 0x01
    1438:	82 81       	ldd	r24, Z+2	; 0x02
    143a:	93 81       	ldd	r25, Z+3	; 0x03
    143c:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	f8 01       	movw	r30, r16
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	80 83       	st	Z, r24
    144a:	ce 01       	movw	r24, r28
    144c:	8b 54       	subi	r24, 0x4B	; 75
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	9e 01       	movw	r18, r28
    1452:	2f 54       	subi	r18, 0x4F	; 79
    1454:	3f 4f       	sbci	r19, 0xFF	; 255
    1456:	f9 01       	movw	r30, r18
    1458:	20 81       	ld	r18, Z
    145a:	31 81       	ldd	r19, Z+1	; 0x01
    145c:	fc 01       	movw	r30, r24
    145e:	31 83       	std	Z+1, r19	; 0x01
    1460:	20 83       	st	Z, r18
    1462:	ce 01       	movw	r24, r28
    1464:	8b 54       	subi	r24, 0x4B	; 75
    1466:	9f 4f       	sbci	r25, 0xFF	; 255
    1468:	fc 01       	movw	r30, r24
    146a:	80 81       	ld	r24, Z
    146c:	91 81       	ldd	r25, Z+1	; 0x01
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <__stack+0xc0f>
    1472:	9e 01       	movw	r18, r28
    1474:	2b 54       	subi	r18, 0x4B	; 75
    1476:	3f 4f       	sbci	r19, 0xFF	; 255
    1478:	f9 01       	movw	r30, r18
    147a:	91 83       	std	Z+1, r25	; 0x01
    147c:	80 83       	st	Z, r24
			PORTA = 0x06;
    147e:	8b e3       	ldi	r24, 0x3B	; 59
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	26 e0       	ldi	r18, 0x06	; 6
    1484:	fc 01       	movw	r30, r24
    1486:	20 83       	st	Z, r18
			_delay_ms(period);
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	9e 81       	ldd	r25, Y+6	; 0x06
    148c:	09 2e       	mov	r0, r25
    148e:	00 0c       	add	r0, r0
    1490:	aa 0b       	sbc	r26, r26
    1492:	bb 0b       	sbc	r27, r27
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	8f ab       	std	Y+55, r24	; 0x37
    14a2:	98 af       	std	Y+56, r25	; 0x38
    14a4:	a9 af       	std	Y+57, r26	; 0x39
    14a6:	ba af       	std	Y+58, r27	; 0x3a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14a8:	8e 01       	movw	r16, r28
    14aa:	0d 55       	subi	r16, 0x5D	; 93
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	4a e7       	ldi	r20, 0x7A	; 122
    14b4:	55 e4       	ldi	r21, 0x45	; 69
    14b6:	6f a9       	ldd	r22, Y+55	; 0x37
    14b8:	78 ad       	ldd	r23, Y+56	; 0x38
    14ba:	89 ad       	ldd	r24, Y+57	; 0x39
    14bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    14be:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	f8 01       	movw	r30, r16
    14c8:	80 83       	st	Z, r24
    14ca:	91 83       	std	Z+1, r25	; 0x01
    14cc:	a2 83       	std	Z+2, r26	; 0x02
    14ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14d0:	ce 01       	movw	r24, r28
    14d2:	8d 55       	subi	r24, 0x5D	; 93
    14d4:	9f 4f       	sbci	r25, 0xFF	; 255
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e8       	ldi	r20, 0x80	; 128
    14dc:	5f e3       	ldi	r21, 0x3F	; 63
    14de:	fc 01       	movw	r30, r24
    14e0:	60 81       	ld	r22, Z
    14e2:	71 81       	ldd	r23, Z+1	; 0x01
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	93 81       	ldd	r25, Z+3	; 0x03
    14e8:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    14ec:	88 23       	and	r24, r24
    14ee:	4c f4       	brge	.+18     	; 0x1502 <__stack+0xca3>
		__ticks = 1;
    14f0:	ce 01       	movw	r24, r28
    14f2:	89 55       	subi	r24, 0x59	; 89
    14f4:	9f 4f       	sbci	r25, 0xFF	; 255
    14f6:	21 e0       	ldi	r18, 0x01	; 1
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	fc 01       	movw	r30, r24
    14fc:	31 83       	std	Z+1, r19	; 0x01
    14fe:	20 83       	st	Z, r18
    1500:	69 c0       	rjmp	.+210    	; 0x15d4 <__stack+0xd75>
	else if (__tmp > 65535)
    1502:	ce 01       	movw	r24, r28
    1504:	8d 55       	subi	r24, 0x5D	; 93
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	3f ef       	ldi	r19, 0xFF	; 255
    150c:	4f e7       	ldi	r20, 0x7F	; 127
    150e:	57 e4       	ldi	r21, 0x47	; 71
    1510:	fc 01       	movw	r30, r24
    1512:	60 81       	ld	r22, Z
    1514:	71 81       	ldd	r23, Z+1	; 0x01
    1516:	82 81       	ldd	r24, Z+2	; 0x02
    1518:	93 81       	ldd	r25, Z+3	; 0x03
    151a:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    151e:	18 16       	cp	r1, r24
    1520:	0c f0       	brlt	.+2      	; 0x1524 <__stack+0xcc5>
    1522:	46 c0       	rjmp	.+140    	; 0x15b0 <__stack+0xd51>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e2       	ldi	r20, 0x20	; 32
    152a:	51 e4       	ldi	r21, 0x41	; 65
    152c:	6f a9       	ldd	r22, Y+55	; 0x37
    152e:	78 ad       	ldd	r23, Y+56	; 0x38
    1530:	89 ad       	ldd	r24, Y+57	; 0x39
    1532:	9a ad       	ldd	r25, Y+58	; 0x3a
    1534:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	8e 01       	movw	r16, r28
    153e:	09 55       	subi	r16, 0x59	; 89
    1540:	1f 4f       	sbci	r17, 0xFF	; 255
    1542:	bc 01       	movw	r22, r24
    1544:	cd 01       	movw	r24, r26
    1546:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	f8 01       	movw	r30, r16
    1550:	91 83       	std	Z+1, r25	; 0x01
    1552:	80 83       	st	Z, r24
    1554:	24 c0       	rjmp	.+72     	; 0x159e <__stack+0xd3f>
    1556:	ce 01       	movw	r24, r28
    1558:	87 55       	subi	r24, 0x57	; 87
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	20 e9       	ldi	r18, 0x90	; 144
    155e:	31 e0       	ldi	r19, 0x01	; 1
    1560:	fc 01       	movw	r30, r24
    1562:	31 83       	std	Z+1, r19	; 0x01
    1564:	20 83       	st	Z, r18
    1566:	ce 01       	movw	r24, r28
    1568:	87 55       	subi	r24, 0x57	; 87
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	fc 01       	movw	r30, r24
    156e:	80 81       	ld	r24, Z
    1570:	91 81       	ldd	r25, Z+1	; 0x01
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <__stack+0xd13>
    1576:	9e 01       	movw	r18, r28
    1578:	27 55       	subi	r18, 0x57	; 87
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	f9 01       	movw	r30, r18
    157e:	91 83       	std	Z+1, r25	; 0x01
    1580:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1582:	ce 01       	movw	r24, r28
    1584:	89 55       	subi	r24, 0x59	; 89
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	9e 01       	movw	r18, r28
    158a:	29 55       	subi	r18, 0x59	; 89
    158c:	3f 4f       	sbci	r19, 0xFF	; 255
    158e:	f9 01       	movw	r30, r18
    1590:	20 81       	ld	r18, Z
    1592:	31 81       	ldd	r19, Z+1	; 0x01
    1594:	21 50       	subi	r18, 0x01	; 1
    1596:	31 09       	sbc	r19, r1
    1598:	fc 01       	movw	r30, r24
    159a:	31 83       	std	Z+1, r19	; 0x01
    159c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159e:	ce 01       	movw	r24, r28
    15a0:	89 55       	subi	r24, 0x59	; 89
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	fc 01       	movw	r30, r24
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	89 2b       	or	r24, r25
    15ac:	a1 f6       	brne	.-88     	; 0x1556 <__stack+0xcf7>
    15ae:	2c c0       	rjmp	.+88     	; 0x1608 <__stack+0xda9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b0:	8e 01       	movw	r16, r28
    15b2:	09 55       	subi	r16, 0x59	; 89
    15b4:	1f 4f       	sbci	r17, 0xFF	; 255
    15b6:	ce 01       	movw	r24, r28
    15b8:	8d 55       	subi	r24, 0x5D	; 93
    15ba:	9f 4f       	sbci	r25, 0xFF	; 255
    15bc:	fc 01       	movw	r30, r24
    15be:	60 81       	ld	r22, Z
    15c0:	71 81       	ldd	r23, Z+1	; 0x01
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	f8 01       	movw	r30, r16
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	80 83       	st	Z, r24
    15d4:	ce 01       	movw	r24, r28
    15d6:	85 55       	subi	r24, 0x55	; 85
    15d8:	9f 4f       	sbci	r25, 0xFF	; 255
    15da:	9e 01       	movw	r18, r28
    15dc:	29 55       	subi	r18, 0x59	; 89
    15de:	3f 4f       	sbci	r19, 0xFF	; 255
    15e0:	f9 01       	movw	r30, r18
    15e2:	20 81       	ld	r18, Z
    15e4:	31 81       	ldd	r19, Z+1	; 0x01
    15e6:	fc 01       	movw	r30, r24
    15e8:	31 83       	std	Z+1, r19	; 0x01
    15ea:	20 83       	st	Z, r18
    15ec:	ce 01       	movw	r24, r28
    15ee:	85 55       	subi	r24, 0x55	; 85
    15f0:	9f 4f       	sbci	r25, 0xFF	; 255
    15f2:	fc 01       	movw	r30, r24
    15f4:	80 81       	ld	r24, Z
    15f6:	91 81       	ldd	r25, Z+1	; 0x01
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <__stack+0xd99>
    15fc:	9e 01       	movw	r18, r28
    15fe:	25 55       	subi	r18, 0x55	; 85
    1600:	3f 4f       	sbci	r19, 0xFF	; 255
    1602:	f9 01       	movw	r30, r18
    1604:	91 83       	std	Z+1, r25	; 0x01
    1606:	80 83       	st	Z, r24
			PORTA = 0x03;
    1608:	8b e3       	ldi	r24, 0x3B	; 59
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	23 e0       	ldi	r18, 0x03	; 3
    160e:	fc 01       	movw	r30, r24
    1610:	20 83       	st	Z, r18
			_delay_ms(period);
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	09 2e       	mov	r0, r25
    1618:	00 0c       	add	r0, r0
    161a:	aa 0b       	sbc	r26, r26
    161c:	bb 0b       	sbc	r27, r27
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	8f 83       	std	Y+7, r24	; 0x07
    162c:	98 87       	std	Y+8, r25	; 0x08
    162e:	a9 87       	std	Y+9, r26	; 0x09
    1630:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1632:	8e 01       	movw	r16, r28
    1634:	07 56       	subi	r16, 0x67	; 103
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	4a e7       	ldi	r20, 0x7A	; 122
    163e:	55 e4       	ldi	r21, 0x45	; 69
    1640:	6f 81       	ldd	r22, Y+7	; 0x07
    1642:	78 85       	ldd	r23, Y+8	; 0x08
    1644:	89 85       	ldd	r24, Y+9	; 0x09
    1646:	9a 85       	ldd	r25, Y+10	; 0x0a
    1648:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	f8 01       	movw	r30, r16
    1652:	80 83       	st	Z, r24
    1654:	91 83       	std	Z+1, r25	; 0x01
    1656:	a2 83       	std	Z+2, r26	; 0x02
    1658:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    165a:	ce 01       	movw	r24, r28
    165c:	87 56       	subi	r24, 0x67	; 103
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e8       	ldi	r20, 0x80	; 128
    1666:	5f e3       	ldi	r21, 0x3F	; 63
    1668:	fc 01       	movw	r30, r24
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    1676:	88 23       	and	r24, r24
    1678:	4c f4       	brge	.+18     	; 0x168c <__stack+0xe2d>
		__ticks = 1;
    167a:	ce 01       	movw	r24, r28
    167c:	83 56       	subi	r24, 0x63	; 99
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	21 e0       	ldi	r18, 0x01	; 1
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	fc 01       	movw	r30, r24
    1686:	31 83       	std	Z+1, r19	; 0x01
    1688:	20 83       	st	Z, r18
    168a:	69 c0       	rjmp	.+210    	; 0x175e <__stack+0xeff>
	else if (__tmp > 65535)
    168c:	ce 01       	movw	r24, r28
    168e:	87 56       	subi	r24, 0x67	; 103
    1690:	9f 4f       	sbci	r25, 0xFF	; 255
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	3f ef       	ldi	r19, 0xFF	; 255
    1696:	4f e7       	ldi	r20, 0x7F	; 127
    1698:	57 e4       	ldi	r21, 0x47	; 71
    169a:	fc 01       	movw	r30, r24
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    16a8:	18 16       	cp	r1, r24
    16aa:	0c f0       	brlt	.+2      	; 0x16ae <__stack+0xe4f>
    16ac:	46 c0       	rjmp	.+140    	; 0x173a <__stack+0xedb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e2       	ldi	r20, 0x20	; 32
    16b4:	51 e4       	ldi	r21, 0x41	; 65
    16b6:	6f 81       	ldd	r22, Y+7	; 0x07
    16b8:	78 85       	ldd	r23, Y+8	; 0x08
    16ba:	89 85       	ldd	r24, Y+9	; 0x09
    16bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16be:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	8e 01       	movw	r16, r28
    16c8:	03 56       	subi	r16, 0x63	; 99
    16ca:	1f 4f       	sbci	r17, 0xFF	; 255
    16cc:	bc 01       	movw	r22, r24
    16ce:	cd 01       	movw	r24, r26
    16d0:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	f8 01       	movw	r30, r16
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	80 83       	st	Z, r24
    16de:	24 c0       	rjmp	.+72     	; 0x1728 <__stack+0xec9>
    16e0:	ce 01       	movw	r24, r28
    16e2:	81 56       	subi	r24, 0x61	; 97
    16e4:	9f 4f       	sbci	r25, 0xFF	; 255
    16e6:	20 e9       	ldi	r18, 0x90	; 144
    16e8:	31 e0       	ldi	r19, 0x01	; 1
    16ea:	fc 01       	movw	r30, r24
    16ec:	31 83       	std	Z+1, r19	; 0x01
    16ee:	20 83       	st	Z, r18
    16f0:	ce 01       	movw	r24, r28
    16f2:	81 56       	subi	r24, 0x61	; 97
    16f4:	9f 4f       	sbci	r25, 0xFF	; 255
    16f6:	fc 01       	movw	r30, r24
    16f8:	80 81       	ld	r24, Z
    16fa:	91 81       	ldd	r25, Z+1	; 0x01
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <__stack+0xe9d>
    1700:	9e 01       	movw	r18, r28
    1702:	21 56       	subi	r18, 0x61	; 97
    1704:	3f 4f       	sbci	r19, 0xFF	; 255
    1706:	f9 01       	movw	r30, r18
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170c:	ce 01       	movw	r24, r28
    170e:	83 56       	subi	r24, 0x63	; 99
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	9e 01       	movw	r18, r28
    1714:	23 56       	subi	r18, 0x63	; 99
    1716:	3f 4f       	sbci	r19, 0xFF	; 255
    1718:	f9 01       	movw	r30, r18
    171a:	20 81       	ld	r18, Z
    171c:	31 81       	ldd	r19, Z+1	; 0x01
    171e:	21 50       	subi	r18, 0x01	; 1
    1720:	31 09       	sbc	r19, r1
    1722:	fc 01       	movw	r30, r24
    1724:	31 83       	std	Z+1, r19	; 0x01
    1726:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	ce 01       	movw	r24, r28
    172a:	83 56       	subi	r24, 0x63	; 99
    172c:	9f 4f       	sbci	r25, 0xFF	; 255
    172e:	fc 01       	movw	r30, r24
    1730:	80 81       	ld	r24, Z
    1732:	91 81       	ldd	r25, Z+1	; 0x01
    1734:	89 2b       	or	r24, r25
    1736:	a1 f6       	brne	.-88     	; 0x16e0 <__stack+0xe81>
    1738:	2c c0       	rjmp	.+88     	; 0x1792 <__stack+0xf33>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173a:	8e 01       	movw	r16, r28
    173c:	03 56       	subi	r16, 0x63	; 99
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	ce 01       	movw	r24, r28
    1742:	87 56       	subi	r24, 0x67	; 103
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	fc 01       	movw	r30, r24
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	f8 01       	movw	r30, r16
    175a:	91 83       	std	Z+1, r25	; 0x01
    175c:	80 83       	st	Z, r24
    175e:	ce 01       	movw	r24, r28
    1760:	8f 55       	subi	r24, 0x5F	; 95
    1762:	9f 4f       	sbci	r25, 0xFF	; 255
    1764:	9e 01       	movw	r18, r28
    1766:	23 56       	subi	r18, 0x63	; 99
    1768:	3f 4f       	sbci	r19, 0xFF	; 255
    176a:	f9 01       	movw	r30, r18
    176c:	20 81       	ld	r18, Z
    176e:	31 81       	ldd	r19, Z+1	; 0x01
    1770:	fc 01       	movw	r30, r24
    1772:	31 83       	std	Z+1, r19	; 0x01
    1774:	20 83       	st	Z, r18
    1776:	ce 01       	movw	r24, r28
    1778:	8f 55       	subi	r24, 0x5F	; 95
    177a:	9f 4f       	sbci	r25, 0xFF	; 255
    177c:	fc 01       	movw	r30, r24
    177e:	80 81       	ld	r24, Z
    1780:	91 81       	ldd	r25, Z+1	; 0x01
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	f1 f7       	brne	.-4      	; 0x1782 <__stack+0xf23>
    1786:	9e 01       	movw	r18, r28
    1788:	2f 55       	subi	r18, 0x5F	; 95
    178a:	3f 4f       	sbci	r19, 0xFF	; 255
    178c:	f9 01       	movw	r30, r18
    178e:	91 83       	std	Z+1, r25	; 0x01
    1790:	80 83       	st	Z, r24
			_delay_ms(period);
		}
	}
	else
	{
		for (int i = 0; i < round(distance); i++)
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	9c 81       	ldd	r25, Y+4	; 0x04
    1796:	01 96       	adiw	r24, 0x01	; 1
    1798:	9c 83       	std	Y+4, r25	; 0x04
    179a:	8b 83       	std	Y+3, r24	; 0x03
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	09 2e       	mov	r0, r25
    17a2:	00 0c       	add	r0, r0
    17a4:	aa 0b       	sbc	r26, r26
    17a6:	bb 0b       	sbc	r27, r27
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    17b0:	6b 01       	movw	r12, r22
    17b2:	7c 01       	movw	r14, r24
    17b4:	ce 01       	movw	r24, r28
    17b6:	83 53       	subi	r24, 0x33	; 51
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	fc 01       	movw	r30, r24
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	a2 81       	ldd	r26, Z+2	; 0x02
    17c2:	b3 81       	ldd	r27, Z+3	; 0x03
    17c4:	bc 01       	movw	r22, r24
    17c6:	cd 01       	movw	r24, r26
    17c8:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <round>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	9c 01       	movw	r18, r24
    17d2:	ad 01       	movw	r20, r26
    17d4:	c7 01       	movw	r24, r14
    17d6:	b6 01       	movw	r22, r12
    17d8:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    17dc:	88 23       	and	r24, r24
    17de:	0c f4       	brge	.+2      	; 0x17e2 <__stack+0xf83>
    17e0:	ff cb       	rjmp	.-2050   	; 0xfe0 <__stack+0x781>
			_delay_ms(period);
			PORTA = 0x03;
			_delay_ms(period);
		}
	}
}
    17e2:	00 00       	nop
    17e4:	c0 53       	subi	r28, 0x30	; 48
    17e6:	df 4f       	sbci	r29, 0xFF	; 255
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	ff 90       	pop	r15
    17fc:	ef 90       	pop	r14
    17fe:	df 90       	pop	r13
    1800:	cf 90       	pop	r12
    1802:	08 95       	ret

00001804 <rotateStepper_2>:

void rotateStepper_2(int direction, float distance){
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	cc 5e       	subi	r28, 0xEC	; 236
    1812:	d1 09       	sbc	r29, r1
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	9e 01       	movw	r18, r28
    1820:	29 51       	subi	r18, 0x19	; 25
    1822:	3f 4f       	sbci	r19, 0xFF	; 255
    1824:	f9 01       	movw	r30, r18
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	ce 01       	movw	r24, r28
    182c:	87 51       	subi	r24, 0x17	; 23
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	fc 01       	movw	r30, r24
    1832:	40 83       	st	Z, r20
    1834:	51 83       	std	Z+1, r21	; 0x01
    1836:	62 83       	std	Z+2, r22	; 0x02
    1838:	73 83       	std	Z+3, r23	; 0x03
	// clockwise-1
	// Counterclockwise-0
	// 1 distance unit = 1 rotating

	int period;
	period = 10;
    183a:	8a e0       	ldi	r24, 0x0A	; 10
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
	if (direction == 1)
    1842:	ce 01       	movw	r24, r28
    1844:	89 51       	subi	r24, 0x19	; 25
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	fc 01       	movw	r30, r24
    184a:	80 81       	ld	r24, Z
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	09 f0       	breq	.+2      	; 0x1854 <rotateStepper_2+0x50>
    1852:	bf c7       	rjmp	.+3966   	; 0x27d2 <rotateStepper_2+0xfce>
	{
		/* Rotate  clockwise */
		for (int i = 0; i < 50; i++)
    1854:	1a 82       	std	Y+2, r1	; 0x02
    1856:	19 82       	std	Y+1, r1	; 0x01
    1858:	fe c6       	rjmp	.+3580   	; 0x2656 <rotateStepper_2+0xe52>
		{
			PORTA = 0x30;
    185a:	8b e3       	ldi	r24, 0x3B	; 59
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	20 e3       	ldi	r18, 0x30	; 48
    1860:	fc 01       	movw	r30, r24
    1862:	20 83       	st	Z, r18
			_delay_ms(period);
    1864:	8d 81       	ldd	r24, Y+5	; 0x05
    1866:	9e 81       	ldd	r25, Y+6	; 0x06
    1868:	09 2e       	mov	r0, r25
    186a:	00 0c       	add	r0, r0
    186c:	aa 0b       	sbc	r26, r26
    186e:	bb 0b       	sbc	r27, r27
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	8b 87       	std	Y+11, r24	; 0x0b
    187e:	9c 87       	std	Y+12, r25	; 0x0c
    1880:	ad 87       	std	Y+13, r26	; 0x0d
    1882:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1884:	8e 01       	movw	r16, r28
    1886:	09 56       	subi	r16, 0x69	; 105
    1888:	1f 4f       	sbci	r17, 0xFF	; 255
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	4a e7       	ldi	r20, 0x7A	; 122
    1890:	55 e4       	ldi	r21, 0x45	; 69
    1892:	6b 85       	ldd	r22, Y+11	; 0x0b
    1894:	7c 85       	ldd	r23, Y+12	; 0x0c
    1896:	8d 85       	ldd	r24, Y+13	; 0x0d
    1898:	9e 85       	ldd	r25, Y+14	; 0x0e
    189a:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	f8 01       	movw	r30, r16
    18a4:	80 83       	st	Z, r24
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	a2 83       	std	Z+2, r26	; 0x02
    18aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ac:	ce 01       	movw	r24, r28
    18ae:	89 56       	subi	r24, 0x69	; 105
    18b0:	9f 4f       	sbci	r25, 0xFF	; 255
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	fc 01       	movw	r30, r24
    18bc:	60 81       	ld	r22, Z
    18be:	71 81       	ldd	r23, Z+1	; 0x01
    18c0:	82 81       	ldd	r24, Z+2	; 0x02
    18c2:	93 81       	ldd	r25, Z+3	; 0x03
    18c4:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    18c8:	88 23       	and	r24, r24
    18ca:	4c f4       	brge	.+18     	; 0x18de <rotateStepper_2+0xda>
		__ticks = 1;
    18cc:	ce 01       	movw	r24, r28
    18ce:	85 56       	subi	r24, 0x65	; 101
    18d0:	9f 4f       	sbci	r25, 0xFF	; 255
    18d2:	21 e0       	ldi	r18, 0x01	; 1
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	fc 01       	movw	r30, r24
    18d8:	31 83       	std	Z+1, r19	; 0x01
    18da:	20 83       	st	Z, r18
    18dc:	69 c0       	rjmp	.+210    	; 0x19b0 <rotateStepper_2+0x1ac>
	else if (__tmp > 65535)
    18de:	ce 01       	movw	r24, r28
    18e0:	89 56       	subi	r24, 0x69	; 105
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	3f ef       	ldi	r19, 0xFF	; 255
    18e8:	4f e7       	ldi	r20, 0x7F	; 127
    18ea:	57 e4       	ldi	r21, 0x47	; 71
    18ec:	fc 01       	movw	r30, r24
    18ee:	60 81       	ld	r22, Z
    18f0:	71 81       	ldd	r23, Z+1	; 0x01
    18f2:	82 81       	ldd	r24, Z+2	; 0x02
    18f4:	93 81       	ldd	r25, Z+3	; 0x03
    18f6:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	0c f0       	brlt	.+2      	; 0x1900 <rotateStepper_2+0xfc>
    18fe:	46 c0       	rjmp	.+140    	; 0x198c <rotateStepper_2+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	6b 85       	ldd	r22, Y+11	; 0x0b
    190a:	7c 85       	ldd	r23, Y+12	; 0x0c
    190c:	8d 85       	ldd	r24, Y+13	; 0x0d
    190e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1910:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	8e 01       	movw	r16, r28
    191a:	05 56       	subi	r16, 0x65	; 101
    191c:	1f 4f       	sbci	r17, 0xFF	; 255
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	f8 01       	movw	r30, r16
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	80 83       	st	Z, r24
    1930:	24 c0       	rjmp	.+72     	; 0x197a <rotateStepper_2+0x176>
    1932:	ce 01       	movw	r24, r28
    1934:	83 56       	subi	r24, 0x63	; 99
    1936:	9f 4f       	sbci	r25, 0xFF	; 255
    1938:	20 e9       	ldi	r18, 0x90	; 144
    193a:	31 e0       	ldi	r19, 0x01	; 1
    193c:	fc 01       	movw	r30, r24
    193e:	31 83       	std	Z+1, r19	; 0x01
    1940:	20 83       	st	Z, r18
    1942:	ce 01       	movw	r24, r28
    1944:	83 56       	subi	r24, 0x63	; 99
    1946:	9f 4f       	sbci	r25, 0xFF	; 255
    1948:	fc 01       	movw	r30, r24
    194a:	80 81       	ld	r24, Z
    194c:	91 81       	ldd	r25, Z+1	; 0x01
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <rotateStepper_2+0x14a>
    1952:	9e 01       	movw	r18, r28
    1954:	23 56       	subi	r18, 0x63	; 99
    1956:	3f 4f       	sbci	r19, 0xFF	; 255
    1958:	f9 01       	movw	r30, r18
    195a:	91 83       	std	Z+1, r25	; 0x01
    195c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195e:	ce 01       	movw	r24, r28
    1960:	85 56       	subi	r24, 0x65	; 101
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	9e 01       	movw	r18, r28
    1966:	25 56       	subi	r18, 0x65	; 101
    1968:	3f 4f       	sbci	r19, 0xFF	; 255
    196a:	f9 01       	movw	r30, r18
    196c:	20 81       	ld	r18, Z
    196e:	31 81       	ldd	r19, Z+1	; 0x01
    1970:	21 50       	subi	r18, 0x01	; 1
    1972:	31 09       	sbc	r19, r1
    1974:	fc 01       	movw	r30, r24
    1976:	31 83       	std	Z+1, r19	; 0x01
    1978:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197a:	ce 01       	movw	r24, r28
    197c:	85 56       	subi	r24, 0x65	; 101
    197e:	9f 4f       	sbci	r25, 0xFF	; 255
    1980:	fc 01       	movw	r30, r24
    1982:	80 81       	ld	r24, Z
    1984:	91 81       	ldd	r25, Z+1	; 0x01
    1986:	89 2b       	or	r24, r25
    1988:	a1 f6       	brne	.-88     	; 0x1932 <rotateStepper_2+0x12e>
    198a:	2c c0       	rjmp	.+88     	; 0x19e4 <rotateStepper_2+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198c:	8e 01       	movw	r16, r28
    198e:	05 56       	subi	r16, 0x65	; 101
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	ce 01       	movw	r24, r28
    1994:	89 56       	subi	r24, 0x69	; 105
    1996:	9f 4f       	sbci	r25, 0xFF	; 255
    1998:	fc 01       	movw	r30, r24
    199a:	60 81       	ld	r22, Z
    199c:	71 81       	ldd	r23, Z+1	; 0x01
    199e:	82 81       	ldd	r24, Z+2	; 0x02
    19a0:	93 81       	ldd	r25, Z+3	; 0x03
    19a2:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	f8 01       	movw	r30, r16
    19ac:	91 83       	std	Z+1, r25	; 0x01
    19ae:	80 83       	st	Z, r24
    19b0:	ce 01       	movw	r24, r28
    19b2:	81 56       	subi	r24, 0x61	; 97
    19b4:	9f 4f       	sbci	r25, 0xFF	; 255
    19b6:	9e 01       	movw	r18, r28
    19b8:	25 56       	subi	r18, 0x65	; 101
    19ba:	3f 4f       	sbci	r19, 0xFF	; 255
    19bc:	f9 01       	movw	r30, r18
    19be:	20 81       	ld	r18, Z
    19c0:	31 81       	ldd	r19, Z+1	; 0x01
    19c2:	fc 01       	movw	r30, r24
    19c4:	31 83       	std	Z+1, r19	; 0x01
    19c6:	20 83       	st	Z, r18
    19c8:	ce 01       	movw	r24, r28
    19ca:	81 56       	subi	r24, 0x61	; 97
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255
    19ce:	fc 01       	movw	r30, r24
    19d0:	80 81       	ld	r24, Z
    19d2:	91 81       	ldd	r25, Z+1	; 0x01
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <rotateStepper_2+0x1d0>
    19d8:	9e 01       	movw	r18, r28
    19da:	21 56       	subi	r18, 0x61	; 97
    19dc:	3f 4f       	sbci	r19, 0xFF	; 255
    19de:	f9 01       	movw	r30, r18
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	80 83       	st	Z, r24
			PORTA = 0x20;
    19e4:	8b e3       	ldi	r24, 0x3B	; 59
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	20 e2       	ldi	r18, 0x20	; 32
    19ea:	fc 01       	movw	r30, r24
    19ec:	20 83       	st	Z, r18
			_delay_ms(period);
    19ee:	8d 81       	ldd	r24, Y+5	; 0x05
    19f0:	9e 81       	ldd	r25, Y+6	; 0x06
    19f2:	09 2e       	mov	r0, r25
    19f4:	00 0c       	add	r0, r0
    19f6:	aa 0b       	sbc	r26, r26
    19f8:	bb 0b       	sbc	r27, r27
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	8f 87       	std	Y+15, r24	; 0x0f
    1a08:	98 8b       	std	Y+16, r25	; 0x10
    1a0a:	a9 8b       	std	Y+17, r26	; 0x11
    1a0c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a0e:	8e 01       	movw	r16, r28
    1a10:	03 57       	subi	r16, 0x73	; 115
    1a12:	1f 4f       	sbci	r17, 0xFF	; 255
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4a e7       	ldi	r20, 0x7A	; 122
    1a1a:	55 e4       	ldi	r21, 0x45	; 69
    1a1c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a1e:	78 89       	ldd	r23, Y+16	; 0x10
    1a20:	89 89       	ldd	r24, Y+17	; 0x11
    1a22:	9a 89       	ldd	r25, Y+18	; 0x12
    1a24:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 83       	st	Z, r24
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	a2 83       	std	Z+2, r26	; 0x02
    1a34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a36:	ce 01       	movw	r24, r28
    1a38:	83 57       	subi	r24, 0x73	; 115
    1a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	40 e8       	ldi	r20, 0x80	; 128
    1a42:	5f e3       	ldi	r21, 0x3F	; 63
    1a44:	fc 01       	movw	r30, r24
    1a46:	60 81       	ld	r22, Z
    1a48:	71 81       	ldd	r23, Z+1	; 0x01
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	4c f4       	brge	.+18     	; 0x1a68 <rotateStepper_2+0x264>
		__ticks = 1;
    1a56:	ce 01       	movw	r24, r28
    1a58:	8f 56       	subi	r24, 0x6F	; 111
    1a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5c:	21 e0       	ldi	r18, 0x01	; 1
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	fc 01       	movw	r30, r24
    1a62:	31 83       	std	Z+1, r19	; 0x01
    1a64:	20 83       	st	Z, r18
    1a66:	69 c0       	rjmp	.+210    	; 0x1b3a <rotateStepper_2+0x336>
	else if (__tmp > 65535)
    1a68:	ce 01       	movw	r24, r28
    1a6a:	83 57       	subi	r24, 0x73	; 115
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	3f ef       	ldi	r19, 0xFF	; 255
    1a72:	4f e7       	ldi	r20, 0x7F	; 127
    1a74:	57 e4       	ldi	r21, 0x47	; 71
    1a76:	fc 01       	movw	r30, r24
    1a78:	60 81       	ld	r22, Z
    1a7a:	71 81       	ldd	r23, Z+1	; 0x01
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    1a84:	18 16       	cp	r1, r24
    1a86:	0c f0       	brlt	.+2      	; 0x1a8a <rotateStepper_2+0x286>
    1a88:	46 c0       	rjmp	.+140    	; 0x1b16 <rotateStepper_2+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e2       	ldi	r20, 0x20	; 32
    1a90:	51 e4       	ldi	r21, 0x41	; 65
    1a92:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a94:	78 89       	ldd	r23, Y+16	; 0x10
    1a96:	89 89       	ldd	r24, Y+17	; 0x11
    1a98:	9a 89       	ldd	r25, Y+18	; 0x12
    1a9a:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	8e 01       	movw	r16, r28
    1aa4:	0f 56       	subi	r16, 0x6F	; 111
    1aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	cd 01       	movw	r24, r26
    1aac:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	91 83       	std	Z+1, r25	; 0x01
    1ab8:	80 83       	st	Z, r24
    1aba:	24 c0       	rjmp	.+72     	; 0x1b04 <rotateStepper_2+0x300>
    1abc:	ce 01       	movw	r24, r28
    1abe:	8d 56       	subi	r24, 0x6D	; 109
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	20 e9       	ldi	r18, 0x90	; 144
    1ac4:	31 e0       	ldi	r19, 0x01	; 1
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	31 83       	std	Z+1, r19	; 0x01
    1aca:	20 83       	st	Z, r18
    1acc:	ce 01       	movw	r24, r28
    1ace:	8d 56       	subi	r24, 0x6D	; 109
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	80 81       	ld	r24, Z
    1ad6:	91 81       	ldd	r25, Z+1	; 0x01
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <rotateStepper_2+0x2d4>
    1adc:	9e 01       	movw	r18, r28
    1ade:	2d 56       	subi	r18, 0x6D	; 109
    1ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae2:	f9 01       	movw	r30, r18
    1ae4:	91 83       	std	Z+1, r25	; 0x01
    1ae6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae8:	ce 01       	movw	r24, r28
    1aea:	8f 56       	subi	r24, 0x6F	; 111
    1aec:	9f 4f       	sbci	r25, 0xFF	; 255
    1aee:	9e 01       	movw	r18, r28
    1af0:	2f 56       	subi	r18, 0x6F	; 111
    1af2:	3f 4f       	sbci	r19, 0xFF	; 255
    1af4:	f9 01       	movw	r30, r18
    1af6:	20 81       	ld	r18, Z
    1af8:	31 81       	ldd	r19, Z+1	; 0x01
    1afa:	21 50       	subi	r18, 0x01	; 1
    1afc:	31 09       	sbc	r19, r1
    1afe:	fc 01       	movw	r30, r24
    1b00:	31 83       	std	Z+1, r19	; 0x01
    1b02:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	ce 01       	movw	r24, r28
    1b06:	8f 56       	subi	r24, 0x6F	; 111
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	80 81       	ld	r24, Z
    1b0e:	91 81       	ldd	r25, Z+1	; 0x01
    1b10:	89 2b       	or	r24, r25
    1b12:	a1 f6       	brne	.-88     	; 0x1abc <rotateStepper_2+0x2b8>
    1b14:	2c c0       	rjmp	.+88     	; 0x1b6e <rotateStepper_2+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b16:	8e 01       	movw	r16, r28
    1b18:	0f 56       	subi	r16, 0x6F	; 111
    1b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	83 57       	subi	r24, 0x73	; 115
    1b20:	9f 4f       	sbci	r25, 0xFF	; 255
    1b22:	fc 01       	movw	r30, r24
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	f8 01       	movw	r30, r16
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	80 83       	st	Z, r24
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	8b 56       	subi	r24, 0x6B	; 107
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	9e 01       	movw	r18, r28
    1b42:	2f 56       	subi	r18, 0x6F	; 111
    1b44:	3f 4f       	sbci	r19, 0xFF	; 255
    1b46:	f9 01       	movw	r30, r18
    1b48:	20 81       	ld	r18, Z
    1b4a:	31 81       	ldd	r19, Z+1	; 0x01
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	31 83       	std	Z+1, r19	; 0x01
    1b50:	20 83       	st	Z, r18
    1b52:	ce 01       	movw	r24, r28
    1b54:	8b 56       	subi	r24, 0x6B	; 107
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	fc 01       	movw	r30, r24
    1b5a:	80 81       	ld	r24, Z
    1b5c:	91 81       	ldd	r25, Z+1	; 0x01
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <rotateStepper_2+0x35a>
    1b62:	9e 01       	movw	r18, r28
    1b64:	2b 56       	subi	r18, 0x6B	; 107
    1b66:	3f 4f       	sbci	r19, 0xFF	; 255
    1b68:	f9 01       	movw	r30, r18
    1b6a:	91 83       	std	Z+1, r25	; 0x01
    1b6c:	80 83       	st	Z, r24
			PORTA = 0x60;
    1b6e:	8b e3       	ldi	r24, 0x3B	; 59
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	20 e6       	ldi	r18, 0x60	; 96
    1b74:	fc 01       	movw	r30, r24
    1b76:	20 83       	st	Z, r18
			_delay_ms(period);
    1b78:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7c:	09 2e       	mov	r0, r25
    1b7e:	00 0c       	add	r0, r0
    1b80:	aa 0b       	sbc	r26, r26
    1b82:	bb 0b       	sbc	r27, r27
    1b84:	bc 01       	movw	r22, r24
    1b86:	cd 01       	movw	r24, r26
    1b88:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	8b 8b       	std	Y+19, r24	; 0x13
    1b92:	9c 8b       	std	Y+20, r25	; 0x14
    1b94:	ad 8b       	std	Y+21, r26	; 0x15
    1b96:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b98:	8e 01       	movw	r16, r28
    1b9a:	0d 57       	subi	r16, 0x7D	; 125
    1b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	4a e7       	ldi	r20, 0x7A	; 122
    1ba4:	55 e4       	ldi	r21, 0x45	; 69
    1ba6:	6b 89       	ldd	r22, Y+19	; 0x13
    1ba8:	7c 89       	ldd	r23, Y+20	; 0x14
    1baa:	8d 89       	ldd	r24, Y+21	; 0x15
    1bac:	9e 89       	ldd	r25, Y+22	; 0x16
    1bae:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	80 83       	st	Z, r24
    1bba:	91 83       	std	Z+1, r25	; 0x01
    1bbc:	a2 83       	std	Z+2, r26	; 0x02
    1bbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	8d 57       	subi	r24, 0x7D	; 125
    1bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e8       	ldi	r20, 0x80	; 128
    1bcc:	5f e3       	ldi	r21, 0x3F	; 63
    1bce:	fc 01       	movw	r30, r24
    1bd0:	60 81       	ld	r22, Z
    1bd2:	71 81       	ldd	r23, Z+1	; 0x01
    1bd4:	82 81       	ldd	r24, Z+2	; 0x02
    1bd6:	93 81       	ldd	r25, Z+3	; 0x03
    1bd8:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    1bdc:	88 23       	and	r24, r24
    1bde:	4c f4       	brge	.+18     	; 0x1bf2 <rotateStepper_2+0x3ee>
		__ticks = 1;
    1be0:	ce 01       	movw	r24, r28
    1be2:	89 57       	subi	r24, 0x79	; 121
    1be4:	9f 4f       	sbci	r25, 0xFF	; 255
    1be6:	21 e0       	ldi	r18, 0x01	; 1
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	fc 01       	movw	r30, r24
    1bec:	31 83       	std	Z+1, r19	; 0x01
    1bee:	20 83       	st	Z, r18
    1bf0:	69 c0       	rjmp	.+210    	; 0x1cc4 <rotateStepper_2+0x4c0>
	else if (__tmp > 65535)
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	8d 57       	subi	r24, 0x7D	; 125
    1bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	3f ef       	ldi	r19, 0xFF	; 255
    1bfc:	4f e7       	ldi	r20, 0x7F	; 127
    1bfe:	57 e4       	ldi	r21, 0x47	; 71
    1c00:	fc 01       	movw	r30, r24
    1c02:	60 81       	ld	r22, Z
    1c04:	71 81       	ldd	r23, Z+1	; 0x01
    1c06:	82 81       	ldd	r24, Z+2	; 0x02
    1c08:	93 81       	ldd	r25, Z+3	; 0x03
    1c0a:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	0c f0       	brlt	.+2      	; 0x1c14 <rotateStepper_2+0x410>
    1c12:	46 c0       	rjmp	.+140    	; 0x1ca0 <rotateStepper_2+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e2       	ldi	r20, 0x20	; 32
    1c1a:	51 e4       	ldi	r21, 0x41	; 65
    1c1c:	6b 89       	ldd	r22, Y+19	; 0x13
    1c1e:	7c 89       	ldd	r23, Y+20	; 0x14
    1c20:	8d 89       	ldd	r24, Y+21	; 0x15
    1c22:	9e 89       	ldd	r25, Y+22	; 0x16
    1c24:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	8e 01       	movw	r16, r28
    1c2e:	09 57       	subi	r16, 0x79	; 121
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
    1c32:	bc 01       	movw	r22, r24
    1c34:	cd 01       	movw	r24, r26
    1c36:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	f8 01       	movw	r30, r16
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	80 83       	st	Z, r24
    1c44:	24 c0       	rjmp	.+72     	; 0x1c8e <rotateStepper_2+0x48a>
    1c46:	ce 01       	movw	r24, r28
    1c48:	87 57       	subi	r24, 0x77	; 119
    1c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4c:	20 e9       	ldi	r18, 0x90	; 144
    1c4e:	31 e0       	ldi	r19, 0x01	; 1
    1c50:	fc 01       	movw	r30, r24
    1c52:	31 83       	std	Z+1, r19	; 0x01
    1c54:	20 83       	st	Z, r18
    1c56:	ce 01       	movw	r24, r28
    1c58:	87 57       	subi	r24, 0x77	; 119
    1c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	80 81       	ld	r24, Z
    1c60:	91 81       	ldd	r25, Z+1	; 0x01
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <rotateStepper_2+0x45e>
    1c66:	9e 01       	movw	r18, r28
    1c68:	27 57       	subi	r18, 0x77	; 119
    1c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6c:	f9 01       	movw	r30, r18
    1c6e:	91 83       	std	Z+1, r25	; 0x01
    1c70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c72:	ce 01       	movw	r24, r28
    1c74:	89 57       	subi	r24, 0x79	; 121
    1c76:	9f 4f       	sbci	r25, 0xFF	; 255
    1c78:	9e 01       	movw	r18, r28
    1c7a:	29 57       	subi	r18, 0x79	; 121
    1c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7e:	f9 01       	movw	r30, r18
    1c80:	20 81       	ld	r18, Z
    1c82:	31 81       	ldd	r19, Z+1	; 0x01
    1c84:	21 50       	subi	r18, 0x01	; 1
    1c86:	31 09       	sbc	r19, r1
    1c88:	fc 01       	movw	r30, r24
    1c8a:	31 83       	std	Z+1, r19	; 0x01
    1c8c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8e:	ce 01       	movw	r24, r28
    1c90:	89 57       	subi	r24, 0x79	; 121
    1c92:	9f 4f       	sbci	r25, 0xFF	; 255
    1c94:	fc 01       	movw	r30, r24
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	89 2b       	or	r24, r25
    1c9c:	a1 f6       	brne	.-88     	; 0x1c46 <rotateStepper_2+0x442>
    1c9e:	2c c0       	rjmp	.+88     	; 0x1cf8 <rotateStepper_2+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca0:	8e 01       	movw	r16, r28
    1ca2:	09 57       	subi	r16, 0x79	; 121
    1ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	8d 57       	subi	r24, 0x7D	; 125
    1caa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cac:	fc 01       	movw	r30, r24
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	85 57       	subi	r24, 0x75	; 117
    1cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cca:	9e 01       	movw	r18, r28
    1ccc:	29 57       	subi	r18, 0x79	; 121
    1cce:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd0:	f9 01       	movw	r30, r18
    1cd2:	20 81       	ld	r18, Z
    1cd4:	31 81       	ldd	r19, Z+1	; 0x01
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	31 83       	std	Z+1, r19	; 0x01
    1cda:	20 83       	st	Z, r18
    1cdc:	ce 01       	movw	r24, r28
    1cde:	85 57       	subi	r24, 0x75	; 117
    1ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	80 81       	ld	r24, Z
    1ce6:	91 81       	ldd	r25, Z+1	; 0x01
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <rotateStepper_2+0x4e4>
    1cec:	9e 01       	movw	r18, r28
    1cee:	25 57       	subi	r18, 0x75	; 117
    1cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf2:	f9 01       	movw	r30, r18
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	80 83       	st	Z, r24
			PORTA = 0x40;
    1cf8:	8b e3       	ldi	r24, 0x3B	; 59
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	20 e4       	ldi	r18, 0x40	; 64
    1cfe:	fc 01       	movw	r30, r24
    1d00:	20 83       	st	Z, r18
			_delay_ms(period);
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	9e 81       	ldd	r25, Y+6	; 0x06
    1d06:	09 2e       	mov	r0, r25
    1d08:	00 0c       	add	r0, r0
    1d0a:	aa 0b       	sbc	r26, r26
    1d0c:	bb 0b       	sbc	r27, r27
    1d0e:	bc 01       	movw	r22, r24
    1d10:	cd 01       	movw	r24, r26
    1d12:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8f 8b       	std	Y+23, r24	; 0x17
    1d1c:	98 8f       	std	Y+24, r25	; 0x18
    1d1e:	a9 8f       	std	Y+25, r26	; 0x19
    1d20:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d22:	8e 01       	movw	r16, r28
    1d24:	07 58       	subi	r16, 0x87	; 135
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	4a e7       	ldi	r20, 0x7A	; 122
    1d2e:	55 e4       	ldi	r21, 0x45	; 69
    1d30:	6f 89       	ldd	r22, Y+23	; 0x17
    1d32:	78 8d       	ldd	r23, Y+24	; 0x18
    1d34:	89 8d       	ldd	r24, Y+25	; 0x19
    1d36:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d38:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	f8 01       	movw	r30, r16
    1d42:	80 83       	st	Z, r24
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	a2 83       	std	Z+2, r26	; 0x02
    1d48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	87 58       	subi	r24, 0x87	; 135
    1d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e8       	ldi	r20, 0x80	; 128
    1d56:	5f e3       	ldi	r21, 0x3F	; 63
    1d58:	fc 01       	movw	r30, r24
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    1d66:	88 23       	and	r24, r24
    1d68:	4c f4       	brge	.+18     	; 0x1d7c <rotateStepper_2+0x578>
		__ticks = 1;
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	83 58       	subi	r24, 0x83	; 131
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	21 e0       	ldi	r18, 0x01	; 1
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	fc 01       	movw	r30, r24
    1d76:	31 83       	std	Z+1, r19	; 0x01
    1d78:	20 83       	st	Z, r18
    1d7a:	69 c0       	rjmp	.+210    	; 0x1e4e <rotateStepper_2+0x64a>
	else if (__tmp > 65535)
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	87 58       	subi	r24, 0x87	; 135
    1d80:	9f 4f       	sbci	r25, 0xFF	; 255
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	3f ef       	ldi	r19, 0xFF	; 255
    1d86:	4f e7       	ldi	r20, 0x7F	; 127
    1d88:	57 e4       	ldi	r21, 0x47	; 71
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	60 81       	ld	r22, Z
    1d8e:	71 81       	ldd	r23, Z+1	; 0x01
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    1d98:	18 16       	cp	r1, r24
    1d9a:	0c f0       	brlt	.+2      	; 0x1d9e <rotateStepper_2+0x59a>
    1d9c:	46 c0       	rjmp	.+140    	; 0x1e2a <rotateStepper_2+0x626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e2       	ldi	r20, 0x20	; 32
    1da4:	51 e4       	ldi	r21, 0x41	; 65
    1da6:	6f 89       	ldd	r22, Y+23	; 0x17
    1da8:	78 8d       	ldd	r23, Y+24	; 0x18
    1daa:	89 8d       	ldd	r24, Y+25	; 0x19
    1dac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1dae:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	8e 01       	movw	r16, r28
    1db8:	03 58       	subi	r16, 0x83	; 131
    1dba:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbc:	bc 01       	movw	r22, r24
    1dbe:	cd 01       	movw	r24, r26
    1dc0:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	f8 01       	movw	r30, r16
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	80 83       	st	Z, r24
    1dce:	24 c0       	rjmp	.+72     	; 0x1e18 <rotateStepper_2+0x614>
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	81 58       	subi	r24, 0x81	; 129
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	20 e9       	ldi	r18, 0x90	; 144
    1dd8:	31 e0       	ldi	r19, 0x01	; 1
    1dda:	fc 01       	movw	r30, r24
    1ddc:	31 83       	std	Z+1, r19	; 0x01
    1dde:	20 83       	st	Z, r18
    1de0:	ce 01       	movw	r24, r28
    1de2:	81 58       	subi	r24, 0x81	; 129
    1de4:	9f 4f       	sbci	r25, 0xFF	; 255
    1de6:	fc 01       	movw	r30, r24
    1de8:	80 81       	ld	r24, Z
    1dea:	91 81       	ldd	r25, Z+1	; 0x01
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <rotateStepper_2+0x5e8>
    1df0:	9e 01       	movw	r18, r28
    1df2:	21 58       	subi	r18, 0x81	; 129
    1df4:	3f 4f       	sbci	r19, 0xFF	; 255
    1df6:	f9 01       	movw	r30, r18
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	ce 01       	movw	r24, r28
    1dfe:	83 58       	subi	r24, 0x83	; 131
    1e00:	9f 4f       	sbci	r25, 0xFF	; 255
    1e02:	9e 01       	movw	r18, r28
    1e04:	23 58       	subi	r18, 0x83	; 131
    1e06:	3f 4f       	sbci	r19, 0xFF	; 255
    1e08:	f9 01       	movw	r30, r18
    1e0a:	20 81       	ld	r18, Z
    1e0c:	31 81       	ldd	r19, Z+1	; 0x01
    1e0e:	21 50       	subi	r18, 0x01	; 1
    1e10:	31 09       	sbc	r19, r1
    1e12:	fc 01       	movw	r30, r24
    1e14:	31 83       	std	Z+1, r19	; 0x01
    1e16:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e18:	ce 01       	movw	r24, r28
    1e1a:	83 58       	subi	r24, 0x83	; 131
    1e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1e:	fc 01       	movw	r30, r24
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	89 2b       	or	r24, r25
    1e26:	a1 f6       	brne	.-88     	; 0x1dd0 <rotateStepper_2+0x5cc>
    1e28:	2c c0       	rjmp	.+88     	; 0x1e82 <rotateStepper_2+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2a:	8e 01       	movw	r16, r28
    1e2c:	03 58       	subi	r16, 0x83	; 131
    1e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e30:	ce 01       	movw	r24, r28
    1e32:	87 58       	subi	r24, 0x87	; 135
    1e34:	9f 4f       	sbci	r25, 0xFF	; 255
    1e36:	fc 01       	movw	r30, r24
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	f8 01       	movw	r30, r16
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	80 83       	st	Z, r24
    1e4e:	ce 01       	movw	r24, r28
    1e50:	8f 57       	subi	r24, 0x7F	; 127
    1e52:	9f 4f       	sbci	r25, 0xFF	; 255
    1e54:	9e 01       	movw	r18, r28
    1e56:	23 58       	subi	r18, 0x83	; 131
    1e58:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5a:	f9 01       	movw	r30, r18
    1e5c:	20 81       	ld	r18, Z
    1e5e:	31 81       	ldd	r19, Z+1	; 0x01
    1e60:	fc 01       	movw	r30, r24
    1e62:	31 83       	std	Z+1, r19	; 0x01
    1e64:	20 83       	st	Z, r18
    1e66:	ce 01       	movw	r24, r28
    1e68:	8f 57       	subi	r24, 0x7F	; 127
    1e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	80 81       	ld	r24, Z
    1e70:	91 81       	ldd	r25, Z+1	; 0x01
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <rotateStepper_2+0x66e>
    1e76:	9e 01       	movw	r18, r28
    1e78:	2f 57       	subi	r18, 0x7F	; 127
    1e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7c:	f9 01       	movw	r30, r18
    1e7e:	91 83       	std	Z+1, r25	; 0x01
    1e80:	80 83       	st	Z, r24
			PORTA = 0xc0;
    1e82:	8b e3       	ldi	r24, 0x3B	; 59
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	20 ec       	ldi	r18, 0xC0	; 192
    1e88:	fc 01       	movw	r30, r24
    1e8a:	20 83       	st	Z, r18
			_delay_ms(period);
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	09 2e       	mov	r0, r25
    1e92:	00 0c       	add	r0, r0
    1e94:	aa 0b       	sbc	r26, r26
    1e96:	bb 0b       	sbc	r27, r27
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	8b 8f       	std	Y+27, r24	; 0x1b
    1ea6:	9c 8f       	std	Y+28, r25	; 0x1c
    1ea8:	ad 8f       	std	Y+29, r26	; 0x1d
    1eaa:	be 8f       	std	Y+30, r27	; 0x1e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1eac:	8e 01       	movw	r16, r28
    1eae:	01 59       	subi	r16, 0x91	; 145
    1eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	4a e7       	ldi	r20, 0x7A	; 122
    1eb8:	55 e4       	ldi	r21, 0x45	; 69
    1eba:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1ebc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1ebe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ec0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ec2:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	f8 01       	movw	r30, r16
    1ecc:	80 83       	st	Z, r24
    1ece:	91 83       	std	Z+1, r25	; 0x01
    1ed0:	a2 83       	std	Z+2, r26	; 0x02
    1ed2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	81 59       	subi	r24, 0x91	; 145
    1ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e8       	ldi	r20, 0x80	; 128
    1ee0:	5f e3       	ldi	r21, 0x3F	; 63
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	60 81       	ld	r22, Z
    1ee6:	71 81       	ldd	r23, Z+1	; 0x01
    1ee8:	82 81       	ldd	r24, Z+2	; 0x02
    1eea:	93 81       	ldd	r25, Z+3	; 0x03
    1eec:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	4c f4       	brge	.+18     	; 0x1f06 <rotateStepper_2+0x702>
		__ticks = 1;
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	8d 58       	subi	r24, 0x8D	; 141
    1ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    1efa:	21 e0       	ldi	r18, 0x01	; 1
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	fc 01       	movw	r30, r24
    1f00:	31 83       	std	Z+1, r19	; 0x01
    1f02:	20 83       	st	Z, r18
    1f04:	69 c0       	rjmp	.+210    	; 0x1fd8 <rotateStepper_2+0x7d4>
	else if (__tmp > 65535)
    1f06:	ce 01       	movw	r24, r28
    1f08:	81 59       	subi	r24, 0x91	; 145
    1f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	3f ef       	ldi	r19, 0xFF	; 255
    1f10:	4f e7       	ldi	r20, 0x7F	; 127
    1f12:	57 e4       	ldi	r21, 0x47	; 71
    1f14:	fc 01       	movw	r30, r24
    1f16:	60 81       	ld	r22, Z
    1f18:	71 81       	ldd	r23, Z+1	; 0x01
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    1f22:	18 16       	cp	r1, r24
    1f24:	0c f0       	brlt	.+2      	; 0x1f28 <rotateStepper_2+0x724>
    1f26:	46 c0       	rjmp	.+140    	; 0x1fb4 <rotateStepper_2+0x7b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e2       	ldi	r20, 0x20	; 32
    1f2e:	51 e4       	ldi	r21, 0x41	; 65
    1f30:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1f32:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1f34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f38:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	8e 01       	movw	r16, r28
    1f42:	0d 58       	subi	r16, 0x8D	; 141
    1f44:	1f 4f       	sbci	r17, 0xFF	; 255
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	f8 01       	movw	r30, r16
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	80 83       	st	Z, r24
    1f58:	24 c0       	rjmp	.+72     	; 0x1fa2 <rotateStepper_2+0x79e>
    1f5a:	ce 01       	movw	r24, r28
    1f5c:	8b 58       	subi	r24, 0x8B	; 139
    1f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f60:	20 e9       	ldi	r18, 0x90	; 144
    1f62:	31 e0       	ldi	r19, 0x01	; 1
    1f64:	fc 01       	movw	r30, r24
    1f66:	31 83       	std	Z+1, r19	; 0x01
    1f68:	20 83       	st	Z, r18
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	8b 58       	subi	r24, 0x8B	; 139
    1f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f70:	fc 01       	movw	r30, r24
    1f72:	80 81       	ld	r24, Z
    1f74:	91 81       	ldd	r25, Z+1	; 0x01
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <rotateStepper_2+0x772>
    1f7a:	9e 01       	movw	r18, r28
    1f7c:	2b 58       	subi	r18, 0x8B	; 139
    1f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f80:	f9 01       	movw	r30, r18
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f86:	ce 01       	movw	r24, r28
    1f88:	8d 58       	subi	r24, 0x8D	; 141
    1f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8c:	9e 01       	movw	r18, r28
    1f8e:	2d 58       	subi	r18, 0x8D	; 141
    1f90:	3f 4f       	sbci	r19, 0xFF	; 255
    1f92:	f9 01       	movw	r30, r18
    1f94:	20 81       	ld	r18, Z
    1f96:	31 81       	ldd	r19, Z+1	; 0x01
    1f98:	21 50       	subi	r18, 0x01	; 1
    1f9a:	31 09       	sbc	r19, r1
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	31 83       	std	Z+1, r19	; 0x01
    1fa0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	8d 58       	subi	r24, 0x8D	; 141
    1fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa8:	fc 01       	movw	r30, r24
    1faa:	80 81       	ld	r24, Z
    1fac:	91 81       	ldd	r25, Z+1	; 0x01
    1fae:	89 2b       	or	r24, r25
    1fb0:	a1 f6       	brne	.-88     	; 0x1f5a <rotateStepper_2+0x756>
    1fb2:	2c c0       	rjmp	.+88     	; 0x200c <rotateStepper_2+0x808>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb4:	8e 01       	movw	r16, r28
    1fb6:	0d 58       	subi	r16, 0x8D	; 141
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	ce 01       	movw	r24, r28
    1fbc:	81 59       	subi	r24, 0x91	; 145
    1fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	60 81       	ld	r22, Z
    1fc4:	71 81       	ldd	r23, Z+1	; 0x01
    1fc6:	82 81       	ldd	r24, Z+2	; 0x02
    1fc8:	93 81       	ldd	r25, Z+3	; 0x03
    1fca:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	f8 01       	movw	r30, r16
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
    1fd8:	ce 01       	movw	r24, r28
    1fda:	89 58       	subi	r24, 0x89	; 137
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	9e 01       	movw	r18, r28
    1fe0:	2d 58       	subi	r18, 0x8D	; 141
    1fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe4:	f9 01       	movw	r30, r18
    1fe6:	20 81       	ld	r18, Z
    1fe8:	31 81       	ldd	r19, Z+1	; 0x01
    1fea:	fc 01       	movw	r30, r24
    1fec:	31 83       	std	Z+1, r19	; 0x01
    1fee:	20 83       	st	Z, r18
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	89 58       	subi	r24, 0x89	; 137
    1ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	80 81       	ld	r24, Z
    1ffa:	91 81       	ldd	r25, Z+1	; 0x01
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <rotateStepper_2+0x7f8>
    2000:	9e 01       	movw	r18, r28
    2002:	29 58       	subi	r18, 0x89	; 137
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	f9 01       	movw	r30, r18
    2008:	91 83       	std	Z+1, r25	; 0x01
    200a:	80 83       	st	Z, r24
			PORTA = 0x80;
    200c:	8b e3       	ldi	r24, 0x3B	; 59
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	20 e8       	ldi	r18, 0x80	; 128
    2012:	fc 01       	movw	r30, r24
    2014:	20 83       	st	Z, r18
			_delay_ms(period);
    2016:	8d 81       	ldd	r24, Y+5	; 0x05
    2018:	9e 81       	ldd	r25, Y+6	; 0x06
    201a:	09 2e       	mov	r0, r25
    201c:	00 0c       	add	r0, r0
    201e:	aa 0b       	sbc	r26, r26
    2020:	bb 0b       	sbc	r27, r27
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	8f 8f       	std	Y+31, r24	; 0x1f
    2030:	98 a3       	std	Y+32, r25	; 0x20
    2032:	a9 a3       	std	Y+33, r26	; 0x21
    2034:	ba a3       	std	Y+34, r27	; 0x22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2036:	8e 01       	movw	r16, r28
    2038:	0b 59       	subi	r16, 0x9B	; 155
    203a:	1f 4f       	sbci	r17, 0xFF	; 255
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a e7       	ldi	r20, 0x7A	; 122
    2042:	55 e4       	ldi	r21, 0x45	; 69
    2044:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2046:	78 a1       	ldd	r23, Y+32	; 0x20
    2048:	89 a1       	ldd	r24, Y+33	; 0x21
    204a:	9a a1       	ldd	r25, Y+34	; 0x22
    204c:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	f8 01       	movw	r30, r16
    2056:	80 83       	st	Z, r24
    2058:	91 83       	std	Z+1, r25	; 0x01
    205a:	a2 83       	std	Z+2, r26	; 0x02
    205c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    205e:	ce 01       	movw	r24, r28
    2060:	8b 59       	subi	r24, 0x9B	; 155
    2062:	9f 4f       	sbci	r25, 0xFF	; 255
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e8       	ldi	r20, 0x80	; 128
    206a:	5f e3       	ldi	r21, 0x3F	; 63
    206c:	fc 01       	movw	r30, r24
    206e:	60 81       	ld	r22, Z
    2070:	71 81       	ldd	r23, Z+1	; 0x01
    2072:	82 81       	ldd	r24, Z+2	; 0x02
    2074:	93 81       	ldd	r25, Z+3	; 0x03
    2076:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    207a:	88 23       	and	r24, r24
    207c:	4c f4       	brge	.+18     	; 0x2090 <rotateStepper_2+0x88c>
		__ticks = 1;
    207e:	ce 01       	movw	r24, r28
    2080:	87 59       	subi	r24, 0x97	; 151
    2082:	9f 4f       	sbci	r25, 0xFF	; 255
    2084:	21 e0       	ldi	r18, 0x01	; 1
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	fc 01       	movw	r30, r24
    208a:	31 83       	std	Z+1, r19	; 0x01
    208c:	20 83       	st	Z, r18
    208e:	69 c0       	rjmp	.+210    	; 0x2162 <rotateStepper_2+0x95e>
	else if (__tmp > 65535)
    2090:	ce 01       	movw	r24, r28
    2092:	8b 59       	subi	r24, 0x9B	; 155
    2094:	9f 4f       	sbci	r25, 0xFF	; 255
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	3f ef       	ldi	r19, 0xFF	; 255
    209a:	4f e7       	ldi	r20, 0x7F	; 127
    209c:	57 e4       	ldi	r21, 0x47	; 71
    209e:	fc 01       	movw	r30, r24
    20a0:	60 81       	ld	r22, Z
    20a2:	71 81       	ldd	r23, Z+1	; 0x01
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	93 81       	ldd	r25, Z+3	; 0x03
    20a8:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    20ac:	18 16       	cp	r1, r24
    20ae:	0c f0       	brlt	.+2      	; 0x20b2 <rotateStepper_2+0x8ae>
    20b0:	46 c0       	rjmp	.+140    	; 0x213e <rotateStepper_2+0x93a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    20bc:	78 a1       	ldd	r23, Y+32	; 0x20
    20be:	89 a1       	ldd	r24, Y+33	; 0x21
    20c0:	9a a1       	ldd	r25, Y+34	; 0x22
    20c2:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	8e 01       	movw	r16, r28
    20cc:	07 59       	subi	r16, 0x97	; 151
    20ce:	1f 4f       	sbci	r17, 0xFF	; 255
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	f8 01       	movw	r30, r16
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	80 83       	st	Z, r24
    20e2:	24 c0       	rjmp	.+72     	; 0x212c <rotateStepper_2+0x928>
    20e4:	ce 01       	movw	r24, r28
    20e6:	85 59       	subi	r24, 0x95	; 149
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	20 e9       	ldi	r18, 0x90	; 144
    20ec:	31 e0       	ldi	r19, 0x01	; 1
    20ee:	fc 01       	movw	r30, r24
    20f0:	31 83       	std	Z+1, r19	; 0x01
    20f2:	20 83       	st	Z, r18
    20f4:	ce 01       	movw	r24, r28
    20f6:	85 59       	subi	r24, 0x95	; 149
    20f8:	9f 4f       	sbci	r25, 0xFF	; 255
    20fa:	fc 01       	movw	r30, r24
    20fc:	80 81       	ld	r24, Z
    20fe:	91 81       	ldd	r25, Z+1	; 0x01
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <rotateStepper_2+0x8fc>
    2104:	9e 01       	movw	r18, r28
    2106:	25 59       	subi	r18, 0x95	; 149
    2108:	3f 4f       	sbci	r19, 0xFF	; 255
    210a:	f9 01       	movw	r30, r18
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2110:	ce 01       	movw	r24, r28
    2112:	87 59       	subi	r24, 0x97	; 151
    2114:	9f 4f       	sbci	r25, 0xFF	; 255
    2116:	9e 01       	movw	r18, r28
    2118:	27 59       	subi	r18, 0x97	; 151
    211a:	3f 4f       	sbci	r19, 0xFF	; 255
    211c:	f9 01       	movw	r30, r18
    211e:	20 81       	ld	r18, Z
    2120:	31 81       	ldd	r19, Z+1	; 0x01
    2122:	21 50       	subi	r18, 0x01	; 1
    2124:	31 09       	sbc	r19, r1
    2126:	fc 01       	movw	r30, r24
    2128:	31 83       	std	Z+1, r19	; 0x01
    212a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212c:	ce 01       	movw	r24, r28
    212e:	87 59       	subi	r24, 0x97	; 151
    2130:	9f 4f       	sbci	r25, 0xFF	; 255
    2132:	fc 01       	movw	r30, r24
    2134:	80 81       	ld	r24, Z
    2136:	91 81       	ldd	r25, Z+1	; 0x01
    2138:	89 2b       	or	r24, r25
    213a:	a1 f6       	brne	.-88     	; 0x20e4 <rotateStepper_2+0x8e0>
    213c:	2c c0       	rjmp	.+88     	; 0x2196 <rotateStepper_2+0x992>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	8e 01       	movw	r16, r28
    2140:	07 59       	subi	r16, 0x97	; 151
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	ce 01       	movw	r24, r28
    2146:	8b 59       	subi	r24, 0x9B	; 155
    2148:	9f 4f       	sbci	r25, 0xFF	; 255
    214a:	fc 01       	movw	r30, r24
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	f8 01       	movw	r30, r16
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	80 83       	st	Z, r24
    2162:	ce 01       	movw	r24, r28
    2164:	83 59       	subi	r24, 0x93	; 147
    2166:	9f 4f       	sbci	r25, 0xFF	; 255
    2168:	9e 01       	movw	r18, r28
    216a:	27 59       	subi	r18, 0x97	; 151
    216c:	3f 4f       	sbci	r19, 0xFF	; 255
    216e:	f9 01       	movw	r30, r18
    2170:	20 81       	ld	r18, Z
    2172:	31 81       	ldd	r19, Z+1	; 0x01
    2174:	fc 01       	movw	r30, r24
    2176:	31 83       	std	Z+1, r19	; 0x01
    2178:	20 83       	st	Z, r18
    217a:	ce 01       	movw	r24, r28
    217c:	83 59       	subi	r24, 0x93	; 147
    217e:	9f 4f       	sbci	r25, 0xFF	; 255
    2180:	fc 01       	movw	r30, r24
    2182:	80 81       	ld	r24, Z
    2184:	91 81       	ldd	r25, Z+1	; 0x01
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <rotateStepper_2+0x982>
    218a:	9e 01       	movw	r18, r28
    218c:	23 59       	subi	r18, 0x93	; 147
    218e:	3f 4f       	sbci	r19, 0xFF	; 255
    2190:	f9 01       	movw	r30, r18
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	80 83       	st	Z, r24
			PORTA = 0x90;
    2196:	8b e3       	ldi	r24, 0x3B	; 59
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	20 e9       	ldi	r18, 0x90	; 144
    219c:	fc 01       	movw	r30, r24
    219e:	20 83       	st	Z, r18
			_delay_ms(period);
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	9e 81       	ldd	r25, Y+6	; 0x06
    21a4:	09 2e       	mov	r0, r25
    21a6:	00 0c       	add	r0, r0
    21a8:	aa 0b       	sbc	r26, r26
    21aa:	bb 0b       	sbc	r27, r27
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	8b a3       	std	Y+35, r24	; 0x23
    21ba:	9c a3       	std	Y+36, r25	; 0x24
    21bc:	ad a3       	std	Y+37, r26	; 0x25
    21be:	be a3       	std	Y+38, r27	; 0x26

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21c0:	8e 01       	movw	r16, r28
    21c2:	05 5a       	subi	r16, 0xA5	; 165
    21c4:	1f 4f       	sbci	r17, 0xFF	; 255
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	4a e7       	ldi	r20, 0x7A	; 122
    21cc:	55 e4       	ldi	r21, 0x45	; 69
    21ce:	6b a1       	ldd	r22, Y+35	; 0x23
    21d0:	7c a1       	ldd	r23, Y+36	; 0x24
    21d2:	8d a1       	ldd	r24, Y+37	; 0x25
    21d4:	9e a1       	ldd	r25, Y+38	; 0x26
    21d6:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	f8 01       	movw	r30, r16
    21e0:	80 83       	st	Z, r24
    21e2:	91 83       	std	Z+1, r25	; 0x01
    21e4:	a2 83       	std	Z+2, r26	; 0x02
    21e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21e8:	ce 01       	movw	r24, r28
    21ea:	85 5a       	subi	r24, 0xA5	; 165
    21ec:	9f 4f       	sbci	r25, 0xFF	; 255
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e8       	ldi	r20, 0x80	; 128
    21f4:	5f e3       	ldi	r21, 0x3F	; 63
    21f6:	fc 01       	movw	r30, r24
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    2204:	88 23       	and	r24, r24
    2206:	4c f4       	brge	.+18     	; 0x221a <rotateStepper_2+0xa16>
		__ticks = 1;
    2208:	ce 01       	movw	r24, r28
    220a:	81 5a       	subi	r24, 0xA1	; 161
    220c:	9f 4f       	sbci	r25, 0xFF	; 255
    220e:	21 e0       	ldi	r18, 0x01	; 1
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	fc 01       	movw	r30, r24
    2214:	31 83       	std	Z+1, r19	; 0x01
    2216:	20 83       	st	Z, r18
    2218:	69 c0       	rjmp	.+210    	; 0x22ec <rotateStepper_2+0xae8>
	else if (__tmp > 65535)
    221a:	ce 01       	movw	r24, r28
    221c:	85 5a       	subi	r24, 0xA5	; 165
    221e:	9f 4f       	sbci	r25, 0xFF	; 255
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	3f ef       	ldi	r19, 0xFF	; 255
    2224:	4f e7       	ldi	r20, 0x7F	; 127
    2226:	57 e4       	ldi	r21, 0x47	; 71
    2228:	fc 01       	movw	r30, r24
    222a:	60 81       	ld	r22, Z
    222c:	71 81       	ldd	r23, Z+1	; 0x01
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	93 81       	ldd	r25, Z+3	; 0x03
    2232:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    2236:	18 16       	cp	r1, r24
    2238:	0c f0       	brlt	.+2      	; 0x223c <rotateStepper_2+0xa38>
    223a:	46 c0       	rjmp	.+140    	; 0x22c8 <rotateStepper_2+0xac4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e2       	ldi	r20, 0x20	; 32
    2242:	51 e4       	ldi	r21, 0x41	; 65
    2244:	6b a1       	ldd	r22, Y+35	; 0x23
    2246:	7c a1       	ldd	r23, Y+36	; 0x24
    2248:	8d a1       	ldd	r24, Y+37	; 0x25
    224a:	9e a1       	ldd	r25, Y+38	; 0x26
    224c:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	8e 01       	movw	r16, r28
    2256:	01 5a       	subi	r16, 0xA1	; 161
    2258:	1f 4f       	sbci	r17, 0xFF	; 255
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	f8 01       	movw	r30, r16
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	80 83       	st	Z, r24
    226c:	24 c0       	rjmp	.+72     	; 0x22b6 <rotateStepper_2+0xab2>
    226e:	ce 01       	movw	r24, r28
    2270:	8f 59       	subi	r24, 0x9F	; 159
    2272:	9f 4f       	sbci	r25, 0xFF	; 255
    2274:	20 e9       	ldi	r18, 0x90	; 144
    2276:	31 e0       	ldi	r19, 0x01	; 1
    2278:	fc 01       	movw	r30, r24
    227a:	31 83       	std	Z+1, r19	; 0x01
    227c:	20 83       	st	Z, r18
    227e:	ce 01       	movw	r24, r28
    2280:	8f 59       	subi	r24, 0x9F	; 159
    2282:	9f 4f       	sbci	r25, 0xFF	; 255
    2284:	fc 01       	movw	r30, r24
    2286:	80 81       	ld	r24, Z
    2288:	91 81       	ldd	r25, Z+1	; 0x01
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	f1 f7       	brne	.-4      	; 0x228a <rotateStepper_2+0xa86>
    228e:	9e 01       	movw	r18, r28
    2290:	2f 59       	subi	r18, 0x9F	; 159
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	f9 01       	movw	r30, r18
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229a:	ce 01       	movw	r24, r28
    229c:	81 5a       	subi	r24, 0xA1	; 161
    229e:	9f 4f       	sbci	r25, 0xFF	; 255
    22a0:	9e 01       	movw	r18, r28
    22a2:	21 5a       	subi	r18, 0xA1	; 161
    22a4:	3f 4f       	sbci	r19, 0xFF	; 255
    22a6:	f9 01       	movw	r30, r18
    22a8:	20 81       	ld	r18, Z
    22aa:	31 81       	ldd	r19, Z+1	; 0x01
    22ac:	21 50       	subi	r18, 0x01	; 1
    22ae:	31 09       	sbc	r19, r1
    22b0:	fc 01       	movw	r30, r24
    22b2:	31 83       	std	Z+1, r19	; 0x01
    22b4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b6:	ce 01       	movw	r24, r28
    22b8:	81 5a       	subi	r24, 0xA1	; 161
    22ba:	9f 4f       	sbci	r25, 0xFF	; 255
    22bc:	fc 01       	movw	r30, r24
    22be:	80 81       	ld	r24, Z
    22c0:	91 81       	ldd	r25, Z+1	; 0x01
    22c2:	89 2b       	or	r24, r25
    22c4:	a1 f6       	brne	.-88     	; 0x226e <rotateStepper_2+0xa6a>
    22c6:	2c c0       	rjmp	.+88     	; 0x2320 <rotateStepper_2+0xb1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c8:	8e 01       	movw	r16, r28
    22ca:	01 5a       	subi	r16, 0xA1	; 161
    22cc:	1f 4f       	sbci	r17, 0xFF	; 255
    22ce:	ce 01       	movw	r24, r28
    22d0:	85 5a       	subi	r24, 0xA5	; 165
    22d2:	9f 4f       	sbci	r25, 0xFF	; 255
    22d4:	fc 01       	movw	r30, r24
    22d6:	60 81       	ld	r22, Z
    22d8:	71 81       	ldd	r23, Z+1	; 0x01
    22da:	82 81       	ldd	r24, Z+2	; 0x02
    22dc:	93 81       	ldd	r25, Z+3	; 0x03
    22de:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	f8 01       	movw	r30, r16
    22e8:	91 83       	std	Z+1, r25	; 0x01
    22ea:	80 83       	st	Z, r24
    22ec:	ce 01       	movw	r24, r28
    22ee:	8d 59       	subi	r24, 0x9D	; 157
    22f0:	9f 4f       	sbci	r25, 0xFF	; 255
    22f2:	9e 01       	movw	r18, r28
    22f4:	21 5a       	subi	r18, 0xA1	; 161
    22f6:	3f 4f       	sbci	r19, 0xFF	; 255
    22f8:	f9 01       	movw	r30, r18
    22fa:	20 81       	ld	r18, Z
    22fc:	31 81       	ldd	r19, Z+1	; 0x01
    22fe:	fc 01       	movw	r30, r24
    2300:	31 83       	std	Z+1, r19	; 0x01
    2302:	20 83       	st	Z, r18
    2304:	ce 01       	movw	r24, r28
    2306:	8d 59       	subi	r24, 0x9D	; 157
    2308:	9f 4f       	sbci	r25, 0xFF	; 255
    230a:	fc 01       	movw	r30, r24
    230c:	80 81       	ld	r24, Z
    230e:	91 81       	ldd	r25, Z+1	; 0x01
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <rotateStepper_2+0xb0c>
    2314:	9e 01       	movw	r18, r28
    2316:	2d 59       	subi	r18, 0x9D	; 157
    2318:	3f 4f       	sbci	r19, 0xFF	; 255
    231a:	f9 01       	movw	r30, r18
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
			PORTA = 0x10;
    2320:	8b e3       	ldi	r24, 0x3B	; 59
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	20 e1       	ldi	r18, 0x10	; 16
    2326:	fc 01       	movw	r30, r24
    2328:	20 83       	st	Z, r18
			_delay_ms(period);
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	9e 81       	ldd	r25, Y+6	; 0x06
    232e:	09 2e       	mov	r0, r25
    2330:	00 0c       	add	r0, r0
    2332:	aa 0b       	sbc	r26, r26
    2334:	bb 0b       	sbc	r27, r27
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	8f a3       	std	Y+39, r24	; 0x27
    2344:	98 a7       	std	Y+40, r25	; 0x28
    2346:	a9 a7       	std	Y+41, r26	; 0x29
    2348:	ba a7       	std	Y+42, r27	; 0x2a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    234a:	8e 01       	movw	r16, r28
    234c:	0f 5a       	subi	r16, 0xAF	; 175
    234e:	1f 4f       	sbci	r17, 0xFF	; 255
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a e7       	ldi	r20, 0x7A	; 122
    2356:	55 e4       	ldi	r21, 0x45	; 69
    2358:	6f a1       	ldd	r22, Y+39	; 0x27
    235a:	78 a5       	ldd	r23, Y+40	; 0x28
    235c:	89 a5       	ldd	r24, Y+41	; 0x29
    235e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2360:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	f8 01       	movw	r30, r16
    236a:	80 83       	st	Z, r24
    236c:	91 83       	std	Z+1, r25	; 0x01
    236e:	a2 83       	std	Z+2, r26	; 0x02
    2370:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2372:	ce 01       	movw	r24, r28
    2374:	8f 5a       	subi	r24, 0xAF	; 175
    2376:	9f 4f       	sbci	r25, 0xFF	; 255
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e8       	ldi	r20, 0x80	; 128
    237e:	5f e3       	ldi	r21, 0x3F	; 63
    2380:	fc 01       	movw	r30, r24
    2382:	60 81       	ld	r22, Z
    2384:	71 81       	ldd	r23, Z+1	; 0x01
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	93 81       	ldd	r25, Z+3	; 0x03
    238a:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    238e:	88 23       	and	r24, r24
    2390:	4c f4       	brge	.+18     	; 0x23a4 <rotateStepper_2+0xba0>
		__ticks = 1;
    2392:	ce 01       	movw	r24, r28
    2394:	8b 5a       	subi	r24, 0xAB	; 171
    2396:	9f 4f       	sbci	r25, 0xFF	; 255
    2398:	21 e0       	ldi	r18, 0x01	; 1
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	fc 01       	movw	r30, r24
    239e:	31 83       	std	Z+1, r19	; 0x01
    23a0:	20 83       	st	Z, r18
    23a2:	69 c0       	rjmp	.+210    	; 0x2476 <rotateStepper_2+0xc72>
	else if (__tmp > 65535)
    23a4:	ce 01       	movw	r24, r28
    23a6:	8f 5a       	subi	r24, 0xAF	; 175
    23a8:	9f 4f       	sbci	r25, 0xFF	; 255
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	3f ef       	ldi	r19, 0xFF	; 255
    23ae:	4f e7       	ldi	r20, 0x7F	; 127
    23b0:	57 e4       	ldi	r21, 0x47	; 71
    23b2:	fc 01       	movw	r30, r24
    23b4:	60 81       	ld	r22, Z
    23b6:	71 81       	ldd	r23, Z+1	; 0x01
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	0c f0       	brlt	.+2      	; 0x23c6 <rotateStepper_2+0xbc2>
    23c4:	46 c0       	rjmp	.+140    	; 0x2452 <rotateStepper_2+0xc4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	6f a1       	ldd	r22, Y+39	; 0x27
    23d0:	78 a5       	ldd	r23, Y+40	; 0x28
    23d2:	89 a5       	ldd	r24, Y+41	; 0x29
    23d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23d6:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	8e 01       	movw	r16, r28
    23e0:	0b 5a       	subi	r16, 0xAB	; 171
    23e2:	1f 4f       	sbci	r17, 0xFF	; 255
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	f8 01       	movw	r30, r16
    23f2:	91 83       	std	Z+1, r25	; 0x01
    23f4:	80 83       	st	Z, r24
    23f6:	24 c0       	rjmp	.+72     	; 0x2440 <rotateStepper_2+0xc3c>
    23f8:	ce 01       	movw	r24, r28
    23fa:	89 5a       	subi	r24, 0xA9	; 169
    23fc:	9f 4f       	sbci	r25, 0xFF	; 255
    23fe:	20 e9       	ldi	r18, 0x90	; 144
    2400:	31 e0       	ldi	r19, 0x01	; 1
    2402:	fc 01       	movw	r30, r24
    2404:	31 83       	std	Z+1, r19	; 0x01
    2406:	20 83       	st	Z, r18
    2408:	ce 01       	movw	r24, r28
    240a:	89 5a       	subi	r24, 0xA9	; 169
    240c:	9f 4f       	sbci	r25, 0xFF	; 255
    240e:	fc 01       	movw	r30, r24
    2410:	80 81       	ld	r24, Z
    2412:	91 81       	ldd	r25, Z+1	; 0x01
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <rotateStepper_2+0xc10>
    2418:	9e 01       	movw	r18, r28
    241a:	29 5a       	subi	r18, 0xA9	; 169
    241c:	3f 4f       	sbci	r19, 0xFF	; 255
    241e:	f9 01       	movw	r30, r18
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2424:	ce 01       	movw	r24, r28
    2426:	8b 5a       	subi	r24, 0xAB	; 171
    2428:	9f 4f       	sbci	r25, 0xFF	; 255
    242a:	9e 01       	movw	r18, r28
    242c:	2b 5a       	subi	r18, 0xAB	; 171
    242e:	3f 4f       	sbci	r19, 0xFF	; 255
    2430:	f9 01       	movw	r30, r18
    2432:	20 81       	ld	r18, Z
    2434:	31 81       	ldd	r19, Z+1	; 0x01
    2436:	21 50       	subi	r18, 0x01	; 1
    2438:	31 09       	sbc	r19, r1
    243a:	fc 01       	movw	r30, r24
    243c:	31 83       	std	Z+1, r19	; 0x01
    243e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2440:	ce 01       	movw	r24, r28
    2442:	8b 5a       	subi	r24, 0xAB	; 171
    2444:	9f 4f       	sbci	r25, 0xFF	; 255
    2446:	fc 01       	movw	r30, r24
    2448:	80 81       	ld	r24, Z
    244a:	91 81       	ldd	r25, Z+1	; 0x01
    244c:	89 2b       	or	r24, r25
    244e:	a1 f6       	brne	.-88     	; 0x23f8 <rotateStepper_2+0xbf4>
    2450:	2c c0       	rjmp	.+88     	; 0x24aa <rotateStepper_2+0xca6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2452:	8e 01       	movw	r16, r28
    2454:	0b 5a       	subi	r16, 0xAB	; 171
    2456:	1f 4f       	sbci	r17, 0xFF	; 255
    2458:	ce 01       	movw	r24, r28
    245a:	8f 5a       	subi	r24, 0xAF	; 175
    245c:	9f 4f       	sbci	r25, 0xFF	; 255
    245e:	fc 01       	movw	r30, r24
    2460:	60 81       	ld	r22, Z
    2462:	71 81       	ldd	r23, Z+1	; 0x01
    2464:	82 81       	ldd	r24, Z+2	; 0x02
    2466:	93 81       	ldd	r25, Z+3	; 0x03
    2468:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	f8 01       	movw	r30, r16
    2472:	91 83       	std	Z+1, r25	; 0x01
    2474:	80 83       	st	Z, r24
    2476:	ce 01       	movw	r24, r28
    2478:	87 5a       	subi	r24, 0xA7	; 167
    247a:	9f 4f       	sbci	r25, 0xFF	; 255
    247c:	9e 01       	movw	r18, r28
    247e:	2b 5a       	subi	r18, 0xAB	; 171
    2480:	3f 4f       	sbci	r19, 0xFF	; 255
    2482:	f9 01       	movw	r30, r18
    2484:	20 81       	ld	r18, Z
    2486:	31 81       	ldd	r19, Z+1	; 0x01
    2488:	fc 01       	movw	r30, r24
    248a:	31 83       	std	Z+1, r19	; 0x01
    248c:	20 83       	st	Z, r18
    248e:	ce 01       	movw	r24, r28
    2490:	87 5a       	subi	r24, 0xA7	; 167
    2492:	9f 4f       	sbci	r25, 0xFF	; 255
    2494:	fc 01       	movw	r30, r24
    2496:	80 81       	ld	r24, Z
    2498:	91 81       	ldd	r25, Z+1	; 0x01
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	f1 f7       	brne	.-4      	; 0x249a <rotateStepper_2+0xc96>
    249e:	9e 01       	movw	r18, r28
    24a0:	27 5a       	subi	r18, 0xA7	; 167
    24a2:	3f 4f       	sbci	r19, 0xFF	; 255
    24a4:	f9 01       	movw	r30, r18
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
			PORTA = 0x30;
    24aa:	8b e3       	ldi	r24, 0x3B	; 59
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	20 e3       	ldi	r18, 0x30	; 48
    24b0:	fc 01       	movw	r30, r24
    24b2:	20 83       	st	Z, r18
			_delay_ms(period);
    24b4:	8d 81       	ldd	r24, Y+5	; 0x05
    24b6:	9e 81       	ldd	r25, Y+6	; 0x06
    24b8:	09 2e       	mov	r0, r25
    24ba:	00 0c       	add	r0, r0
    24bc:	aa 0b       	sbc	r26, r26
    24be:	bb 0b       	sbc	r27, r27
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9e 01       	movw	r18, r28
    24ce:	2d 5b       	subi	r18, 0xBD	; 189
    24d0:	3f 4f       	sbci	r19, 0xFF	; 255
    24d2:	f9 01       	movw	r30, r18
    24d4:	80 83       	st	Z, r24
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	a2 83       	std	Z+2, r26	; 0x02
    24da:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    24dc:	8e 01       	movw	r16, r28
    24de:	09 5b       	subi	r16, 0xB9	; 185
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	ce 01       	movw	r24, r28
    24e4:	8d 5b       	subi	r24, 0xBD	; 189
    24e6:	9f 4f       	sbci	r25, 0xFF	; 255
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	4a e7       	ldi	r20, 0x7A	; 122
    24ee:	55 e4       	ldi	r21, 0x45	; 69
    24f0:	fc 01       	movw	r30, r24
    24f2:	60 81       	ld	r22, Z
    24f4:	71 81       	ldd	r23, Z+1	; 0x01
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	f8 01       	movw	r30, r16
    2504:	80 83       	st	Z, r24
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	a2 83       	std	Z+2, r26	; 0x02
    250a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    250c:	ce 01       	movw	r24, r28
    250e:	89 5b       	subi	r24, 0xB9	; 185
    2510:	9f 4f       	sbci	r25, 0xFF	; 255
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	fc 01       	movw	r30, r24
    251c:	60 81       	ld	r22, Z
    251e:	71 81       	ldd	r23, Z+1	; 0x01
    2520:	82 81       	ldd	r24, Z+2	; 0x02
    2522:	93 81       	ldd	r25, Z+3	; 0x03
    2524:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    2528:	88 23       	and	r24, r24
    252a:	4c f4       	brge	.+18     	; 0x253e <rotateStepper_2+0xd3a>
		__ticks = 1;
    252c:	ce 01       	movw	r24, r28
    252e:	85 5b       	subi	r24, 0xB5	; 181
    2530:	9f 4f       	sbci	r25, 0xFF	; 255
    2532:	21 e0       	ldi	r18, 0x01	; 1
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	fc 01       	movw	r30, r24
    2538:	31 83       	std	Z+1, r19	; 0x01
    253a:	20 83       	st	Z, r18
    253c:	6d c0       	rjmp	.+218    	; 0x2618 <rotateStepper_2+0xe14>
	else if (__tmp > 65535)
    253e:	ce 01       	movw	r24, r28
    2540:	89 5b       	subi	r24, 0xB9	; 185
    2542:	9f 4f       	sbci	r25, 0xFF	; 255
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	4f e7       	ldi	r20, 0x7F	; 127
    254a:	57 e4       	ldi	r21, 0x47	; 71
    254c:	fc 01       	movw	r30, r24
    254e:	60 81       	ld	r22, Z
    2550:	71 81       	ldd	r23, Z+1	; 0x01
    2552:	82 81       	ldd	r24, Z+2	; 0x02
    2554:	93 81       	ldd	r25, Z+3	; 0x03
    2556:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    255a:	18 16       	cp	r1, r24
    255c:	0c f0       	brlt	.+2      	; 0x2560 <rotateStepper_2+0xd5c>
    255e:	4a c0       	rjmp	.+148    	; 0x25f4 <rotateStepper_2+0xdf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	ce 01       	movw	r24, r28
    2562:	8d 5b       	subi	r24, 0xBD	; 189
    2564:	9f 4f       	sbci	r25, 0xFF	; 255
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	fc 01       	movw	r30, r24
    2570:	60 81       	ld	r22, Z
    2572:	71 81       	ldd	r23, Z+1	; 0x01
    2574:	82 81       	ldd	r24, Z+2	; 0x02
    2576:	93 81       	ldd	r25, Z+3	; 0x03
    2578:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	8e 01       	movw	r16, r28
    2582:	05 5b       	subi	r16, 0xB5	; 181
    2584:	1f 4f       	sbci	r17, 0xFF	; 255
    2586:	bc 01       	movw	r22, r24
    2588:	cd 01       	movw	r24, r26
    258a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	f8 01       	movw	r30, r16
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	80 83       	st	Z, r24
    2598:	24 c0       	rjmp	.+72     	; 0x25e2 <rotateStepper_2+0xdde>
    259a:	ce 01       	movw	r24, r28
    259c:	83 5b       	subi	r24, 0xB3	; 179
    259e:	9f 4f       	sbci	r25, 0xFF	; 255
    25a0:	20 e9       	ldi	r18, 0x90	; 144
    25a2:	31 e0       	ldi	r19, 0x01	; 1
    25a4:	fc 01       	movw	r30, r24
    25a6:	31 83       	std	Z+1, r19	; 0x01
    25a8:	20 83       	st	Z, r18
    25aa:	ce 01       	movw	r24, r28
    25ac:	83 5b       	subi	r24, 0xB3	; 179
    25ae:	9f 4f       	sbci	r25, 0xFF	; 255
    25b0:	fc 01       	movw	r30, r24
    25b2:	80 81       	ld	r24, Z
    25b4:	91 81       	ldd	r25, Z+1	; 0x01
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <rotateStepper_2+0xdb2>
    25ba:	9e 01       	movw	r18, r28
    25bc:	23 5b       	subi	r18, 0xB3	; 179
    25be:	3f 4f       	sbci	r19, 0xFF	; 255
    25c0:	f9 01       	movw	r30, r18
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c6:	ce 01       	movw	r24, r28
    25c8:	85 5b       	subi	r24, 0xB5	; 181
    25ca:	9f 4f       	sbci	r25, 0xFF	; 255
    25cc:	9e 01       	movw	r18, r28
    25ce:	25 5b       	subi	r18, 0xB5	; 181
    25d0:	3f 4f       	sbci	r19, 0xFF	; 255
    25d2:	f9 01       	movw	r30, r18
    25d4:	20 81       	ld	r18, Z
    25d6:	31 81       	ldd	r19, Z+1	; 0x01
    25d8:	21 50       	subi	r18, 0x01	; 1
    25da:	31 09       	sbc	r19, r1
    25dc:	fc 01       	movw	r30, r24
    25de:	31 83       	std	Z+1, r19	; 0x01
    25e0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e2:	ce 01       	movw	r24, r28
    25e4:	85 5b       	subi	r24, 0xB5	; 181
    25e6:	9f 4f       	sbci	r25, 0xFF	; 255
    25e8:	fc 01       	movw	r30, r24
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	89 2b       	or	r24, r25
    25f0:	a1 f6       	brne	.-88     	; 0x259a <rotateStepper_2+0xd96>
    25f2:	2c c0       	rjmp	.+88     	; 0x264c <rotateStepper_2+0xe48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f4:	8e 01       	movw	r16, r28
    25f6:	05 5b       	subi	r16, 0xB5	; 181
    25f8:	1f 4f       	sbci	r17, 0xFF	; 255
    25fa:	ce 01       	movw	r24, r28
    25fc:	89 5b       	subi	r24, 0xB9	; 185
    25fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2600:	fc 01       	movw	r30, r24
    2602:	60 81       	ld	r22, Z
    2604:	71 81       	ldd	r23, Z+1	; 0x01
    2606:	82 81       	ldd	r24, Z+2	; 0x02
    2608:	93 81       	ldd	r25, Z+3	; 0x03
    260a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	f8 01       	movw	r30, r16
    2614:	91 83       	std	Z+1, r25	; 0x01
    2616:	80 83       	st	Z, r24
    2618:	ce 01       	movw	r24, r28
    261a:	81 5b       	subi	r24, 0xB1	; 177
    261c:	9f 4f       	sbci	r25, 0xFF	; 255
    261e:	9e 01       	movw	r18, r28
    2620:	25 5b       	subi	r18, 0xB5	; 181
    2622:	3f 4f       	sbci	r19, 0xFF	; 255
    2624:	f9 01       	movw	r30, r18
    2626:	20 81       	ld	r18, Z
    2628:	31 81       	ldd	r19, Z+1	; 0x01
    262a:	fc 01       	movw	r30, r24
    262c:	31 83       	std	Z+1, r19	; 0x01
    262e:	20 83       	st	Z, r18
    2630:	ce 01       	movw	r24, r28
    2632:	81 5b       	subi	r24, 0xB1	; 177
    2634:	9f 4f       	sbci	r25, 0xFF	; 255
    2636:	fc 01       	movw	r30, r24
    2638:	80 81       	ld	r24, Z
    263a:	91 81       	ldd	r25, Z+1	; 0x01
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <rotateStepper_2+0xe38>
    2640:	9e 01       	movw	r18, r28
    2642:	21 5b       	subi	r18, 0xB1	; 177
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	f9 01       	movw	r30, r18
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
	int period;
	period = 10;
	if (direction == 1)
	{
		/* Rotate  clockwise */
		for (int i = 0; i < 50; i++)
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	01 96       	adiw	r24, 0x01	; 1
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	c2 97       	sbiw	r24, 0x32	; 50
    265c:	0c f4       	brge	.+2      	; 0x2660 <rotateStepper_2+0xe5c>
    265e:	fd c8       	rjmp	.-3590   	; 0x185a <rotateStepper_2+0x56>
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	a0 e2       	ldi	r26, 0x20	; 32
    2666:	b1 e4       	ldi	r27, 0x41	; 65
    2668:	8f 83       	std	Y+7, r24	; 0x07
    266a:	98 87       	std	Y+8, r25	; 0x08
    266c:	a9 87       	std	Y+9, r26	; 0x09
    266e:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2670:	8e 01       	movw	r16, r28
    2672:	0f 55       	subi	r16, 0x5F	; 95
    2674:	1f 4f       	sbci	r17, 0xFF	; 255
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	4a e7       	ldi	r20, 0x7A	; 122
    267c:	55 e4       	ldi	r21, 0x45	; 69
    267e:	6f 81       	ldd	r22, Y+7	; 0x07
    2680:	78 85       	ldd	r23, Y+8	; 0x08
    2682:	89 85       	ldd	r24, Y+9	; 0x09
    2684:	9a 85       	ldd	r25, Y+10	; 0x0a
    2686:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	f8 01       	movw	r30, r16
    2690:	80 83       	st	Z, r24
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	a2 83       	std	Z+2, r26	; 0x02
    2696:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2698:	ce 01       	movw	r24, r28
    269a:	8f 55       	subi	r24, 0x5F	; 95
    269c:	9f 4f       	sbci	r25, 0xFF	; 255
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e8       	ldi	r20, 0x80	; 128
    26a4:	5f e3       	ldi	r21, 0x3F	; 63
    26a6:	fc 01       	movw	r30, r24
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    26b4:	88 23       	and	r24, r24
    26b6:	4c f4       	brge	.+18     	; 0x26ca <rotateStepper_2+0xec6>
		__ticks = 1;
    26b8:	ce 01       	movw	r24, r28
    26ba:	8b 55       	subi	r24, 0x5B	; 91
    26bc:	9f 4f       	sbci	r25, 0xFF	; 255
    26be:	21 e0       	ldi	r18, 0x01	; 1
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	fc 01       	movw	r30, r24
    26c4:	31 83       	std	Z+1, r19	; 0x01
    26c6:	20 83       	st	Z, r18
    26c8:	69 c0       	rjmp	.+210    	; 0x279c <rotateStepper_2+0xf98>
	else if (__tmp > 65535)
    26ca:	ce 01       	movw	r24, r28
    26cc:	8f 55       	subi	r24, 0x5F	; 95
    26ce:	9f 4f       	sbci	r25, 0xFF	; 255
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	3f ef       	ldi	r19, 0xFF	; 255
    26d4:	4f e7       	ldi	r20, 0x7F	; 127
    26d6:	57 e4       	ldi	r21, 0x47	; 71
    26d8:	fc 01       	movw	r30, r24
    26da:	60 81       	ld	r22, Z
    26dc:	71 81       	ldd	r23, Z+1	; 0x01
    26de:	82 81       	ldd	r24, Z+2	; 0x02
    26e0:	93 81       	ldd	r25, Z+3	; 0x03
    26e2:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    26e6:	18 16       	cp	r1, r24
    26e8:	0c f0       	brlt	.+2      	; 0x26ec <rotateStepper_2+0xee8>
    26ea:	46 c0       	rjmp	.+140    	; 0x2778 <rotateStepper_2+0xf74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e2       	ldi	r20, 0x20	; 32
    26f2:	51 e4       	ldi	r21, 0x41	; 65
    26f4:	6f 81       	ldd	r22, Y+7	; 0x07
    26f6:	78 85       	ldd	r23, Y+8	; 0x08
    26f8:	89 85       	ldd	r24, Y+9	; 0x09
    26fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fc:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	8e 01       	movw	r16, r28
    2706:	0b 55       	subi	r16, 0x5B	; 91
    2708:	1f 4f       	sbci	r17, 0xFF	; 255
    270a:	bc 01       	movw	r22, r24
    270c:	cd 01       	movw	r24, r26
    270e:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	f8 01       	movw	r30, r16
    2718:	91 83       	std	Z+1, r25	; 0x01
    271a:	80 83       	st	Z, r24
    271c:	24 c0       	rjmp	.+72     	; 0x2766 <rotateStepper_2+0xf62>
    271e:	ce 01       	movw	r24, r28
    2720:	89 55       	subi	r24, 0x59	; 89
    2722:	9f 4f       	sbci	r25, 0xFF	; 255
    2724:	20 e9       	ldi	r18, 0x90	; 144
    2726:	31 e0       	ldi	r19, 0x01	; 1
    2728:	fc 01       	movw	r30, r24
    272a:	31 83       	std	Z+1, r19	; 0x01
    272c:	20 83       	st	Z, r18
    272e:	ce 01       	movw	r24, r28
    2730:	89 55       	subi	r24, 0x59	; 89
    2732:	9f 4f       	sbci	r25, 0xFF	; 255
    2734:	fc 01       	movw	r30, r24
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	f1 f7       	brne	.-4      	; 0x273a <rotateStepper_2+0xf36>
    273e:	9e 01       	movw	r18, r28
    2740:	29 55       	subi	r18, 0x59	; 89
    2742:	3f 4f       	sbci	r19, 0xFF	; 255
    2744:	f9 01       	movw	r30, r18
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274a:	ce 01       	movw	r24, r28
    274c:	8b 55       	subi	r24, 0x5B	; 91
    274e:	9f 4f       	sbci	r25, 0xFF	; 255
    2750:	9e 01       	movw	r18, r28
    2752:	2b 55       	subi	r18, 0x5B	; 91
    2754:	3f 4f       	sbci	r19, 0xFF	; 255
    2756:	f9 01       	movw	r30, r18
    2758:	20 81       	ld	r18, Z
    275a:	31 81       	ldd	r19, Z+1	; 0x01
    275c:	21 50       	subi	r18, 0x01	; 1
    275e:	31 09       	sbc	r19, r1
    2760:	fc 01       	movw	r30, r24
    2762:	31 83       	std	Z+1, r19	; 0x01
    2764:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2766:	ce 01       	movw	r24, r28
    2768:	8b 55       	subi	r24, 0x5B	; 91
    276a:	9f 4f       	sbci	r25, 0xFF	; 255
    276c:	fc 01       	movw	r30, r24
    276e:	80 81       	ld	r24, Z
    2770:	91 81       	ldd	r25, Z+1	; 0x01
    2772:	89 2b       	or	r24, r25
    2774:	a1 f6       	brne	.-88     	; 0x271e <rotateStepper_2+0xf1a>
			_delay_ms(period);
		}

		_delay_ms(10);
	}
}
    2776:	d5 c4       	rjmp	.+2474   	; 0x3122 <rotateStepper_2+0x191e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2778:	8e 01       	movw	r16, r28
    277a:	0b 55       	subi	r16, 0x5B	; 91
    277c:	1f 4f       	sbci	r17, 0xFF	; 255
    277e:	ce 01       	movw	r24, r28
    2780:	8f 55       	subi	r24, 0x5F	; 95
    2782:	9f 4f       	sbci	r25, 0xFF	; 255
    2784:	fc 01       	movw	r30, r24
    2786:	60 81       	ld	r22, Z
    2788:	71 81       	ldd	r23, Z+1	; 0x01
    278a:	82 81       	ldd	r24, Z+2	; 0x02
    278c:	93 81       	ldd	r25, Z+3	; 0x03
    278e:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	f8 01       	movw	r30, r16
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	80 83       	st	Z, r24
    279c:	ce 01       	movw	r24, r28
    279e:	87 55       	subi	r24, 0x57	; 87
    27a0:	9f 4f       	sbci	r25, 0xFF	; 255
    27a2:	9e 01       	movw	r18, r28
    27a4:	2b 55       	subi	r18, 0x5B	; 91
    27a6:	3f 4f       	sbci	r19, 0xFF	; 255
    27a8:	f9 01       	movw	r30, r18
    27aa:	20 81       	ld	r18, Z
    27ac:	31 81       	ldd	r19, Z+1	; 0x01
    27ae:	fc 01       	movw	r30, r24
    27b0:	31 83       	std	Z+1, r19	; 0x01
    27b2:	20 83       	st	Z, r18
    27b4:	ce 01       	movw	r24, r28
    27b6:	87 55       	subi	r24, 0x57	; 87
    27b8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ba:	fc 01       	movw	r30, r24
    27bc:	80 81       	ld	r24, Z
    27be:	91 81       	ldd	r25, Z+1	; 0x01
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <rotateStepper_2+0xfbc>
    27c4:	9e 01       	movw	r18, r28
    27c6:	27 55       	subi	r18, 0x57	; 87
    27c8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ca:	f9 01       	movw	r30, r18
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	80 83       	st	Z, r24
    27d0:	a8 c4       	rjmp	.+2384   	; 0x3122 <rotateStepper_2+0x191e>
		_delay_ms(10);
	}
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < 50; i++)
    27d2:	1c 82       	std	Y+4, r1	; 0x04
    27d4:	1b 82       	std	Y+3, r1	; 0x03
    27d6:	e8 c3       	rjmp	.+2000   	; 0x2fa8 <rotateStepper_2+0x17a4>
		{
			PORTA = 0x30;
    27d8:	8b e3       	ldi	r24, 0x3B	; 59
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	20 e3       	ldi	r18, 0x30	; 48
    27de:	fc 01       	movw	r30, r24
    27e0:	20 83       	st	Z, r18
			_delay_ms(period);
    27e2:	8d 81       	ldd	r24, Y+5	; 0x05
    27e4:	9e 81       	ldd	r25, Y+6	; 0x06
    27e6:	09 2e       	mov	r0, r25
    27e8:	00 0c       	add	r0, r0
    27ea:	aa 0b       	sbc	r26, r26
    27ec:	bb 0b       	sbc	r27, r27
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	8b ab       	std	Y+51, r24	; 0x33
    27fc:	9c ab       	std	Y+52, r25	; 0x34
    27fe:	ad ab       	std	Y+53, r26	; 0x35
    2800:	be ab       	std	Y+54, r27	; 0x36

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2802:	8e 01       	movw	r16, r28
    2804:	0d 52       	subi	r16, 0x2D	; 45
    2806:	1f 4f       	sbci	r17, 0xFF	; 255
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	4a e7       	ldi	r20, 0x7A	; 122
    280e:	55 e4       	ldi	r21, 0x45	; 69
    2810:	6b a9       	ldd	r22, Y+51	; 0x33
    2812:	7c a9       	ldd	r23, Y+52	; 0x34
    2814:	8d a9       	ldd	r24, Y+53	; 0x35
    2816:	9e a9       	ldd	r25, Y+54	; 0x36
    2818:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	f8 01       	movw	r30, r16
    2822:	80 83       	st	Z, r24
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	a2 83       	std	Z+2, r26	; 0x02
    2828:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    282a:	ce 01       	movw	r24, r28
    282c:	8d 52       	subi	r24, 0x2D	; 45
    282e:	9f 4f       	sbci	r25, 0xFF	; 255
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e8       	ldi	r20, 0x80	; 128
    2836:	5f e3       	ldi	r21, 0x3F	; 63
    2838:	fc 01       	movw	r30, r24
    283a:	60 81       	ld	r22, Z
    283c:	71 81       	ldd	r23, Z+1	; 0x01
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    2846:	88 23       	and	r24, r24
    2848:	4c f4       	brge	.+18     	; 0x285c <rotateStepper_2+0x1058>
		__ticks = 1;
    284a:	ce 01       	movw	r24, r28
    284c:	89 52       	subi	r24, 0x29	; 41
    284e:	9f 4f       	sbci	r25, 0xFF	; 255
    2850:	21 e0       	ldi	r18, 0x01	; 1
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	fc 01       	movw	r30, r24
    2856:	31 83       	std	Z+1, r19	; 0x01
    2858:	20 83       	st	Z, r18
    285a:	69 c0       	rjmp	.+210    	; 0x292e <rotateStepper_2+0x112a>
	else if (__tmp > 65535)
    285c:	ce 01       	movw	r24, r28
    285e:	8d 52       	subi	r24, 0x2D	; 45
    2860:	9f 4f       	sbci	r25, 0xFF	; 255
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	3f ef       	ldi	r19, 0xFF	; 255
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	57 e4       	ldi	r21, 0x47	; 71
    286a:	fc 01       	movw	r30, r24
    286c:	60 81       	ld	r22, Z
    286e:	71 81       	ldd	r23, Z+1	; 0x01
    2870:	82 81       	ldd	r24, Z+2	; 0x02
    2872:	93 81       	ldd	r25, Z+3	; 0x03
    2874:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    2878:	18 16       	cp	r1, r24
    287a:	0c f0       	brlt	.+2      	; 0x287e <rotateStepper_2+0x107a>
    287c:	46 c0       	rjmp	.+140    	; 0x290a <rotateStepper_2+0x1106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e2       	ldi	r20, 0x20	; 32
    2884:	51 e4       	ldi	r21, 0x41	; 65
    2886:	6b a9       	ldd	r22, Y+51	; 0x33
    2888:	7c a9       	ldd	r23, Y+52	; 0x34
    288a:	8d a9       	ldd	r24, Y+53	; 0x35
    288c:	9e a9       	ldd	r25, Y+54	; 0x36
    288e:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	8e 01       	movw	r16, r28
    2898:	09 52       	subi	r16, 0x29	; 41
    289a:	1f 4f       	sbci	r17, 0xFF	; 255
    289c:	bc 01       	movw	r22, r24
    289e:	cd 01       	movw	r24, r26
    28a0:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	f8 01       	movw	r30, r16
    28aa:	91 83       	std	Z+1, r25	; 0x01
    28ac:	80 83       	st	Z, r24
    28ae:	24 c0       	rjmp	.+72     	; 0x28f8 <rotateStepper_2+0x10f4>
    28b0:	ce 01       	movw	r24, r28
    28b2:	87 52       	subi	r24, 0x27	; 39
    28b4:	9f 4f       	sbci	r25, 0xFF	; 255
    28b6:	20 e9       	ldi	r18, 0x90	; 144
    28b8:	31 e0       	ldi	r19, 0x01	; 1
    28ba:	fc 01       	movw	r30, r24
    28bc:	31 83       	std	Z+1, r19	; 0x01
    28be:	20 83       	st	Z, r18
    28c0:	ce 01       	movw	r24, r28
    28c2:	87 52       	subi	r24, 0x27	; 39
    28c4:	9f 4f       	sbci	r25, 0xFF	; 255
    28c6:	fc 01       	movw	r30, r24
    28c8:	80 81       	ld	r24, Z
    28ca:	91 81       	ldd	r25, Z+1	; 0x01
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <rotateStepper_2+0x10c8>
    28d0:	9e 01       	movw	r18, r28
    28d2:	27 52       	subi	r18, 0x27	; 39
    28d4:	3f 4f       	sbci	r19, 0xFF	; 255
    28d6:	f9 01       	movw	r30, r18
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28dc:	ce 01       	movw	r24, r28
    28de:	89 52       	subi	r24, 0x29	; 41
    28e0:	9f 4f       	sbci	r25, 0xFF	; 255
    28e2:	9e 01       	movw	r18, r28
    28e4:	29 52       	subi	r18, 0x29	; 41
    28e6:	3f 4f       	sbci	r19, 0xFF	; 255
    28e8:	f9 01       	movw	r30, r18
    28ea:	20 81       	ld	r18, Z
    28ec:	31 81       	ldd	r19, Z+1	; 0x01
    28ee:	21 50       	subi	r18, 0x01	; 1
    28f0:	31 09       	sbc	r19, r1
    28f2:	fc 01       	movw	r30, r24
    28f4:	31 83       	std	Z+1, r19	; 0x01
    28f6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f8:	ce 01       	movw	r24, r28
    28fa:	89 52       	subi	r24, 0x29	; 41
    28fc:	9f 4f       	sbci	r25, 0xFF	; 255
    28fe:	fc 01       	movw	r30, r24
    2900:	80 81       	ld	r24, Z
    2902:	91 81       	ldd	r25, Z+1	; 0x01
    2904:	89 2b       	or	r24, r25
    2906:	a1 f6       	brne	.-88     	; 0x28b0 <rotateStepper_2+0x10ac>
    2908:	2c c0       	rjmp	.+88     	; 0x2962 <rotateStepper_2+0x115e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290a:	8e 01       	movw	r16, r28
    290c:	09 52       	subi	r16, 0x29	; 41
    290e:	1f 4f       	sbci	r17, 0xFF	; 255
    2910:	ce 01       	movw	r24, r28
    2912:	8d 52       	subi	r24, 0x2D	; 45
    2914:	9f 4f       	sbci	r25, 0xFF	; 255
    2916:	fc 01       	movw	r30, r24
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	f8 01       	movw	r30, r16
    292a:	91 83       	std	Z+1, r25	; 0x01
    292c:	80 83       	st	Z, r24
    292e:	ce 01       	movw	r24, r28
    2930:	85 52       	subi	r24, 0x25	; 37
    2932:	9f 4f       	sbci	r25, 0xFF	; 255
    2934:	9e 01       	movw	r18, r28
    2936:	29 52       	subi	r18, 0x29	; 41
    2938:	3f 4f       	sbci	r19, 0xFF	; 255
    293a:	f9 01       	movw	r30, r18
    293c:	20 81       	ld	r18, Z
    293e:	31 81       	ldd	r19, Z+1	; 0x01
    2940:	fc 01       	movw	r30, r24
    2942:	31 83       	std	Z+1, r19	; 0x01
    2944:	20 83       	st	Z, r18
    2946:	ce 01       	movw	r24, r28
    2948:	85 52       	subi	r24, 0x25	; 37
    294a:	9f 4f       	sbci	r25, 0xFF	; 255
    294c:	fc 01       	movw	r30, r24
    294e:	80 81       	ld	r24, Z
    2950:	91 81       	ldd	r25, Z+1	; 0x01
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <rotateStepper_2+0x114e>
    2956:	9e 01       	movw	r18, r28
    2958:	25 52       	subi	r18, 0x25	; 37
    295a:	3f 4f       	sbci	r19, 0xFF	; 255
    295c:	f9 01       	movw	r30, r18
    295e:	91 83       	std	Z+1, r25	; 0x01
    2960:	80 83       	st	Z, r24
			PORTA = 0x90;
    2962:	8b e3       	ldi	r24, 0x3B	; 59
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	20 e9       	ldi	r18, 0x90	; 144
    2968:	fc 01       	movw	r30, r24
    296a:	20 83       	st	Z, r18
			_delay_ms(period);
    296c:	8d 81       	ldd	r24, Y+5	; 0x05
    296e:	9e 81       	ldd	r25, Y+6	; 0x06
    2970:	09 2e       	mov	r0, r25
    2972:	00 0c       	add	r0, r0
    2974:	aa 0b       	sbc	r26, r26
    2976:	bb 0b       	sbc	r27, r27
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	8f ab       	std	Y+55, r24	; 0x37
    2986:	98 af       	std	Y+56, r25	; 0x38
    2988:	a9 af       	std	Y+57, r26	; 0x39
    298a:	ba af       	std	Y+58, r27	; 0x3a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    298c:	8e 01       	movw	r16, r28
    298e:	07 53       	subi	r16, 0x37	; 55
    2990:	1f 4f       	sbci	r17, 0xFF	; 255
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	4a e7       	ldi	r20, 0x7A	; 122
    2998:	55 e4       	ldi	r21, 0x45	; 69
    299a:	6f a9       	ldd	r22, Y+55	; 0x37
    299c:	78 ad       	ldd	r23, Y+56	; 0x38
    299e:	89 ad       	ldd	r24, Y+57	; 0x39
    29a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    29a2:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	f8 01       	movw	r30, r16
    29ac:	80 83       	st	Z, r24
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	a2 83       	std	Z+2, r26	; 0x02
    29b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29b4:	ce 01       	movw	r24, r28
    29b6:	87 53       	subi	r24, 0x37	; 55
    29b8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e8       	ldi	r20, 0x80	; 128
    29c0:	5f e3       	ldi	r21, 0x3F	; 63
    29c2:	fc 01       	movw	r30, r24
    29c4:	60 81       	ld	r22, Z
    29c6:	71 81       	ldd	r23, Z+1	; 0x01
    29c8:	82 81       	ldd	r24, Z+2	; 0x02
    29ca:	93 81       	ldd	r25, Z+3	; 0x03
    29cc:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    29d0:	88 23       	and	r24, r24
    29d2:	4c f4       	brge	.+18     	; 0x29e6 <rotateStepper_2+0x11e2>
		__ticks = 1;
    29d4:	ce 01       	movw	r24, r28
    29d6:	83 53       	subi	r24, 0x33	; 51
    29d8:	9f 4f       	sbci	r25, 0xFF	; 255
    29da:	21 e0       	ldi	r18, 0x01	; 1
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	fc 01       	movw	r30, r24
    29e0:	31 83       	std	Z+1, r19	; 0x01
    29e2:	20 83       	st	Z, r18
    29e4:	69 c0       	rjmp	.+210    	; 0x2ab8 <rotateStepper_2+0x12b4>
	else if (__tmp > 65535)
    29e6:	ce 01       	movw	r24, r28
    29e8:	87 53       	subi	r24, 0x37	; 55
    29ea:	9f 4f       	sbci	r25, 0xFF	; 255
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	3f ef       	ldi	r19, 0xFF	; 255
    29f0:	4f e7       	ldi	r20, 0x7F	; 127
    29f2:	57 e4       	ldi	r21, 0x47	; 71
    29f4:	fc 01       	movw	r30, r24
    29f6:	60 81       	ld	r22, Z
    29f8:	71 81       	ldd	r23, Z+1	; 0x01
    29fa:	82 81       	ldd	r24, Z+2	; 0x02
    29fc:	93 81       	ldd	r25, Z+3	; 0x03
    29fe:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    2a02:	18 16       	cp	r1, r24
    2a04:	0c f0       	brlt	.+2      	; 0x2a08 <rotateStepper_2+0x1204>
    2a06:	46 c0       	rjmp	.+140    	; 0x2a94 <rotateStepper_2+0x1290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e2       	ldi	r20, 0x20	; 32
    2a0e:	51 e4       	ldi	r21, 0x41	; 65
    2a10:	6f a9       	ldd	r22, Y+55	; 0x37
    2a12:	78 ad       	ldd	r23, Y+56	; 0x38
    2a14:	89 ad       	ldd	r24, Y+57	; 0x39
    2a16:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a18:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	8e 01       	movw	r16, r28
    2a22:	03 53       	subi	r16, 0x33	; 51
    2a24:	1f 4f       	sbci	r17, 0xFF	; 255
    2a26:	bc 01       	movw	r22, r24
    2a28:	cd 01       	movw	r24, r26
    2a2a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	f8 01       	movw	r30, r16
    2a34:	91 83       	std	Z+1, r25	; 0x01
    2a36:	80 83       	st	Z, r24
    2a38:	24 c0       	rjmp	.+72     	; 0x2a82 <rotateStepper_2+0x127e>
    2a3a:	ce 01       	movw	r24, r28
    2a3c:	81 53       	subi	r24, 0x31	; 49
    2a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a40:	20 e9       	ldi	r18, 0x90	; 144
    2a42:	31 e0       	ldi	r19, 0x01	; 1
    2a44:	fc 01       	movw	r30, r24
    2a46:	31 83       	std	Z+1, r19	; 0x01
    2a48:	20 83       	st	Z, r18
    2a4a:	ce 01       	movw	r24, r28
    2a4c:	81 53       	subi	r24, 0x31	; 49
    2a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a50:	fc 01       	movw	r30, r24
    2a52:	80 81       	ld	r24, Z
    2a54:	91 81       	ldd	r25, Z+1	; 0x01
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <rotateStepper_2+0x1252>
    2a5a:	9e 01       	movw	r18, r28
    2a5c:	21 53       	subi	r18, 0x31	; 49
    2a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a60:	f9 01       	movw	r30, r18
    2a62:	91 83       	std	Z+1, r25	; 0x01
    2a64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a66:	ce 01       	movw	r24, r28
    2a68:	83 53       	subi	r24, 0x33	; 51
    2a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6c:	9e 01       	movw	r18, r28
    2a6e:	23 53       	subi	r18, 0x33	; 51
    2a70:	3f 4f       	sbci	r19, 0xFF	; 255
    2a72:	f9 01       	movw	r30, r18
    2a74:	20 81       	ld	r18, Z
    2a76:	31 81       	ldd	r19, Z+1	; 0x01
    2a78:	21 50       	subi	r18, 0x01	; 1
    2a7a:	31 09       	sbc	r19, r1
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	31 83       	std	Z+1, r19	; 0x01
    2a80:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a82:	ce 01       	movw	r24, r28
    2a84:	83 53       	subi	r24, 0x33	; 51
    2a86:	9f 4f       	sbci	r25, 0xFF	; 255
    2a88:	fc 01       	movw	r30, r24
    2a8a:	80 81       	ld	r24, Z
    2a8c:	91 81       	ldd	r25, Z+1	; 0x01
    2a8e:	89 2b       	or	r24, r25
    2a90:	a1 f6       	brne	.-88     	; 0x2a3a <rotateStepper_2+0x1236>
    2a92:	2c c0       	rjmp	.+88     	; 0x2aec <rotateStepper_2+0x12e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a94:	8e 01       	movw	r16, r28
    2a96:	03 53       	subi	r16, 0x33	; 51
    2a98:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9a:	ce 01       	movw	r24, r28
    2a9c:	87 53       	subi	r24, 0x37	; 55
    2a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	f8 01       	movw	r30, r16
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	80 83       	st	Z, r24
    2ab8:	ce 01       	movw	r24, r28
    2aba:	8f 52       	subi	r24, 0x2F	; 47
    2abc:	9f 4f       	sbci	r25, 0xFF	; 255
    2abe:	9e 01       	movw	r18, r28
    2ac0:	23 53       	subi	r18, 0x33	; 51
    2ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac4:	f9 01       	movw	r30, r18
    2ac6:	20 81       	ld	r18, Z
    2ac8:	31 81       	ldd	r19, Z+1	; 0x01
    2aca:	fc 01       	movw	r30, r24
    2acc:	31 83       	std	Z+1, r19	; 0x01
    2ace:	20 83       	st	Z, r18
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	8f 52       	subi	r24, 0x2F	; 47
    2ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	80 81       	ld	r24, Z
    2ada:	91 81       	ldd	r25, Z+1	; 0x01
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <rotateStepper_2+0x12d8>
    2ae0:	9e 01       	movw	r18, r28
    2ae2:	2f 52       	subi	r18, 0x2F	; 47
    2ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae6:	f9 01       	movw	r30, r18
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	80 83       	st	Z, r24
			PORTA = 0xc0;
    2aec:	8b e3       	ldi	r24, 0x3B	; 59
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	20 ec       	ldi	r18, 0xC0	; 192
    2af2:	fc 01       	movw	r30, r24
    2af4:	20 83       	st	Z, r18
			_delay_ms(period);
    2af6:	8d 81       	ldd	r24, Y+5	; 0x05
    2af8:	9e 81       	ldd	r25, Y+6	; 0x06
    2afa:	09 2e       	mov	r0, r25
    2afc:	00 0c       	add	r0, r0
    2afe:	aa 0b       	sbc	r26, r26
    2b00:	bb 0b       	sbc	r27, r27
    2b02:	bc 01       	movw	r22, r24
    2b04:	cd 01       	movw	r24, r26
    2b06:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	8b af       	std	Y+59, r24	; 0x3b
    2b10:	9c af       	std	Y+60, r25	; 0x3c
    2b12:	ad af       	std	Y+61, r26	; 0x3d
    2b14:	be af       	std	Y+62, r27	; 0x3e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b16:	8e 01       	movw	r16, r28
    2b18:	01 54       	subi	r16, 0x41	; 65
    2b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	4a e7       	ldi	r20, 0x7A	; 122
    2b22:	55 e4       	ldi	r21, 0x45	; 69
    2b24:	6b ad       	ldd	r22, Y+59	; 0x3b
    2b26:	7c ad       	ldd	r23, Y+60	; 0x3c
    2b28:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b2c:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	f8 01       	movw	r30, r16
    2b36:	80 83       	st	Z, r24
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	a2 83       	std	Z+2, r26	; 0x02
    2b3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b3e:	ce 01       	movw	r24, r28
    2b40:	81 54       	subi	r24, 0x41	; 65
    2b42:	9f 4f       	sbci	r25, 0xFF	; 255
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e8       	ldi	r20, 0x80	; 128
    2b4a:	5f e3       	ldi	r21, 0x3F	; 63
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	60 81       	ld	r22, Z
    2b50:	71 81       	ldd	r23, Z+1	; 0x01
    2b52:	82 81       	ldd	r24, Z+2	; 0x02
    2b54:	93 81       	ldd	r25, Z+3	; 0x03
    2b56:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    2b5a:	88 23       	and	r24, r24
    2b5c:	4c f4       	brge	.+18     	; 0x2b70 <rotateStepper_2+0x136c>
		__ticks = 1;
    2b5e:	ce 01       	movw	r24, r28
    2b60:	8d 53       	subi	r24, 0x3D	; 61
    2b62:	9f 4f       	sbci	r25, 0xFF	; 255
    2b64:	21 e0       	ldi	r18, 0x01	; 1
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	fc 01       	movw	r30, r24
    2b6a:	31 83       	std	Z+1, r19	; 0x01
    2b6c:	20 83       	st	Z, r18
    2b6e:	69 c0       	rjmp	.+210    	; 0x2c42 <rotateStepper_2+0x143e>
	else if (__tmp > 65535)
    2b70:	ce 01       	movw	r24, r28
    2b72:	81 54       	subi	r24, 0x41	; 65
    2b74:	9f 4f       	sbci	r25, 0xFF	; 255
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	3f ef       	ldi	r19, 0xFF	; 255
    2b7a:	4f e7       	ldi	r20, 0x7F	; 127
    2b7c:	57 e4       	ldi	r21, 0x47	; 71
    2b7e:	fc 01       	movw	r30, r24
    2b80:	60 81       	ld	r22, Z
    2b82:	71 81       	ldd	r23, Z+1	; 0x01
    2b84:	82 81       	ldd	r24, Z+2	; 0x02
    2b86:	93 81       	ldd	r25, Z+3	; 0x03
    2b88:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    2b8c:	18 16       	cp	r1, r24
    2b8e:	0c f0       	brlt	.+2      	; 0x2b92 <rotateStepper_2+0x138e>
    2b90:	46 c0       	rjmp	.+140    	; 0x2c1e <rotateStepper_2+0x141a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e2       	ldi	r20, 0x20	; 32
    2b98:	51 e4       	ldi	r21, 0x41	; 65
    2b9a:	6b ad       	ldd	r22, Y+59	; 0x3b
    2b9c:	7c ad       	ldd	r23, Y+60	; 0x3c
    2b9e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ba0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ba2:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	8e 01       	movw	r16, r28
    2bac:	0d 53       	subi	r16, 0x3D	; 61
    2bae:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb0:	bc 01       	movw	r22, r24
    2bb2:	cd 01       	movw	r24, r26
    2bb4:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	f8 01       	movw	r30, r16
    2bbe:	91 83       	std	Z+1, r25	; 0x01
    2bc0:	80 83       	st	Z, r24
    2bc2:	24 c0       	rjmp	.+72     	; 0x2c0c <rotateStepper_2+0x1408>
    2bc4:	ce 01       	movw	r24, r28
    2bc6:	8b 53       	subi	r24, 0x3B	; 59
    2bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bca:	20 e9       	ldi	r18, 0x90	; 144
    2bcc:	31 e0       	ldi	r19, 0x01	; 1
    2bce:	fc 01       	movw	r30, r24
    2bd0:	31 83       	std	Z+1, r19	; 0x01
    2bd2:	20 83       	st	Z, r18
    2bd4:	ce 01       	movw	r24, r28
    2bd6:	8b 53       	subi	r24, 0x3B	; 59
    2bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bda:	fc 01       	movw	r30, r24
    2bdc:	80 81       	ld	r24, Z
    2bde:	91 81       	ldd	r25, Z+1	; 0x01
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <rotateStepper_2+0x13dc>
    2be4:	9e 01       	movw	r18, r28
    2be6:	2b 53       	subi	r18, 0x3B	; 59
    2be8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bea:	f9 01       	movw	r30, r18
    2bec:	91 83       	std	Z+1, r25	; 0x01
    2bee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	8d 53       	subi	r24, 0x3D	; 61
    2bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf6:	9e 01       	movw	r18, r28
    2bf8:	2d 53       	subi	r18, 0x3D	; 61
    2bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2bfc:	f9 01       	movw	r30, r18
    2bfe:	20 81       	ld	r18, Z
    2c00:	31 81       	ldd	r19, Z+1	; 0x01
    2c02:	21 50       	subi	r18, 0x01	; 1
    2c04:	31 09       	sbc	r19, r1
    2c06:	fc 01       	movw	r30, r24
    2c08:	31 83       	std	Z+1, r19	; 0x01
    2c0a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	8d 53       	subi	r24, 0x3D	; 61
    2c10:	9f 4f       	sbci	r25, 0xFF	; 255
    2c12:	fc 01       	movw	r30, r24
    2c14:	80 81       	ld	r24, Z
    2c16:	91 81       	ldd	r25, Z+1	; 0x01
    2c18:	89 2b       	or	r24, r25
    2c1a:	a1 f6       	brne	.-88     	; 0x2bc4 <rotateStepper_2+0x13c0>
    2c1c:	2c c0       	rjmp	.+88     	; 0x2c76 <rotateStepper_2+0x1472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c1e:	8e 01       	movw	r16, r28
    2c20:	0d 53       	subi	r16, 0x3D	; 61
    2c22:	1f 4f       	sbci	r17, 0xFF	; 255
    2c24:	ce 01       	movw	r24, r28
    2c26:	81 54       	subi	r24, 0x41	; 65
    2c28:	9f 4f       	sbci	r25, 0xFF	; 255
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	60 81       	ld	r22, Z
    2c2e:	71 81       	ldd	r23, Z+1	; 0x01
    2c30:	82 81       	ldd	r24, Z+2	; 0x02
    2c32:	93 81       	ldd	r25, Z+3	; 0x03
    2c34:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	91 83       	std	Z+1, r25	; 0x01
    2c40:	80 83       	st	Z, r24
    2c42:	ce 01       	movw	r24, r28
    2c44:	89 53       	subi	r24, 0x39	; 57
    2c46:	9f 4f       	sbci	r25, 0xFF	; 255
    2c48:	9e 01       	movw	r18, r28
    2c4a:	2d 53       	subi	r18, 0x3D	; 61
    2c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4e:	f9 01       	movw	r30, r18
    2c50:	20 81       	ld	r18, Z
    2c52:	31 81       	ldd	r19, Z+1	; 0x01
    2c54:	fc 01       	movw	r30, r24
    2c56:	31 83       	std	Z+1, r19	; 0x01
    2c58:	20 83       	st	Z, r18
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	89 53       	subi	r24, 0x39	; 57
    2c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c60:	fc 01       	movw	r30, r24
    2c62:	80 81       	ld	r24, Z
    2c64:	91 81       	ldd	r25, Z+1	; 0x01
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <rotateStepper_2+0x1462>
    2c6a:	9e 01       	movw	r18, r28
    2c6c:	29 53       	subi	r18, 0x39	; 57
    2c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c70:	f9 01       	movw	r30, r18
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	80 83       	st	Z, r24
			PORTA = 0x60;
    2c76:	8b e3       	ldi	r24, 0x3B	; 59
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	20 e6       	ldi	r18, 0x60	; 96
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	20 83       	st	Z, r18
			_delay_ms(period);
    2c80:	8d 81       	ldd	r24, Y+5	; 0x05
    2c82:	9e 81       	ldd	r25, Y+6	; 0x06
    2c84:	09 2e       	mov	r0, r25
    2c86:	00 0c       	add	r0, r0
    2c88:	aa 0b       	sbc	r26, r26
    2c8a:	bb 0b       	sbc	r27, r27
    2c8c:	bc 01       	movw	r22, r24
    2c8e:	cd 01       	movw	r24, r26
    2c90:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	9e 01       	movw	r18, r28
    2c9a:	21 5c       	subi	r18, 0xC1	; 193
    2c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c9e:	f9 01       	movw	r30, r18
    2ca0:	80 83       	st	Z, r24
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	a2 83       	std	Z+2, r26	; 0x02
    2ca6:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ca8:	8e 01       	movw	r16, r28
    2caa:	0b 54       	subi	r16, 0x4B	; 75
    2cac:	1f 4f       	sbci	r17, 0xFF	; 255
    2cae:	ce 01       	movw	r24, r28
    2cb0:	cf 96       	adiw	r24, 0x3f	; 63
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	4a e7       	ldi	r20, 0x7A	; 122
    2cb8:	55 e4       	ldi	r21, 0x45	; 69
    2cba:	fc 01       	movw	r30, r24
    2cbc:	60 81       	ld	r22, Z
    2cbe:	71 81       	ldd	r23, Z+1	; 0x01
    2cc0:	82 81       	ldd	r24, Z+2	; 0x02
    2cc2:	93 81       	ldd	r25, Z+3	; 0x03
    2cc4:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	f8 01       	movw	r30, r16
    2cce:	80 83       	st	Z, r24
    2cd0:	91 83       	std	Z+1, r25	; 0x01
    2cd2:	a2 83       	std	Z+2, r26	; 0x02
    2cd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cd6:	ce 01       	movw	r24, r28
    2cd8:	8b 54       	subi	r24, 0x4B	; 75
    2cda:	9f 4f       	sbci	r25, 0xFF	; 255
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	40 e8       	ldi	r20, 0x80	; 128
    2ce2:	5f e3       	ldi	r21, 0x3F	; 63
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	60 81       	ld	r22, Z
    2ce8:	71 81       	ldd	r23, Z+1	; 0x01
    2cea:	82 81       	ldd	r24, Z+2	; 0x02
    2cec:	93 81       	ldd	r25, Z+3	; 0x03
    2cee:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    2cf2:	88 23       	and	r24, r24
    2cf4:	4c f4       	brge	.+18     	; 0x2d08 <rotateStepper_2+0x1504>
		__ticks = 1;
    2cf6:	ce 01       	movw	r24, r28
    2cf8:	87 54       	subi	r24, 0x47	; 71
    2cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfc:	21 e0       	ldi	r18, 0x01	; 1
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	fc 01       	movw	r30, r24
    2d02:	31 83       	std	Z+1, r19	; 0x01
    2d04:	20 83       	st	Z, r18
    2d06:	6c c0       	rjmp	.+216    	; 0x2de0 <rotateStepper_2+0x15dc>
	else if (__tmp > 65535)
    2d08:	ce 01       	movw	r24, r28
    2d0a:	8b 54       	subi	r24, 0x4B	; 75
    2d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	3f ef       	ldi	r19, 0xFF	; 255
    2d12:	4f e7       	ldi	r20, 0x7F	; 127
    2d14:	57 e4       	ldi	r21, 0x47	; 71
    2d16:	fc 01       	movw	r30, r24
    2d18:	60 81       	ld	r22, Z
    2d1a:	71 81       	ldd	r23, Z+1	; 0x01
    2d1c:	82 81       	ldd	r24, Z+2	; 0x02
    2d1e:	93 81       	ldd	r25, Z+3	; 0x03
    2d20:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    2d24:	18 16       	cp	r1, r24
    2d26:	0c f0       	brlt	.+2      	; 0x2d2a <rotateStepper_2+0x1526>
    2d28:	49 c0       	rjmp	.+146    	; 0x2dbc <rotateStepper_2+0x15b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	cf 96       	adiw	r24, 0x3f	; 63
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e2       	ldi	r20, 0x20	; 32
    2d34:	51 e4       	ldi	r21, 0x41	; 65
    2d36:	fc 01       	movw	r30, r24
    2d38:	60 81       	ld	r22, Z
    2d3a:	71 81       	ldd	r23, Z+1	; 0x01
    2d3c:	82 81       	ldd	r24, Z+2	; 0x02
    2d3e:	93 81       	ldd	r25, Z+3	; 0x03
    2d40:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	8e 01       	movw	r16, r28
    2d4a:	07 54       	subi	r16, 0x47	; 71
    2d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4e:	bc 01       	movw	r22, r24
    2d50:	cd 01       	movw	r24, r26
    2d52:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	f8 01       	movw	r30, r16
    2d5c:	91 83       	std	Z+1, r25	; 0x01
    2d5e:	80 83       	st	Z, r24
    2d60:	24 c0       	rjmp	.+72     	; 0x2daa <rotateStepper_2+0x15a6>
    2d62:	ce 01       	movw	r24, r28
    2d64:	85 54       	subi	r24, 0x45	; 69
    2d66:	9f 4f       	sbci	r25, 0xFF	; 255
    2d68:	20 e9       	ldi	r18, 0x90	; 144
    2d6a:	31 e0       	ldi	r19, 0x01	; 1
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	31 83       	std	Z+1, r19	; 0x01
    2d70:	20 83       	st	Z, r18
    2d72:	ce 01       	movw	r24, r28
    2d74:	85 54       	subi	r24, 0x45	; 69
    2d76:	9f 4f       	sbci	r25, 0xFF	; 255
    2d78:	fc 01       	movw	r30, r24
    2d7a:	80 81       	ld	r24, Z
    2d7c:	91 81       	ldd	r25, Z+1	; 0x01
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	f1 f7       	brne	.-4      	; 0x2d7e <rotateStepper_2+0x157a>
    2d82:	9e 01       	movw	r18, r28
    2d84:	25 54       	subi	r18, 0x45	; 69
    2d86:	3f 4f       	sbci	r19, 0xFF	; 255
    2d88:	f9 01       	movw	r30, r18
    2d8a:	91 83       	std	Z+1, r25	; 0x01
    2d8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d8e:	ce 01       	movw	r24, r28
    2d90:	87 54       	subi	r24, 0x47	; 71
    2d92:	9f 4f       	sbci	r25, 0xFF	; 255
    2d94:	9e 01       	movw	r18, r28
    2d96:	27 54       	subi	r18, 0x47	; 71
    2d98:	3f 4f       	sbci	r19, 0xFF	; 255
    2d9a:	f9 01       	movw	r30, r18
    2d9c:	20 81       	ld	r18, Z
    2d9e:	31 81       	ldd	r19, Z+1	; 0x01
    2da0:	21 50       	subi	r18, 0x01	; 1
    2da2:	31 09       	sbc	r19, r1
    2da4:	fc 01       	movw	r30, r24
    2da6:	31 83       	std	Z+1, r19	; 0x01
    2da8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2daa:	ce 01       	movw	r24, r28
    2dac:	87 54       	subi	r24, 0x47	; 71
    2dae:	9f 4f       	sbci	r25, 0xFF	; 255
    2db0:	fc 01       	movw	r30, r24
    2db2:	80 81       	ld	r24, Z
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	89 2b       	or	r24, r25
    2db8:	a1 f6       	brne	.-88     	; 0x2d62 <rotateStepper_2+0x155e>
    2dba:	2c c0       	rjmp	.+88     	; 0x2e14 <rotateStepper_2+0x1610>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbc:	8e 01       	movw	r16, r28
    2dbe:	07 54       	subi	r16, 0x47	; 71
    2dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc2:	ce 01       	movw	r24, r28
    2dc4:	8b 54       	subi	r24, 0x4B	; 75
    2dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc8:	fc 01       	movw	r30, r24
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	f8 01       	movw	r30, r16
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	80 83       	st	Z, r24
    2de0:	ce 01       	movw	r24, r28
    2de2:	83 54       	subi	r24, 0x43	; 67
    2de4:	9f 4f       	sbci	r25, 0xFF	; 255
    2de6:	9e 01       	movw	r18, r28
    2de8:	27 54       	subi	r18, 0x47	; 71
    2dea:	3f 4f       	sbci	r19, 0xFF	; 255
    2dec:	f9 01       	movw	r30, r18
    2dee:	20 81       	ld	r18, Z
    2df0:	31 81       	ldd	r19, Z+1	; 0x01
    2df2:	fc 01       	movw	r30, r24
    2df4:	31 83       	std	Z+1, r19	; 0x01
    2df6:	20 83       	st	Z, r18
    2df8:	ce 01       	movw	r24, r28
    2dfa:	83 54       	subi	r24, 0x43	; 67
    2dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfe:	fc 01       	movw	r30, r24
    2e00:	80 81       	ld	r24, Z
    2e02:	91 81       	ldd	r25, Z+1	; 0x01
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <rotateStepper_2+0x1600>
    2e08:	9e 01       	movw	r18, r28
    2e0a:	23 54       	subi	r18, 0x43	; 67
    2e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0e:	f9 01       	movw	r30, r18
    2e10:	91 83       	std	Z+1, r25	; 0x01
    2e12:	80 83       	st	Z, r24
			PORTA = 0x30;
    2e14:	8b e3       	ldi	r24, 0x3B	; 59
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	20 e3       	ldi	r18, 0x30	; 48
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	20 83       	st	Z, r18
			_delay_ms(period);
    2e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e20:	9e 81       	ldd	r25, Y+6	; 0x06
    2e22:	09 2e       	mov	r0, r25
    2e24:	00 0c       	add	r0, r0
    2e26:	aa 0b       	sbc	r26, r26
    2e28:	bb 0b       	sbc	r27, r27
    2e2a:	bc 01       	movw	r22, r24
    2e2c:	cd 01       	movw	r24, r26
    2e2e:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	8b a7       	std	Y+43, r24	; 0x2b
    2e38:	9c a7       	std	Y+44, r25	; 0x2c
    2e3a:	ad a7       	std	Y+45, r26	; 0x2d
    2e3c:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2e3e:	8e 01       	movw	r16, r28
    2e40:	05 55       	subi	r16, 0x55	; 85
    2e42:	1f 4f       	sbci	r17, 0xFF	; 255
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	4a e7       	ldi	r20, 0x7A	; 122
    2e4a:	55 e4       	ldi	r21, 0x45	; 69
    2e4c:	6b a5       	ldd	r22, Y+43	; 0x2b
    2e4e:	7c a5       	ldd	r23, Y+44	; 0x2c
    2e50:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e52:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e54:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	f8 01       	movw	r30, r16
    2e5e:	80 83       	st	Z, r24
    2e60:	91 83       	std	Z+1, r25	; 0x01
    2e62:	a2 83       	std	Z+2, r26	; 0x02
    2e64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e66:	ce 01       	movw	r24, r28
    2e68:	85 55       	subi	r24, 0x55	; 85
    2e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e8       	ldi	r20, 0x80	; 128
    2e72:	5f e3       	ldi	r21, 0x3F	; 63
    2e74:	fc 01       	movw	r30, r24
    2e76:	60 81       	ld	r22, Z
    2e78:	71 81       	ldd	r23, Z+1	; 0x01
    2e7a:	82 81       	ldd	r24, Z+2	; 0x02
    2e7c:	93 81       	ldd	r25, Z+3	; 0x03
    2e7e:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    2e82:	88 23       	and	r24, r24
    2e84:	4c f4       	brge	.+18     	; 0x2e98 <rotateStepper_2+0x1694>
		__ticks = 1;
    2e86:	ce 01       	movw	r24, r28
    2e88:	81 55       	subi	r24, 0x51	; 81
    2e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e8c:	21 e0       	ldi	r18, 0x01	; 1
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	fc 01       	movw	r30, r24
    2e92:	31 83       	std	Z+1, r19	; 0x01
    2e94:	20 83       	st	Z, r18
    2e96:	69 c0       	rjmp	.+210    	; 0x2f6a <rotateStepper_2+0x1766>
	else if (__tmp > 65535)
    2e98:	ce 01       	movw	r24, r28
    2e9a:	85 55       	subi	r24, 0x55	; 85
    2e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	3f ef       	ldi	r19, 0xFF	; 255
    2ea2:	4f e7       	ldi	r20, 0x7F	; 127
    2ea4:	57 e4       	ldi	r21, 0x47	; 71
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	60 81       	ld	r22, Z
    2eaa:	71 81       	ldd	r23, Z+1	; 0x01
    2eac:	82 81       	ldd	r24, Z+2	; 0x02
    2eae:	93 81       	ldd	r25, Z+3	; 0x03
    2eb0:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    2eb4:	18 16       	cp	r1, r24
    2eb6:	0c f0       	brlt	.+2      	; 0x2eba <rotateStepper_2+0x16b6>
    2eb8:	46 c0       	rjmp	.+140    	; 0x2f46 <rotateStepper_2+0x1742>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e2       	ldi	r20, 0x20	; 32
    2ec0:	51 e4       	ldi	r21, 0x41	; 65
    2ec2:	6b a5       	ldd	r22, Y+43	; 0x2b
    2ec4:	7c a5       	ldd	r23, Y+44	; 0x2c
    2ec6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ec8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2eca:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	8e 01       	movw	r16, r28
    2ed4:	01 55       	subi	r16, 0x51	; 81
    2ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	f8 01       	movw	r30, r16
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	80 83       	st	Z, r24
    2eea:	24 c0       	rjmp	.+72     	; 0x2f34 <rotateStepper_2+0x1730>
    2eec:	ce 01       	movw	r24, r28
    2eee:	8f 54       	subi	r24, 0x4F	; 79
    2ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef2:	20 e9       	ldi	r18, 0x90	; 144
    2ef4:	31 e0       	ldi	r19, 0x01	; 1
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	31 83       	std	Z+1, r19	; 0x01
    2efa:	20 83       	st	Z, r18
    2efc:	ce 01       	movw	r24, r28
    2efe:	8f 54       	subi	r24, 0x4F	; 79
    2f00:	9f 4f       	sbci	r25, 0xFF	; 255
    2f02:	fc 01       	movw	r30, r24
    2f04:	80 81       	ld	r24, Z
    2f06:	91 81       	ldd	r25, Z+1	; 0x01
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	f1 f7       	brne	.-4      	; 0x2f08 <rotateStepper_2+0x1704>
    2f0c:	9e 01       	movw	r18, r28
    2f0e:	2f 54       	subi	r18, 0x4F	; 79
    2f10:	3f 4f       	sbci	r19, 0xFF	; 255
    2f12:	f9 01       	movw	r30, r18
    2f14:	91 83       	std	Z+1, r25	; 0x01
    2f16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f18:	ce 01       	movw	r24, r28
    2f1a:	81 55       	subi	r24, 0x51	; 81
    2f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f1e:	9e 01       	movw	r18, r28
    2f20:	21 55       	subi	r18, 0x51	; 81
    2f22:	3f 4f       	sbci	r19, 0xFF	; 255
    2f24:	f9 01       	movw	r30, r18
    2f26:	20 81       	ld	r18, Z
    2f28:	31 81       	ldd	r19, Z+1	; 0x01
    2f2a:	21 50       	subi	r18, 0x01	; 1
    2f2c:	31 09       	sbc	r19, r1
    2f2e:	fc 01       	movw	r30, r24
    2f30:	31 83       	std	Z+1, r19	; 0x01
    2f32:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f34:	ce 01       	movw	r24, r28
    2f36:	81 55       	subi	r24, 0x51	; 81
    2f38:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	80 81       	ld	r24, Z
    2f3e:	91 81       	ldd	r25, Z+1	; 0x01
    2f40:	89 2b       	or	r24, r25
    2f42:	a1 f6       	brne	.-88     	; 0x2eec <rotateStepper_2+0x16e8>
    2f44:	2c c0       	rjmp	.+88     	; 0x2f9e <rotateStepper_2+0x179a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f46:	8e 01       	movw	r16, r28
    2f48:	01 55       	subi	r16, 0x51	; 81
    2f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4c:	ce 01       	movw	r24, r28
    2f4e:	85 55       	subi	r24, 0x55	; 85
    2f50:	9f 4f       	sbci	r25, 0xFF	; 255
    2f52:	fc 01       	movw	r30, r24
    2f54:	60 81       	ld	r22, Z
    2f56:	71 81       	ldd	r23, Z+1	; 0x01
    2f58:	82 81       	ldd	r24, Z+2	; 0x02
    2f5a:	93 81       	ldd	r25, Z+3	; 0x03
    2f5c:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	f8 01       	movw	r30, r16
    2f66:	91 83       	std	Z+1, r25	; 0x01
    2f68:	80 83       	st	Z, r24
    2f6a:	ce 01       	movw	r24, r28
    2f6c:	8d 54       	subi	r24, 0x4D	; 77
    2f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f70:	9e 01       	movw	r18, r28
    2f72:	21 55       	subi	r18, 0x51	; 81
    2f74:	3f 4f       	sbci	r19, 0xFF	; 255
    2f76:	f9 01       	movw	r30, r18
    2f78:	20 81       	ld	r18, Z
    2f7a:	31 81       	ldd	r19, Z+1	; 0x01
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	31 83       	std	Z+1, r19	; 0x01
    2f80:	20 83       	st	Z, r18
    2f82:	ce 01       	movw	r24, r28
    2f84:	8d 54       	subi	r24, 0x4D	; 77
    2f86:	9f 4f       	sbci	r25, 0xFF	; 255
    2f88:	fc 01       	movw	r30, r24
    2f8a:	80 81       	ld	r24, Z
    2f8c:	91 81       	ldd	r25, Z+1	; 0x01
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	f1 f7       	brne	.-4      	; 0x2f8e <rotateStepper_2+0x178a>
    2f92:	9e 01       	movw	r18, r28
    2f94:	2d 54       	subi	r18, 0x4D	; 77
    2f96:	3f 4f       	sbci	r19, 0xFF	; 255
    2f98:	f9 01       	movw	r30, r18
    2f9a:	91 83       	std	Z+1, r25	; 0x01
    2f9c:	80 83       	st	Z, r24
		_delay_ms(10);
	}
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < 50; i++)
    2f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa2:	01 96       	adiw	r24, 0x01	; 1
    2fa4:	9c 83       	std	Y+4, r25	; 0x04
    2fa6:	8b 83       	std	Y+3, r24	; 0x03
    2fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2faa:	9c 81       	ldd	r25, Y+4	; 0x04
    2fac:	c2 97       	sbiw	r24, 0x32	; 50
    2fae:	0c f4       	brge	.+2      	; 0x2fb2 <rotateStepper_2+0x17ae>
    2fb0:	13 cc       	rjmp	.-2010   	; 0x27d8 <rotateStepper_2+0xfd4>
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	a0 e2       	ldi	r26, 0x20	; 32
    2fb8:	b1 e4       	ldi	r27, 0x41	; 65
    2fba:	8f a7       	std	Y+47, r24	; 0x2f
    2fbc:	98 ab       	std	Y+48, r25	; 0x30
    2fbe:	a9 ab       	std	Y+49, r26	; 0x31
    2fc0:	ba ab       	std	Y+50, r27	; 0x32

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2fc2:	8e 01       	movw	r16, r28
    2fc4:	03 52       	subi	r16, 0x23	; 35
    2fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	4a e7       	ldi	r20, 0x7A	; 122
    2fce:	55 e4       	ldi	r21, 0x45	; 69
    2fd0:	6f a5       	ldd	r22, Y+47	; 0x2f
    2fd2:	78 a9       	ldd	r23, Y+48	; 0x30
    2fd4:	89 a9       	ldd	r24, Y+49	; 0x31
    2fd6:	9a a9       	ldd	r25, Y+50	; 0x32
    2fd8:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	f8 01       	movw	r30, r16
    2fe2:	80 83       	st	Z, r24
    2fe4:	91 83       	std	Z+1, r25	; 0x01
    2fe6:	a2 83       	std	Z+2, r26	; 0x02
    2fe8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fea:	ce 01       	movw	r24, r28
    2fec:	83 52       	subi	r24, 0x23	; 35
    2fee:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e8       	ldi	r20, 0x80	; 128
    2ff6:	5f e3       	ldi	r21, 0x3F	; 63
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	60 81       	ld	r22, Z
    2ffc:	71 81       	ldd	r23, Z+1	; 0x01
    2ffe:	82 81       	ldd	r24, Z+2	; 0x02
    3000:	93 81       	ldd	r25, Z+3	; 0x03
    3002:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    3006:	88 23       	and	r24, r24
    3008:	4c f4       	brge	.+18     	; 0x301c <rotateStepper_2+0x1818>
		__ticks = 1;
    300a:	ce 01       	movw	r24, r28
    300c:	8f 51       	subi	r24, 0x1F	; 31
    300e:	9f 4f       	sbci	r25, 0xFF	; 255
    3010:	21 e0       	ldi	r18, 0x01	; 1
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	fc 01       	movw	r30, r24
    3016:	31 83       	std	Z+1, r19	; 0x01
    3018:	20 83       	st	Z, r18
    301a:	69 c0       	rjmp	.+210    	; 0x30ee <rotateStepper_2+0x18ea>
	else if (__tmp > 65535)
    301c:	ce 01       	movw	r24, r28
    301e:	83 52       	subi	r24, 0x23	; 35
    3020:	9f 4f       	sbci	r25, 0xFF	; 255
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	3f ef       	ldi	r19, 0xFF	; 255
    3026:	4f e7       	ldi	r20, 0x7F	; 127
    3028:	57 e4       	ldi	r21, 0x47	; 71
    302a:	fc 01       	movw	r30, r24
    302c:	60 81       	ld	r22, Z
    302e:	71 81       	ldd	r23, Z+1	; 0x01
    3030:	82 81       	ldd	r24, Z+2	; 0x02
    3032:	93 81       	ldd	r25, Z+3	; 0x03
    3034:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    3038:	18 16       	cp	r1, r24
    303a:	0c f0       	brlt	.+2      	; 0x303e <rotateStepper_2+0x183a>
    303c:	46 c0       	rjmp	.+140    	; 0x30ca <rotateStepper_2+0x18c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	40 e2       	ldi	r20, 0x20	; 32
    3044:	51 e4       	ldi	r21, 0x41	; 65
    3046:	6f a5       	ldd	r22, Y+47	; 0x2f
    3048:	78 a9       	ldd	r23, Y+48	; 0x30
    304a:	89 a9       	ldd	r24, Y+49	; 0x31
    304c:	9a a9       	ldd	r25, Y+50	; 0x32
    304e:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	8e 01       	movw	r16, r28
    3058:	0f 51       	subi	r16, 0x1F	; 31
    305a:	1f 4f       	sbci	r17, 0xFF	; 255
    305c:	bc 01       	movw	r22, r24
    305e:	cd 01       	movw	r24, r26
    3060:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	f8 01       	movw	r30, r16
    306a:	91 83       	std	Z+1, r25	; 0x01
    306c:	80 83       	st	Z, r24
    306e:	24 c0       	rjmp	.+72     	; 0x30b8 <rotateStepper_2+0x18b4>
    3070:	ce 01       	movw	r24, r28
    3072:	8d 51       	subi	r24, 0x1D	; 29
    3074:	9f 4f       	sbci	r25, 0xFF	; 255
    3076:	20 e9       	ldi	r18, 0x90	; 144
    3078:	31 e0       	ldi	r19, 0x01	; 1
    307a:	fc 01       	movw	r30, r24
    307c:	31 83       	std	Z+1, r19	; 0x01
    307e:	20 83       	st	Z, r18
    3080:	ce 01       	movw	r24, r28
    3082:	8d 51       	subi	r24, 0x1D	; 29
    3084:	9f 4f       	sbci	r25, 0xFF	; 255
    3086:	fc 01       	movw	r30, r24
    3088:	80 81       	ld	r24, Z
    308a:	91 81       	ldd	r25, Z+1	; 0x01
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <rotateStepper_2+0x1888>
    3090:	9e 01       	movw	r18, r28
    3092:	2d 51       	subi	r18, 0x1D	; 29
    3094:	3f 4f       	sbci	r19, 0xFF	; 255
    3096:	f9 01       	movw	r30, r18
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309c:	ce 01       	movw	r24, r28
    309e:	8f 51       	subi	r24, 0x1F	; 31
    30a0:	9f 4f       	sbci	r25, 0xFF	; 255
    30a2:	9e 01       	movw	r18, r28
    30a4:	2f 51       	subi	r18, 0x1F	; 31
    30a6:	3f 4f       	sbci	r19, 0xFF	; 255
    30a8:	f9 01       	movw	r30, r18
    30aa:	20 81       	ld	r18, Z
    30ac:	31 81       	ldd	r19, Z+1	; 0x01
    30ae:	21 50       	subi	r18, 0x01	; 1
    30b0:	31 09       	sbc	r19, r1
    30b2:	fc 01       	movw	r30, r24
    30b4:	31 83       	std	Z+1, r19	; 0x01
    30b6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b8:	ce 01       	movw	r24, r28
    30ba:	8f 51       	subi	r24, 0x1F	; 31
    30bc:	9f 4f       	sbci	r25, 0xFF	; 255
    30be:	fc 01       	movw	r30, r24
    30c0:	80 81       	ld	r24, Z
    30c2:	91 81       	ldd	r25, Z+1	; 0x01
    30c4:	89 2b       	or	r24, r25
    30c6:	a1 f6       	brne	.-88     	; 0x3070 <rotateStepper_2+0x186c>
			_delay_ms(period);
		}

		_delay_ms(10);
	}
}
    30c8:	2c c0       	rjmp	.+88     	; 0x3122 <rotateStepper_2+0x191e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ca:	8e 01       	movw	r16, r28
    30cc:	0f 51       	subi	r16, 0x1F	; 31
    30ce:	1f 4f       	sbci	r17, 0xFF	; 255
    30d0:	ce 01       	movw	r24, r28
    30d2:	83 52       	subi	r24, 0x23	; 35
    30d4:	9f 4f       	sbci	r25, 0xFF	; 255
    30d6:	fc 01       	movw	r30, r24
    30d8:	60 81       	ld	r22, Z
    30da:	71 81       	ldd	r23, Z+1	; 0x01
    30dc:	82 81       	ldd	r24, Z+2	; 0x02
    30de:	93 81       	ldd	r25, Z+3	; 0x03
    30e0:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	f8 01       	movw	r30, r16
    30ea:	91 83       	std	Z+1, r25	; 0x01
    30ec:	80 83       	st	Z, r24
    30ee:	ce 01       	movw	r24, r28
    30f0:	8b 51       	subi	r24, 0x1B	; 27
    30f2:	9f 4f       	sbci	r25, 0xFF	; 255
    30f4:	9e 01       	movw	r18, r28
    30f6:	2f 51       	subi	r18, 0x1F	; 31
    30f8:	3f 4f       	sbci	r19, 0xFF	; 255
    30fa:	f9 01       	movw	r30, r18
    30fc:	20 81       	ld	r18, Z
    30fe:	31 81       	ldd	r19, Z+1	; 0x01
    3100:	fc 01       	movw	r30, r24
    3102:	31 83       	std	Z+1, r19	; 0x01
    3104:	20 83       	st	Z, r18
    3106:	ce 01       	movw	r24, r28
    3108:	8b 51       	subi	r24, 0x1B	; 27
    310a:	9f 4f       	sbci	r25, 0xFF	; 255
    310c:	fc 01       	movw	r30, r24
    310e:	80 81       	ld	r24, Z
    3110:	91 81       	ldd	r25, Z+1	; 0x01
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	f1 f7       	brne	.-4      	; 0x3112 <rotateStepper_2+0x190e>
    3116:	9e 01       	movw	r18, r28
    3118:	2b 51       	subi	r18, 0x1B	; 27
    311a:	3f 4f       	sbci	r19, 0xFF	; 255
    311c:	f9 01       	movw	r30, r18
    311e:	91 83       	std	Z+1, r25	; 0x01
    3120:	80 83       	st	Z, r24
    3122:	00 00       	nop
    3124:	c4 51       	subi	r28, 0x14	; 20
    3126:	df 4f       	sbci	r29, 0xFF	; 255
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	de bf       	out	0x3e, r29	; 62
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	cd bf       	out	0x3d, r28	; 61
    3132:	df 91       	pop	r29
    3134:	cf 91       	pop	r28
    3136:	1f 91       	pop	r17
    3138:	0f 91       	pop	r16
    313a:	08 95       	ret

0000313c <rotateStepper_3>:

void rotateStepper_3(int direction, float distance){
    313c:	0f 93       	push	r16
    313e:	1f 93       	push	r17
    3140:	cf 93       	push	r28
    3142:	df 93       	push	r29
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
    3148:	cc 5e       	subi	r28, 0xEC	; 236
    314a:	d1 09       	sbc	r29, r1
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	de bf       	out	0x3e, r29	; 62
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	cd bf       	out	0x3d, r28	; 61
    3156:	9e 01       	movw	r18, r28
    3158:	29 51       	subi	r18, 0x19	; 25
    315a:	3f 4f       	sbci	r19, 0xFF	; 255
    315c:	f9 01       	movw	r30, r18
    315e:	91 83       	std	Z+1, r25	; 0x01
    3160:	80 83       	st	Z, r24
    3162:	ce 01       	movw	r24, r28
    3164:	87 51       	subi	r24, 0x17	; 23
    3166:	9f 4f       	sbci	r25, 0xFF	; 255
    3168:	fc 01       	movw	r30, r24
    316a:	40 83       	st	Z, r20
    316c:	51 83       	std	Z+1, r21	; 0x01
    316e:	62 83       	std	Z+2, r22	; 0x02
    3170:	73 83       	std	Z+3, r23	; 0x03
	// clockwise-1
	// Counterclockwise-0
	// 1 distance unit = 1 rotating

	int period;
	period = 10;
    3172:	8a e0       	ldi	r24, 0x0A	; 10
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	9e 83       	std	Y+6, r25	; 0x06
    3178:	8d 83       	std	Y+5, r24	; 0x05
	if (direction == 1)
    317a:	ce 01       	movw	r24, r28
    317c:	89 51       	subi	r24, 0x19	; 25
    317e:	9f 4f       	sbci	r25, 0xFF	; 255
    3180:	fc 01       	movw	r30, r24
    3182:	80 81       	ld	r24, Z
    3184:	91 81       	ldd	r25, Z+1	; 0x01
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	09 f0       	breq	.+2      	; 0x318c <rotateStepper_3+0x50>
    318a:	bf c7       	rjmp	.+3966   	; 0x410a <rotateStepper_3+0xfce>
	{
		/* Rotate  clockwise */
		for (int i = 0; i < 50; i++)
    318c:	1a 82       	std	Y+2, r1	; 0x02
    318e:	19 82       	std	Y+1, r1	; 0x01
    3190:	fe c6       	rjmp	.+3580   	; 0x3f8e <rotateStepper_3+0xe52>
		{
			PORTC = 0x03;
    3192:	85 e3       	ldi	r24, 0x35	; 53
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	23 e0       	ldi	r18, 0x03	; 3
    3198:	fc 01       	movw	r30, r24
    319a:	20 83       	st	Z, r18
			_delay_ms(period);
    319c:	8d 81       	ldd	r24, Y+5	; 0x05
    319e:	9e 81       	ldd	r25, Y+6	; 0x06
    31a0:	09 2e       	mov	r0, r25
    31a2:	00 0c       	add	r0, r0
    31a4:	aa 0b       	sbc	r26, r26
    31a6:	bb 0b       	sbc	r27, r27
    31a8:	bc 01       	movw	r22, r24
    31aa:	cd 01       	movw	r24, r26
    31ac:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	8b 87       	std	Y+11, r24	; 0x0b
    31b6:	9c 87       	std	Y+12, r25	; 0x0c
    31b8:	ad 87       	std	Y+13, r26	; 0x0d
    31ba:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    31bc:	8e 01       	movw	r16, r28
    31be:	09 56       	subi	r16, 0x69	; 105
    31c0:	1f 4f       	sbci	r17, 0xFF	; 255
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	4a e7       	ldi	r20, 0x7A	; 122
    31c8:	55 e4       	ldi	r21, 0x45	; 69
    31ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    31cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d2:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	f8 01       	movw	r30, r16
    31dc:	80 83       	st	Z, r24
    31de:	91 83       	std	Z+1, r25	; 0x01
    31e0:	a2 83       	std	Z+2, r26	; 0x02
    31e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31e4:	ce 01       	movw	r24, r28
    31e6:	89 56       	subi	r24, 0x69	; 105
    31e8:	9f 4f       	sbci	r25, 0xFF	; 255
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	40 e8       	ldi	r20, 0x80	; 128
    31f0:	5f e3       	ldi	r21, 0x3F	; 63
    31f2:	fc 01       	movw	r30, r24
    31f4:	60 81       	ld	r22, Z
    31f6:	71 81       	ldd	r23, Z+1	; 0x01
    31f8:	82 81       	ldd	r24, Z+2	; 0x02
    31fa:	93 81       	ldd	r25, Z+3	; 0x03
    31fc:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    3200:	88 23       	and	r24, r24
    3202:	4c f4       	brge	.+18     	; 0x3216 <rotateStepper_3+0xda>
		__ticks = 1;
    3204:	ce 01       	movw	r24, r28
    3206:	85 56       	subi	r24, 0x65	; 101
    3208:	9f 4f       	sbci	r25, 0xFF	; 255
    320a:	21 e0       	ldi	r18, 0x01	; 1
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	fc 01       	movw	r30, r24
    3210:	31 83       	std	Z+1, r19	; 0x01
    3212:	20 83       	st	Z, r18
    3214:	69 c0       	rjmp	.+210    	; 0x32e8 <rotateStepper_3+0x1ac>
	else if (__tmp > 65535)
    3216:	ce 01       	movw	r24, r28
    3218:	89 56       	subi	r24, 0x69	; 105
    321a:	9f 4f       	sbci	r25, 0xFF	; 255
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	3f ef       	ldi	r19, 0xFF	; 255
    3220:	4f e7       	ldi	r20, 0x7F	; 127
    3222:	57 e4       	ldi	r21, 0x47	; 71
    3224:	fc 01       	movw	r30, r24
    3226:	60 81       	ld	r22, Z
    3228:	71 81       	ldd	r23, Z+1	; 0x01
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	93 81       	ldd	r25, Z+3	; 0x03
    322e:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    3232:	18 16       	cp	r1, r24
    3234:	0c f0       	brlt	.+2      	; 0x3238 <rotateStepper_3+0xfc>
    3236:	46 c0       	rjmp	.+140    	; 0x32c4 <rotateStepper_3+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	40 e2       	ldi	r20, 0x20	; 32
    323e:	51 e4       	ldi	r21, 0x41	; 65
    3240:	6b 85       	ldd	r22, Y+11	; 0x0b
    3242:	7c 85       	ldd	r23, Y+12	; 0x0c
    3244:	8d 85       	ldd	r24, Y+13	; 0x0d
    3246:	9e 85       	ldd	r25, Y+14	; 0x0e
    3248:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	8e 01       	movw	r16, r28
    3252:	05 56       	subi	r16, 0x65	; 101
    3254:	1f 4f       	sbci	r17, 0xFF	; 255
    3256:	bc 01       	movw	r22, r24
    3258:	cd 01       	movw	r24, r26
    325a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	f8 01       	movw	r30, r16
    3264:	91 83       	std	Z+1, r25	; 0x01
    3266:	80 83       	st	Z, r24
    3268:	24 c0       	rjmp	.+72     	; 0x32b2 <rotateStepper_3+0x176>
    326a:	ce 01       	movw	r24, r28
    326c:	83 56       	subi	r24, 0x63	; 99
    326e:	9f 4f       	sbci	r25, 0xFF	; 255
    3270:	20 e9       	ldi	r18, 0x90	; 144
    3272:	31 e0       	ldi	r19, 0x01	; 1
    3274:	fc 01       	movw	r30, r24
    3276:	31 83       	std	Z+1, r19	; 0x01
    3278:	20 83       	st	Z, r18
    327a:	ce 01       	movw	r24, r28
    327c:	83 56       	subi	r24, 0x63	; 99
    327e:	9f 4f       	sbci	r25, 0xFF	; 255
    3280:	fc 01       	movw	r30, r24
    3282:	80 81       	ld	r24, Z
    3284:	91 81       	ldd	r25, Z+1	; 0x01
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	f1 f7       	brne	.-4      	; 0x3286 <rotateStepper_3+0x14a>
    328a:	9e 01       	movw	r18, r28
    328c:	23 56       	subi	r18, 0x63	; 99
    328e:	3f 4f       	sbci	r19, 0xFF	; 255
    3290:	f9 01       	movw	r30, r18
    3292:	91 83       	std	Z+1, r25	; 0x01
    3294:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3296:	ce 01       	movw	r24, r28
    3298:	85 56       	subi	r24, 0x65	; 101
    329a:	9f 4f       	sbci	r25, 0xFF	; 255
    329c:	9e 01       	movw	r18, r28
    329e:	25 56       	subi	r18, 0x65	; 101
    32a0:	3f 4f       	sbci	r19, 0xFF	; 255
    32a2:	f9 01       	movw	r30, r18
    32a4:	20 81       	ld	r18, Z
    32a6:	31 81       	ldd	r19, Z+1	; 0x01
    32a8:	21 50       	subi	r18, 0x01	; 1
    32aa:	31 09       	sbc	r19, r1
    32ac:	fc 01       	movw	r30, r24
    32ae:	31 83       	std	Z+1, r19	; 0x01
    32b0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b2:	ce 01       	movw	r24, r28
    32b4:	85 56       	subi	r24, 0x65	; 101
    32b6:	9f 4f       	sbci	r25, 0xFF	; 255
    32b8:	fc 01       	movw	r30, r24
    32ba:	80 81       	ld	r24, Z
    32bc:	91 81       	ldd	r25, Z+1	; 0x01
    32be:	89 2b       	or	r24, r25
    32c0:	a1 f6       	brne	.-88     	; 0x326a <rotateStepper_3+0x12e>
    32c2:	2c c0       	rjmp	.+88     	; 0x331c <rotateStepper_3+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c4:	8e 01       	movw	r16, r28
    32c6:	05 56       	subi	r16, 0x65	; 101
    32c8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ca:	ce 01       	movw	r24, r28
    32cc:	89 56       	subi	r24, 0x69	; 105
    32ce:	9f 4f       	sbci	r25, 0xFF	; 255
    32d0:	fc 01       	movw	r30, r24
    32d2:	60 81       	ld	r22, Z
    32d4:	71 81       	ldd	r23, Z+1	; 0x01
    32d6:	82 81       	ldd	r24, Z+2	; 0x02
    32d8:	93 81       	ldd	r25, Z+3	; 0x03
    32da:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	f8 01       	movw	r30, r16
    32e4:	91 83       	std	Z+1, r25	; 0x01
    32e6:	80 83       	st	Z, r24
    32e8:	ce 01       	movw	r24, r28
    32ea:	81 56       	subi	r24, 0x61	; 97
    32ec:	9f 4f       	sbci	r25, 0xFF	; 255
    32ee:	9e 01       	movw	r18, r28
    32f0:	25 56       	subi	r18, 0x65	; 101
    32f2:	3f 4f       	sbci	r19, 0xFF	; 255
    32f4:	f9 01       	movw	r30, r18
    32f6:	20 81       	ld	r18, Z
    32f8:	31 81       	ldd	r19, Z+1	; 0x01
    32fa:	fc 01       	movw	r30, r24
    32fc:	31 83       	std	Z+1, r19	; 0x01
    32fe:	20 83       	st	Z, r18
    3300:	ce 01       	movw	r24, r28
    3302:	81 56       	subi	r24, 0x61	; 97
    3304:	9f 4f       	sbci	r25, 0xFF	; 255
    3306:	fc 01       	movw	r30, r24
    3308:	80 81       	ld	r24, Z
    330a:	91 81       	ldd	r25, Z+1	; 0x01
    330c:	01 97       	sbiw	r24, 0x01	; 1
    330e:	f1 f7       	brne	.-4      	; 0x330c <rotateStepper_3+0x1d0>
    3310:	9e 01       	movw	r18, r28
    3312:	21 56       	subi	r18, 0x61	; 97
    3314:	3f 4f       	sbci	r19, 0xFF	; 255
    3316:	f9 01       	movw	r30, r18
    3318:	91 83       	std	Z+1, r25	; 0x01
    331a:	80 83       	st	Z, r24
			PORTC = 0x02;
    331c:	85 e3       	ldi	r24, 0x35	; 53
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	22 e0       	ldi	r18, 0x02	; 2
    3322:	fc 01       	movw	r30, r24
    3324:	20 83       	st	Z, r18
			_delay_ms(period);
    3326:	8d 81       	ldd	r24, Y+5	; 0x05
    3328:	9e 81       	ldd	r25, Y+6	; 0x06
    332a:	09 2e       	mov	r0, r25
    332c:	00 0c       	add	r0, r0
    332e:	aa 0b       	sbc	r26, r26
    3330:	bb 0b       	sbc	r27, r27
    3332:	bc 01       	movw	r22, r24
    3334:	cd 01       	movw	r24, r26
    3336:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	8f 87       	std	Y+15, r24	; 0x0f
    3340:	98 8b       	std	Y+16, r25	; 0x10
    3342:	a9 8b       	std	Y+17, r26	; 0x11
    3344:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3346:	8e 01       	movw	r16, r28
    3348:	03 57       	subi	r16, 0x73	; 115
    334a:	1f 4f       	sbci	r17, 0xFF	; 255
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	4a e7       	ldi	r20, 0x7A	; 122
    3352:	55 e4       	ldi	r21, 0x45	; 69
    3354:	6f 85       	ldd	r22, Y+15	; 0x0f
    3356:	78 89       	ldd	r23, Y+16	; 0x10
    3358:	89 89       	ldd	r24, Y+17	; 0x11
    335a:	9a 89       	ldd	r25, Y+18	; 0x12
    335c:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	f8 01       	movw	r30, r16
    3366:	80 83       	st	Z, r24
    3368:	91 83       	std	Z+1, r25	; 0x01
    336a:	a2 83       	std	Z+2, r26	; 0x02
    336c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    336e:	ce 01       	movw	r24, r28
    3370:	83 57       	subi	r24, 0x73	; 115
    3372:	9f 4f       	sbci	r25, 0xFF	; 255
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	40 e8       	ldi	r20, 0x80	; 128
    337a:	5f e3       	ldi	r21, 0x3F	; 63
    337c:	fc 01       	movw	r30, r24
    337e:	60 81       	ld	r22, Z
    3380:	71 81       	ldd	r23, Z+1	; 0x01
    3382:	82 81       	ldd	r24, Z+2	; 0x02
    3384:	93 81       	ldd	r25, Z+3	; 0x03
    3386:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    338a:	88 23       	and	r24, r24
    338c:	4c f4       	brge	.+18     	; 0x33a0 <rotateStepper_3+0x264>
		__ticks = 1;
    338e:	ce 01       	movw	r24, r28
    3390:	8f 56       	subi	r24, 0x6F	; 111
    3392:	9f 4f       	sbci	r25, 0xFF	; 255
    3394:	21 e0       	ldi	r18, 0x01	; 1
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	fc 01       	movw	r30, r24
    339a:	31 83       	std	Z+1, r19	; 0x01
    339c:	20 83       	st	Z, r18
    339e:	69 c0       	rjmp	.+210    	; 0x3472 <rotateStepper_3+0x336>
	else if (__tmp > 65535)
    33a0:	ce 01       	movw	r24, r28
    33a2:	83 57       	subi	r24, 0x73	; 115
    33a4:	9f 4f       	sbci	r25, 0xFF	; 255
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	3f ef       	ldi	r19, 0xFF	; 255
    33aa:	4f e7       	ldi	r20, 0x7F	; 127
    33ac:	57 e4       	ldi	r21, 0x47	; 71
    33ae:	fc 01       	movw	r30, r24
    33b0:	60 81       	ld	r22, Z
    33b2:	71 81       	ldd	r23, Z+1	; 0x01
    33b4:	82 81       	ldd	r24, Z+2	; 0x02
    33b6:	93 81       	ldd	r25, Z+3	; 0x03
    33b8:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    33bc:	18 16       	cp	r1, r24
    33be:	0c f0       	brlt	.+2      	; 0x33c2 <rotateStepper_3+0x286>
    33c0:	46 c0       	rjmp	.+140    	; 0x344e <rotateStepper_3+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	40 e2       	ldi	r20, 0x20	; 32
    33c8:	51 e4       	ldi	r21, 0x41	; 65
    33ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    33cc:	78 89       	ldd	r23, Y+16	; 0x10
    33ce:	89 89       	ldd	r24, Y+17	; 0x11
    33d0:	9a 89       	ldd	r25, Y+18	; 0x12
    33d2:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	8e 01       	movw	r16, r28
    33dc:	0f 56       	subi	r16, 0x6F	; 111
    33de:	1f 4f       	sbci	r17, 0xFF	; 255
    33e0:	bc 01       	movw	r22, r24
    33e2:	cd 01       	movw	r24, r26
    33e4:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	f8 01       	movw	r30, r16
    33ee:	91 83       	std	Z+1, r25	; 0x01
    33f0:	80 83       	st	Z, r24
    33f2:	24 c0       	rjmp	.+72     	; 0x343c <rotateStepper_3+0x300>
    33f4:	ce 01       	movw	r24, r28
    33f6:	8d 56       	subi	r24, 0x6D	; 109
    33f8:	9f 4f       	sbci	r25, 0xFF	; 255
    33fa:	20 e9       	ldi	r18, 0x90	; 144
    33fc:	31 e0       	ldi	r19, 0x01	; 1
    33fe:	fc 01       	movw	r30, r24
    3400:	31 83       	std	Z+1, r19	; 0x01
    3402:	20 83       	st	Z, r18
    3404:	ce 01       	movw	r24, r28
    3406:	8d 56       	subi	r24, 0x6D	; 109
    3408:	9f 4f       	sbci	r25, 0xFF	; 255
    340a:	fc 01       	movw	r30, r24
    340c:	80 81       	ld	r24, Z
    340e:	91 81       	ldd	r25, Z+1	; 0x01
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	f1 f7       	brne	.-4      	; 0x3410 <rotateStepper_3+0x2d4>
    3414:	9e 01       	movw	r18, r28
    3416:	2d 56       	subi	r18, 0x6D	; 109
    3418:	3f 4f       	sbci	r19, 0xFF	; 255
    341a:	f9 01       	movw	r30, r18
    341c:	91 83       	std	Z+1, r25	; 0x01
    341e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3420:	ce 01       	movw	r24, r28
    3422:	8f 56       	subi	r24, 0x6F	; 111
    3424:	9f 4f       	sbci	r25, 0xFF	; 255
    3426:	9e 01       	movw	r18, r28
    3428:	2f 56       	subi	r18, 0x6F	; 111
    342a:	3f 4f       	sbci	r19, 0xFF	; 255
    342c:	f9 01       	movw	r30, r18
    342e:	20 81       	ld	r18, Z
    3430:	31 81       	ldd	r19, Z+1	; 0x01
    3432:	21 50       	subi	r18, 0x01	; 1
    3434:	31 09       	sbc	r19, r1
    3436:	fc 01       	movw	r30, r24
    3438:	31 83       	std	Z+1, r19	; 0x01
    343a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    343c:	ce 01       	movw	r24, r28
    343e:	8f 56       	subi	r24, 0x6F	; 111
    3440:	9f 4f       	sbci	r25, 0xFF	; 255
    3442:	fc 01       	movw	r30, r24
    3444:	80 81       	ld	r24, Z
    3446:	91 81       	ldd	r25, Z+1	; 0x01
    3448:	89 2b       	or	r24, r25
    344a:	a1 f6       	brne	.-88     	; 0x33f4 <rotateStepper_3+0x2b8>
    344c:	2c c0       	rjmp	.+88     	; 0x34a6 <rotateStepper_3+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    344e:	8e 01       	movw	r16, r28
    3450:	0f 56       	subi	r16, 0x6F	; 111
    3452:	1f 4f       	sbci	r17, 0xFF	; 255
    3454:	ce 01       	movw	r24, r28
    3456:	83 57       	subi	r24, 0x73	; 115
    3458:	9f 4f       	sbci	r25, 0xFF	; 255
    345a:	fc 01       	movw	r30, r24
    345c:	60 81       	ld	r22, Z
    345e:	71 81       	ldd	r23, Z+1	; 0x01
    3460:	82 81       	ldd	r24, Z+2	; 0x02
    3462:	93 81       	ldd	r25, Z+3	; 0x03
    3464:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	f8 01       	movw	r30, r16
    346e:	91 83       	std	Z+1, r25	; 0x01
    3470:	80 83       	st	Z, r24
    3472:	ce 01       	movw	r24, r28
    3474:	8b 56       	subi	r24, 0x6B	; 107
    3476:	9f 4f       	sbci	r25, 0xFF	; 255
    3478:	9e 01       	movw	r18, r28
    347a:	2f 56       	subi	r18, 0x6F	; 111
    347c:	3f 4f       	sbci	r19, 0xFF	; 255
    347e:	f9 01       	movw	r30, r18
    3480:	20 81       	ld	r18, Z
    3482:	31 81       	ldd	r19, Z+1	; 0x01
    3484:	fc 01       	movw	r30, r24
    3486:	31 83       	std	Z+1, r19	; 0x01
    3488:	20 83       	st	Z, r18
    348a:	ce 01       	movw	r24, r28
    348c:	8b 56       	subi	r24, 0x6B	; 107
    348e:	9f 4f       	sbci	r25, 0xFF	; 255
    3490:	fc 01       	movw	r30, r24
    3492:	80 81       	ld	r24, Z
    3494:	91 81       	ldd	r25, Z+1	; 0x01
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	f1 f7       	brne	.-4      	; 0x3496 <rotateStepper_3+0x35a>
    349a:	9e 01       	movw	r18, r28
    349c:	2b 56       	subi	r18, 0x6B	; 107
    349e:	3f 4f       	sbci	r19, 0xFF	; 255
    34a0:	f9 01       	movw	r30, r18
    34a2:	91 83       	std	Z+1, r25	; 0x01
    34a4:	80 83       	st	Z, r24
			PORTC = 0x06;
    34a6:	85 e3       	ldi	r24, 0x35	; 53
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	26 e0       	ldi	r18, 0x06	; 6
    34ac:	fc 01       	movw	r30, r24
    34ae:	20 83       	st	Z, r18
			_delay_ms(period);
    34b0:	8d 81       	ldd	r24, Y+5	; 0x05
    34b2:	9e 81       	ldd	r25, Y+6	; 0x06
    34b4:	09 2e       	mov	r0, r25
    34b6:	00 0c       	add	r0, r0
    34b8:	aa 0b       	sbc	r26, r26
    34ba:	bb 0b       	sbc	r27, r27
    34bc:	bc 01       	movw	r22, r24
    34be:	cd 01       	movw	r24, r26
    34c0:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	8b 8b       	std	Y+19, r24	; 0x13
    34ca:	9c 8b       	std	Y+20, r25	; 0x14
    34cc:	ad 8b       	std	Y+21, r26	; 0x15
    34ce:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    34d0:	8e 01       	movw	r16, r28
    34d2:	0d 57       	subi	r16, 0x7D	; 125
    34d4:	1f 4f       	sbci	r17, 0xFF	; 255
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	4a e7       	ldi	r20, 0x7A	; 122
    34dc:	55 e4       	ldi	r21, 0x45	; 69
    34de:	6b 89       	ldd	r22, Y+19	; 0x13
    34e0:	7c 89       	ldd	r23, Y+20	; 0x14
    34e2:	8d 89       	ldd	r24, Y+21	; 0x15
    34e4:	9e 89       	ldd	r25, Y+22	; 0x16
    34e6:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	f8 01       	movw	r30, r16
    34f0:	80 83       	st	Z, r24
    34f2:	91 83       	std	Z+1, r25	; 0x01
    34f4:	a2 83       	std	Z+2, r26	; 0x02
    34f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34f8:	ce 01       	movw	r24, r28
    34fa:	8d 57       	subi	r24, 0x7D	; 125
    34fc:	9f 4f       	sbci	r25, 0xFF	; 255
    34fe:	20 e0       	ldi	r18, 0x00	; 0
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	40 e8       	ldi	r20, 0x80	; 128
    3504:	5f e3       	ldi	r21, 0x3F	; 63
    3506:	fc 01       	movw	r30, r24
    3508:	60 81       	ld	r22, Z
    350a:	71 81       	ldd	r23, Z+1	; 0x01
    350c:	82 81       	ldd	r24, Z+2	; 0x02
    350e:	93 81       	ldd	r25, Z+3	; 0x03
    3510:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    3514:	88 23       	and	r24, r24
    3516:	4c f4       	brge	.+18     	; 0x352a <rotateStepper_3+0x3ee>
		__ticks = 1;
    3518:	ce 01       	movw	r24, r28
    351a:	89 57       	subi	r24, 0x79	; 121
    351c:	9f 4f       	sbci	r25, 0xFF	; 255
    351e:	21 e0       	ldi	r18, 0x01	; 1
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	fc 01       	movw	r30, r24
    3524:	31 83       	std	Z+1, r19	; 0x01
    3526:	20 83       	st	Z, r18
    3528:	69 c0       	rjmp	.+210    	; 0x35fc <rotateStepper_3+0x4c0>
	else if (__tmp > 65535)
    352a:	ce 01       	movw	r24, r28
    352c:	8d 57       	subi	r24, 0x7D	; 125
    352e:	9f 4f       	sbci	r25, 0xFF	; 255
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	3f ef       	ldi	r19, 0xFF	; 255
    3534:	4f e7       	ldi	r20, 0x7F	; 127
    3536:	57 e4       	ldi	r21, 0x47	; 71
    3538:	fc 01       	movw	r30, r24
    353a:	60 81       	ld	r22, Z
    353c:	71 81       	ldd	r23, Z+1	; 0x01
    353e:	82 81       	ldd	r24, Z+2	; 0x02
    3540:	93 81       	ldd	r25, Z+3	; 0x03
    3542:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    3546:	18 16       	cp	r1, r24
    3548:	0c f0       	brlt	.+2      	; 0x354c <rotateStepper_3+0x410>
    354a:	46 c0       	rjmp	.+140    	; 0x35d8 <rotateStepper_3+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e2       	ldi	r20, 0x20	; 32
    3552:	51 e4       	ldi	r21, 0x41	; 65
    3554:	6b 89       	ldd	r22, Y+19	; 0x13
    3556:	7c 89       	ldd	r23, Y+20	; 0x14
    3558:	8d 89       	ldd	r24, Y+21	; 0x15
    355a:	9e 89       	ldd	r25, Y+22	; 0x16
    355c:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	8e 01       	movw	r16, r28
    3566:	09 57       	subi	r16, 0x79	; 121
    3568:	1f 4f       	sbci	r17, 0xFF	; 255
    356a:	bc 01       	movw	r22, r24
    356c:	cd 01       	movw	r24, r26
    356e:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	f8 01       	movw	r30, r16
    3578:	91 83       	std	Z+1, r25	; 0x01
    357a:	80 83       	st	Z, r24
    357c:	24 c0       	rjmp	.+72     	; 0x35c6 <rotateStepper_3+0x48a>
    357e:	ce 01       	movw	r24, r28
    3580:	87 57       	subi	r24, 0x77	; 119
    3582:	9f 4f       	sbci	r25, 0xFF	; 255
    3584:	20 e9       	ldi	r18, 0x90	; 144
    3586:	31 e0       	ldi	r19, 0x01	; 1
    3588:	fc 01       	movw	r30, r24
    358a:	31 83       	std	Z+1, r19	; 0x01
    358c:	20 83       	st	Z, r18
    358e:	ce 01       	movw	r24, r28
    3590:	87 57       	subi	r24, 0x77	; 119
    3592:	9f 4f       	sbci	r25, 0xFF	; 255
    3594:	fc 01       	movw	r30, r24
    3596:	80 81       	ld	r24, Z
    3598:	91 81       	ldd	r25, Z+1	; 0x01
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	f1 f7       	brne	.-4      	; 0x359a <rotateStepper_3+0x45e>
    359e:	9e 01       	movw	r18, r28
    35a0:	27 57       	subi	r18, 0x77	; 119
    35a2:	3f 4f       	sbci	r19, 0xFF	; 255
    35a4:	f9 01       	movw	r30, r18
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35aa:	ce 01       	movw	r24, r28
    35ac:	89 57       	subi	r24, 0x79	; 121
    35ae:	9f 4f       	sbci	r25, 0xFF	; 255
    35b0:	9e 01       	movw	r18, r28
    35b2:	29 57       	subi	r18, 0x79	; 121
    35b4:	3f 4f       	sbci	r19, 0xFF	; 255
    35b6:	f9 01       	movw	r30, r18
    35b8:	20 81       	ld	r18, Z
    35ba:	31 81       	ldd	r19, Z+1	; 0x01
    35bc:	21 50       	subi	r18, 0x01	; 1
    35be:	31 09       	sbc	r19, r1
    35c0:	fc 01       	movw	r30, r24
    35c2:	31 83       	std	Z+1, r19	; 0x01
    35c4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c6:	ce 01       	movw	r24, r28
    35c8:	89 57       	subi	r24, 0x79	; 121
    35ca:	9f 4f       	sbci	r25, 0xFF	; 255
    35cc:	fc 01       	movw	r30, r24
    35ce:	80 81       	ld	r24, Z
    35d0:	91 81       	ldd	r25, Z+1	; 0x01
    35d2:	89 2b       	or	r24, r25
    35d4:	a1 f6       	brne	.-88     	; 0x357e <rotateStepper_3+0x442>
    35d6:	2c c0       	rjmp	.+88     	; 0x3630 <rotateStepper_3+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d8:	8e 01       	movw	r16, r28
    35da:	09 57       	subi	r16, 0x79	; 121
    35dc:	1f 4f       	sbci	r17, 0xFF	; 255
    35de:	ce 01       	movw	r24, r28
    35e0:	8d 57       	subi	r24, 0x7D	; 125
    35e2:	9f 4f       	sbci	r25, 0xFF	; 255
    35e4:	fc 01       	movw	r30, r24
    35e6:	60 81       	ld	r22, Z
    35e8:	71 81       	ldd	r23, Z+1	; 0x01
    35ea:	82 81       	ldd	r24, Z+2	; 0x02
    35ec:	93 81       	ldd	r25, Z+3	; 0x03
    35ee:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	f8 01       	movw	r30, r16
    35f8:	91 83       	std	Z+1, r25	; 0x01
    35fa:	80 83       	st	Z, r24
    35fc:	ce 01       	movw	r24, r28
    35fe:	85 57       	subi	r24, 0x75	; 117
    3600:	9f 4f       	sbci	r25, 0xFF	; 255
    3602:	9e 01       	movw	r18, r28
    3604:	29 57       	subi	r18, 0x79	; 121
    3606:	3f 4f       	sbci	r19, 0xFF	; 255
    3608:	f9 01       	movw	r30, r18
    360a:	20 81       	ld	r18, Z
    360c:	31 81       	ldd	r19, Z+1	; 0x01
    360e:	fc 01       	movw	r30, r24
    3610:	31 83       	std	Z+1, r19	; 0x01
    3612:	20 83       	st	Z, r18
    3614:	ce 01       	movw	r24, r28
    3616:	85 57       	subi	r24, 0x75	; 117
    3618:	9f 4f       	sbci	r25, 0xFF	; 255
    361a:	fc 01       	movw	r30, r24
    361c:	80 81       	ld	r24, Z
    361e:	91 81       	ldd	r25, Z+1	; 0x01
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	f1 f7       	brne	.-4      	; 0x3620 <rotateStepper_3+0x4e4>
    3624:	9e 01       	movw	r18, r28
    3626:	25 57       	subi	r18, 0x75	; 117
    3628:	3f 4f       	sbci	r19, 0xFF	; 255
    362a:	f9 01       	movw	r30, r18
    362c:	91 83       	std	Z+1, r25	; 0x01
    362e:	80 83       	st	Z, r24
			PORTC = 0x04;
    3630:	85 e3       	ldi	r24, 0x35	; 53
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	24 e0       	ldi	r18, 0x04	; 4
    3636:	fc 01       	movw	r30, r24
    3638:	20 83       	st	Z, r18
			_delay_ms(period);
    363a:	8d 81       	ldd	r24, Y+5	; 0x05
    363c:	9e 81       	ldd	r25, Y+6	; 0x06
    363e:	09 2e       	mov	r0, r25
    3640:	00 0c       	add	r0, r0
    3642:	aa 0b       	sbc	r26, r26
    3644:	bb 0b       	sbc	r27, r27
    3646:	bc 01       	movw	r22, r24
    3648:	cd 01       	movw	r24, r26
    364a:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	8f 8b       	std	Y+23, r24	; 0x17
    3654:	98 8f       	std	Y+24, r25	; 0x18
    3656:	a9 8f       	std	Y+25, r26	; 0x19
    3658:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    365a:	8e 01       	movw	r16, r28
    365c:	07 58       	subi	r16, 0x87	; 135
    365e:	1f 4f       	sbci	r17, 0xFF	; 255
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	4a e7       	ldi	r20, 0x7A	; 122
    3666:	55 e4       	ldi	r21, 0x45	; 69
    3668:	6f 89       	ldd	r22, Y+23	; 0x17
    366a:	78 8d       	ldd	r23, Y+24	; 0x18
    366c:	89 8d       	ldd	r24, Y+25	; 0x19
    366e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3670:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	f8 01       	movw	r30, r16
    367a:	80 83       	st	Z, r24
    367c:	91 83       	std	Z+1, r25	; 0x01
    367e:	a2 83       	std	Z+2, r26	; 0x02
    3680:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3682:	ce 01       	movw	r24, r28
    3684:	87 58       	subi	r24, 0x87	; 135
    3686:	9f 4f       	sbci	r25, 0xFF	; 255
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	40 e8       	ldi	r20, 0x80	; 128
    368e:	5f e3       	ldi	r21, 0x3F	; 63
    3690:	fc 01       	movw	r30, r24
    3692:	60 81       	ld	r22, Z
    3694:	71 81       	ldd	r23, Z+1	; 0x01
    3696:	82 81       	ldd	r24, Z+2	; 0x02
    3698:	93 81       	ldd	r25, Z+3	; 0x03
    369a:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    369e:	88 23       	and	r24, r24
    36a0:	4c f4       	brge	.+18     	; 0x36b4 <rotateStepper_3+0x578>
		__ticks = 1;
    36a2:	ce 01       	movw	r24, r28
    36a4:	83 58       	subi	r24, 0x83	; 131
    36a6:	9f 4f       	sbci	r25, 0xFF	; 255
    36a8:	21 e0       	ldi	r18, 0x01	; 1
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	fc 01       	movw	r30, r24
    36ae:	31 83       	std	Z+1, r19	; 0x01
    36b0:	20 83       	st	Z, r18
    36b2:	69 c0       	rjmp	.+210    	; 0x3786 <rotateStepper_3+0x64a>
	else if (__tmp > 65535)
    36b4:	ce 01       	movw	r24, r28
    36b6:	87 58       	subi	r24, 0x87	; 135
    36b8:	9f 4f       	sbci	r25, 0xFF	; 255
    36ba:	20 e0       	ldi	r18, 0x00	; 0
    36bc:	3f ef       	ldi	r19, 0xFF	; 255
    36be:	4f e7       	ldi	r20, 0x7F	; 127
    36c0:	57 e4       	ldi	r21, 0x47	; 71
    36c2:	fc 01       	movw	r30, r24
    36c4:	60 81       	ld	r22, Z
    36c6:	71 81       	ldd	r23, Z+1	; 0x01
    36c8:	82 81       	ldd	r24, Z+2	; 0x02
    36ca:	93 81       	ldd	r25, Z+3	; 0x03
    36cc:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    36d0:	18 16       	cp	r1, r24
    36d2:	0c f0       	brlt	.+2      	; 0x36d6 <rotateStepper_3+0x59a>
    36d4:	46 c0       	rjmp	.+140    	; 0x3762 <rotateStepper_3+0x626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	40 e2       	ldi	r20, 0x20	; 32
    36dc:	51 e4       	ldi	r21, 0x41	; 65
    36de:	6f 89       	ldd	r22, Y+23	; 0x17
    36e0:	78 8d       	ldd	r23, Y+24	; 0x18
    36e2:	89 8d       	ldd	r24, Y+25	; 0x19
    36e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    36e6:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    36ea:	dc 01       	movw	r26, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	8e 01       	movw	r16, r28
    36f0:	03 58       	subi	r16, 0x83	; 131
    36f2:	1f 4f       	sbci	r17, 0xFF	; 255
    36f4:	bc 01       	movw	r22, r24
    36f6:	cd 01       	movw	r24, r26
    36f8:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	f8 01       	movw	r30, r16
    3702:	91 83       	std	Z+1, r25	; 0x01
    3704:	80 83       	st	Z, r24
    3706:	24 c0       	rjmp	.+72     	; 0x3750 <rotateStepper_3+0x614>
    3708:	ce 01       	movw	r24, r28
    370a:	81 58       	subi	r24, 0x81	; 129
    370c:	9f 4f       	sbci	r25, 0xFF	; 255
    370e:	20 e9       	ldi	r18, 0x90	; 144
    3710:	31 e0       	ldi	r19, 0x01	; 1
    3712:	fc 01       	movw	r30, r24
    3714:	31 83       	std	Z+1, r19	; 0x01
    3716:	20 83       	st	Z, r18
    3718:	ce 01       	movw	r24, r28
    371a:	81 58       	subi	r24, 0x81	; 129
    371c:	9f 4f       	sbci	r25, 0xFF	; 255
    371e:	fc 01       	movw	r30, r24
    3720:	80 81       	ld	r24, Z
    3722:	91 81       	ldd	r25, Z+1	; 0x01
    3724:	01 97       	sbiw	r24, 0x01	; 1
    3726:	f1 f7       	brne	.-4      	; 0x3724 <rotateStepper_3+0x5e8>
    3728:	9e 01       	movw	r18, r28
    372a:	21 58       	subi	r18, 0x81	; 129
    372c:	3f 4f       	sbci	r19, 0xFF	; 255
    372e:	f9 01       	movw	r30, r18
    3730:	91 83       	std	Z+1, r25	; 0x01
    3732:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3734:	ce 01       	movw	r24, r28
    3736:	83 58       	subi	r24, 0x83	; 131
    3738:	9f 4f       	sbci	r25, 0xFF	; 255
    373a:	9e 01       	movw	r18, r28
    373c:	23 58       	subi	r18, 0x83	; 131
    373e:	3f 4f       	sbci	r19, 0xFF	; 255
    3740:	f9 01       	movw	r30, r18
    3742:	20 81       	ld	r18, Z
    3744:	31 81       	ldd	r19, Z+1	; 0x01
    3746:	21 50       	subi	r18, 0x01	; 1
    3748:	31 09       	sbc	r19, r1
    374a:	fc 01       	movw	r30, r24
    374c:	31 83       	std	Z+1, r19	; 0x01
    374e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3750:	ce 01       	movw	r24, r28
    3752:	83 58       	subi	r24, 0x83	; 131
    3754:	9f 4f       	sbci	r25, 0xFF	; 255
    3756:	fc 01       	movw	r30, r24
    3758:	80 81       	ld	r24, Z
    375a:	91 81       	ldd	r25, Z+1	; 0x01
    375c:	89 2b       	or	r24, r25
    375e:	a1 f6       	brne	.-88     	; 0x3708 <rotateStepper_3+0x5cc>
    3760:	2c c0       	rjmp	.+88     	; 0x37ba <rotateStepper_3+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3762:	8e 01       	movw	r16, r28
    3764:	03 58       	subi	r16, 0x83	; 131
    3766:	1f 4f       	sbci	r17, 0xFF	; 255
    3768:	ce 01       	movw	r24, r28
    376a:	87 58       	subi	r24, 0x87	; 135
    376c:	9f 4f       	sbci	r25, 0xFF	; 255
    376e:	fc 01       	movw	r30, r24
    3770:	60 81       	ld	r22, Z
    3772:	71 81       	ldd	r23, Z+1	; 0x01
    3774:	82 81       	ldd	r24, Z+2	; 0x02
    3776:	93 81       	ldd	r25, Z+3	; 0x03
    3778:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	f8 01       	movw	r30, r16
    3782:	91 83       	std	Z+1, r25	; 0x01
    3784:	80 83       	st	Z, r24
    3786:	ce 01       	movw	r24, r28
    3788:	8f 57       	subi	r24, 0x7F	; 127
    378a:	9f 4f       	sbci	r25, 0xFF	; 255
    378c:	9e 01       	movw	r18, r28
    378e:	23 58       	subi	r18, 0x83	; 131
    3790:	3f 4f       	sbci	r19, 0xFF	; 255
    3792:	f9 01       	movw	r30, r18
    3794:	20 81       	ld	r18, Z
    3796:	31 81       	ldd	r19, Z+1	; 0x01
    3798:	fc 01       	movw	r30, r24
    379a:	31 83       	std	Z+1, r19	; 0x01
    379c:	20 83       	st	Z, r18
    379e:	ce 01       	movw	r24, r28
    37a0:	8f 57       	subi	r24, 0x7F	; 127
    37a2:	9f 4f       	sbci	r25, 0xFF	; 255
    37a4:	fc 01       	movw	r30, r24
    37a6:	80 81       	ld	r24, Z
    37a8:	91 81       	ldd	r25, Z+1	; 0x01
    37aa:	01 97       	sbiw	r24, 0x01	; 1
    37ac:	f1 f7       	brne	.-4      	; 0x37aa <rotateStepper_3+0x66e>
    37ae:	9e 01       	movw	r18, r28
    37b0:	2f 57       	subi	r18, 0x7F	; 127
    37b2:	3f 4f       	sbci	r19, 0xFF	; 255
    37b4:	f9 01       	movw	r30, r18
    37b6:	91 83       	std	Z+1, r25	; 0x01
    37b8:	80 83       	st	Z, r24
			PORTC = 0x0c;
    37ba:	85 e3       	ldi	r24, 0x35	; 53
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	2c e0       	ldi	r18, 0x0C	; 12
    37c0:	fc 01       	movw	r30, r24
    37c2:	20 83       	st	Z, r18
			_delay_ms(period);
    37c4:	8d 81       	ldd	r24, Y+5	; 0x05
    37c6:	9e 81       	ldd	r25, Y+6	; 0x06
    37c8:	09 2e       	mov	r0, r25
    37ca:	00 0c       	add	r0, r0
    37cc:	aa 0b       	sbc	r26, r26
    37ce:	bb 0b       	sbc	r27, r27
    37d0:	bc 01       	movw	r22, r24
    37d2:	cd 01       	movw	r24, r26
    37d4:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	8b 8f       	std	Y+27, r24	; 0x1b
    37de:	9c 8f       	std	Y+28, r25	; 0x1c
    37e0:	ad 8f       	std	Y+29, r26	; 0x1d
    37e2:	be 8f       	std	Y+30, r27	; 0x1e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    37e4:	8e 01       	movw	r16, r28
    37e6:	01 59       	subi	r16, 0x91	; 145
    37e8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	4a e7       	ldi	r20, 0x7A	; 122
    37f0:	55 e4       	ldi	r21, 0x45	; 69
    37f2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    37f4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    37f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37fa:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	f8 01       	movw	r30, r16
    3804:	80 83       	st	Z, r24
    3806:	91 83       	std	Z+1, r25	; 0x01
    3808:	a2 83       	std	Z+2, r26	; 0x02
    380a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    380c:	ce 01       	movw	r24, r28
    380e:	81 59       	subi	r24, 0x91	; 145
    3810:	9f 4f       	sbci	r25, 0xFF	; 255
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	40 e8       	ldi	r20, 0x80	; 128
    3818:	5f e3       	ldi	r21, 0x3F	; 63
    381a:	fc 01       	movw	r30, r24
    381c:	60 81       	ld	r22, Z
    381e:	71 81       	ldd	r23, Z+1	; 0x01
    3820:	82 81       	ldd	r24, Z+2	; 0x02
    3822:	93 81       	ldd	r25, Z+3	; 0x03
    3824:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    3828:	88 23       	and	r24, r24
    382a:	4c f4       	brge	.+18     	; 0x383e <rotateStepper_3+0x702>
		__ticks = 1;
    382c:	ce 01       	movw	r24, r28
    382e:	8d 58       	subi	r24, 0x8D	; 141
    3830:	9f 4f       	sbci	r25, 0xFF	; 255
    3832:	21 e0       	ldi	r18, 0x01	; 1
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	fc 01       	movw	r30, r24
    3838:	31 83       	std	Z+1, r19	; 0x01
    383a:	20 83       	st	Z, r18
    383c:	69 c0       	rjmp	.+210    	; 0x3910 <rotateStepper_3+0x7d4>
	else if (__tmp > 65535)
    383e:	ce 01       	movw	r24, r28
    3840:	81 59       	subi	r24, 0x91	; 145
    3842:	9f 4f       	sbci	r25, 0xFF	; 255
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	3f ef       	ldi	r19, 0xFF	; 255
    3848:	4f e7       	ldi	r20, 0x7F	; 127
    384a:	57 e4       	ldi	r21, 0x47	; 71
    384c:	fc 01       	movw	r30, r24
    384e:	60 81       	ld	r22, Z
    3850:	71 81       	ldd	r23, Z+1	; 0x01
    3852:	82 81       	ldd	r24, Z+2	; 0x02
    3854:	93 81       	ldd	r25, Z+3	; 0x03
    3856:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    385a:	18 16       	cp	r1, r24
    385c:	0c f0       	brlt	.+2      	; 0x3860 <rotateStepper_3+0x724>
    385e:	46 c0       	rjmp	.+140    	; 0x38ec <rotateStepper_3+0x7b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	40 e2       	ldi	r20, 0x20	; 32
    3866:	51 e4       	ldi	r21, 0x41	; 65
    3868:	6b 8d       	ldd	r22, Y+27	; 0x1b
    386a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    386c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    386e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3870:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	8e 01       	movw	r16, r28
    387a:	0d 58       	subi	r16, 0x8D	; 141
    387c:	1f 4f       	sbci	r17, 0xFF	; 255
    387e:	bc 01       	movw	r22, r24
    3880:	cd 01       	movw	r24, r26
    3882:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    3886:	dc 01       	movw	r26, r24
    3888:	cb 01       	movw	r24, r22
    388a:	f8 01       	movw	r30, r16
    388c:	91 83       	std	Z+1, r25	; 0x01
    388e:	80 83       	st	Z, r24
    3890:	24 c0       	rjmp	.+72     	; 0x38da <rotateStepper_3+0x79e>
    3892:	ce 01       	movw	r24, r28
    3894:	8b 58       	subi	r24, 0x8B	; 139
    3896:	9f 4f       	sbci	r25, 0xFF	; 255
    3898:	20 e9       	ldi	r18, 0x90	; 144
    389a:	31 e0       	ldi	r19, 0x01	; 1
    389c:	fc 01       	movw	r30, r24
    389e:	31 83       	std	Z+1, r19	; 0x01
    38a0:	20 83       	st	Z, r18
    38a2:	ce 01       	movw	r24, r28
    38a4:	8b 58       	subi	r24, 0x8B	; 139
    38a6:	9f 4f       	sbci	r25, 0xFF	; 255
    38a8:	fc 01       	movw	r30, r24
    38aa:	80 81       	ld	r24, Z
    38ac:	91 81       	ldd	r25, Z+1	; 0x01
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	f1 f7       	brne	.-4      	; 0x38ae <rotateStepper_3+0x772>
    38b2:	9e 01       	movw	r18, r28
    38b4:	2b 58       	subi	r18, 0x8B	; 139
    38b6:	3f 4f       	sbci	r19, 0xFF	; 255
    38b8:	f9 01       	movw	r30, r18
    38ba:	91 83       	std	Z+1, r25	; 0x01
    38bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38be:	ce 01       	movw	r24, r28
    38c0:	8d 58       	subi	r24, 0x8D	; 141
    38c2:	9f 4f       	sbci	r25, 0xFF	; 255
    38c4:	9e 01       	movw	r18, r28
    38c6:	2d 58       	subi	r18, 0x8D	; 141
    38c8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ca:	f9 01       	movw	r30, r18
    38cc:	20 81       	ld	r18, Z
    38ce:	31 81       	ldd	r19, Z+1	; 0x01
    38d0:	21 50       	subi	r18, 0x01	; 1
    38d2:	31 09       	sbc	r19, r1
    38d4:	fc 01       	movw	r30, r24
    38d6:	31 83       	std	Z+1, r19	; 0x01
    38d8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38da:	ce 01       	movw	r24, r28
    38dc:	8d 58       	subi	r24, 0x8D	; 141
    38de:	9f 4f       	sbci	r25, 0xFF	; 255
    38e0:	fc 01       	movw	r30, r24
    38e2:	80 81       	ld	r24, Z
    38e4:	91 81       	ldd	r25, Z+1	; 0x01
    38e6:	89 2b       	or	r24, r25
    38e8:	a1 f6       	brne	.-88     	; 0x3892 <rotateStepper_3+0x756>
    38ea:	2c c0       	rjmp	.+88     	; 0x3944 <rotateStepper_3+0x808>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ec:	8e 01       	movw	r16, r28
    38ee:	0d 58       	subi	r16, 0x8D	; 141
    38f0:	1f 4f       	sbci	r17, 0xFF	; 255
    38f2:	ce 01       	movw	r24, r28
    38f4:	81 59       	subi	r24, 0x91	; 145
    38f6:	9f 4f       	sbci	r25, 0xFF	; 255
    38f8:	fc 01       	movw	r30, r24
    38fa:	60 81       	ld	r22, Z
    38fc:	71 81       	ldd	r23, Z+1	; 0x01
    38fe:	82 81       	ldd	r24, Z+2	; 0x02
    3900:	93 81       	ldd	r25, Z+3	; 0x03
    3902:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	f8 01       	movw	r30, r16
    390c:	91 83       	std	Z+1, r25	; 0x01
    390e:	80 83       	st	Z, r24
    3910:	ce 01       	movw	r24, r28
    3912:	89 58       	subi	r24, 0x89	; 137
    3914:	9f 4f       	sbci	r25, 0xFF	; 255
    3916:	9e 01       	movw	r18, r28
    3918:	2d 58       	subi	r18, 0x8D	; 141
    391a:	3f 4f       	sbci	r19, 0xFF	; 255
    391c:	f9 01       	movw	r30, r18
    391e:	20 81       	ld	r18, Z
    3920:	31 81       	ldd	r19, Z+1	; 0x01
    3922:	fc 01       	movw	r30, r24
    3924:	31 83       	std	Z+1, r19	; 0x01
    3926:	20 83       	st	Z, r18
    3928:	ce 01       	movw	r24, r28
    392a:	89 58       	subi	r24, 0x89	; 137
    392c:	9f 4f       	sbci	r25, 0xFF	; 255
    392e:	fc 01       	movw	r30, r24
    3930:	80 81       	ld	r24, Z
    3932:	91 81       	ldd	r25, Z+1	; 0x01
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	f1 f7       	brne	.-4      	; 0x3934 <rotateStepper_3+0x7f8>
    3938:	9e 01       	movw	r18, r28
    393a:	29 58       	subi	r18, 0x89	; 137
    393c:	3f 4f       	sbci	r19, 0xFF	; 255
    393e:	f9 01       	movw	r30, r18
    3940:	91 83       	std	Z+1, r25	; 0x01
    3942:	80 83       	st	Z, r24
			PORTC = 0x08;
    3944:	85 e3       	ldi	r24, 0x35	; 53
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	28 e0       	ldi	r18, 0x08	; 8
    394a:	fc 01       	movw	r30, r24
    394c:	20 83       	st	Z, r18
			_delay_ms(period);
    394e:	8d 81       	ldd	r24, Y+5	; 0x05
    3950:	9e 81       	ldd	r25, Y+6	; 0x06
    3952:	09 2e       	mov	r0, r25
    3954:	00 0c       	add	r0, r0
    3956:	aa 0b       	sbc	r26, r26
    3958:	bb 0b       	sbc	r27, r27
    395a:	bc 01       	movw	r22, r24
    395c:	cd 01       	movw	r24, r26
    395e:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	8f 8f       	std	Y+31, r24	; 0x1f
    3968:	98 a3       	std	Y+32, r25	; 0x20
    396a:	a9 a3       	std	Y+33, r26	; 0x21
    396c:	ba a3       	std	Y+34, r27	; 0x22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    396e:	8e 01       	movw	r16, r28
    3970:	0b 59       	subi	r16, 0x9B	; 155
    3972:	1f 4f       	sbci	r17, 0xFF	; 255
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	4a e7       	ldi	r20, 0x7A	; 122
    397a:	55 e4       	ldi	r21, 0x45	; 69
    397c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    397e:	78 a1       	ldd	r23, Y+32	; 0x20
    3980:	89 a1       	ldd	r24, Y+33	; 0x21
    3982:	9a a1       	ldd	r25, Y+34	; 0x22
    3984:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	f8 01       	movw	r30, r16
    398e:	80 83       	st	Z, r24
    3990:	91 83       	std	Z+1, r25	; 0x01
    3992:	a2 83       	std	Z+2, r26	; 0x02
    3994:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3996:	ce 01       	movw	r24, r28
    3998:	8b 59       	subi	r24, 0x9B	; 155
    399a:	9f 4f       	sbci	r25, 0xFF	; 255
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	40 e8       	ldi	r20, 0x80	; 128
    39a2:	5f e3       	ldi	r21, 0x3F	; 63
    39a4:	fc 01       	movw	r30, r24
    39a6:	60 81       	ld	r22, Z
    39a8:	71 81       	ldd	r23, Z+1	; 0x01
    39aa:	82 81       	ldd	r24, Z+2	; 0x02
    39ac:	93 81       	ldd	r25, Z+3	; 0x03
    39ae:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    39b2:	88 23       	and	r24, r24
    39b4:	4c f4       	brge	.+18     	; 0x39c8 <rotateStepper_3+0x88c>
		__ticks = 1;
    39b6:	ce 01       	movw	r24, r28
    39b8:	87 59       	subi	r24, 0x97	; 151
    39ba:	9f 4f       	sbci	r25, 0xFF	; 255
    39bc:	21 e0       	ldi	r18, 0x01	; 1
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	fc 01       	movw	r30, r24
    39c2:	31 83       	std	Z+1, r19	; 0x01
    39c4:	20 83       	st	Z, r18
    39c6:	69 c0       	rjmp	.+210    	; 0x3a9a <rotateStepper_3+0x95e>
	else if (__tmp > 65535)
    39c8:	ce 01       	movw	r24, r28
    39ca:	8b 59       	subi	r24, 0x9B	; 155
    39cc:	9f 4f       	sbci	r25, 0xFF	; 255
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	3f ef       	ldi	r19, 0xFF	; 255
    39d2:	4f e7       	ldi	r20, 0x7F	; 127
    39d4:	57 e4       	ldi	r21, 0x47	; 71
    39d6:	fc 01       	movw	r30, r24
    39d8:	60 81       	ld	r22, Z
    39da:	71 81       	ldd	r23, Z+1	; 0x01
    39dc:	82 81       	ldd	r24, Z+2	; 0x02
    39de:	93 81       	ldd	r25, Z+3	; 0x03
    39e0:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    39e4:	18 16       	cp	r1, r24
    39e6:	0c f0       	brlt	.+2      	; 0x39ea <rotateStepper_3+0x8ae>
    39e8:	46 c0       	rjmp	.+140    	; 0x3a76 <rotateStepper_3+0x93a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	40 e2       	ldi	r20, 0x20	; 32
    39f0:	51 e4       	ldi	r21, 0x41	; 65
    39f2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    39f4:	78 a1       	ldd	r23, Y+32	; 0x20
    39f6:	89 a1       	ldd	r24, Y+33	; 0x21
    39f8:	9a a1       	ldd	r25, Y+34	; 0x22
    39fa:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    39fe:	dc 01       	movw	r26, r24
    3a00:	cb 01       	movw	r24, r22
    3a02:	8e 01       	movw	r16, r28
    3a04:	07 59       	subi	r16, 0x97	; 151
    3a06:	1f 4f       	sbci	r17, 0xFF	; 255
    3a08:	bc 01       	movw	r22, r24
    3a0a:	cd 01       	movw	r24, r26
    3a0c:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    3a10:	dc 01       	movw	r26, r24
    3a12:	cb 01       	movw	r24, r22
    3a14:	f8 01       	movw	r30, r16
    3a16:	91 83       	std	Z+1, r25	; 0x01
    3a18:	80 83       	st	Z, r24
    3a1a:	24 c0       	rjmp	.+72     	; 0x3a64 <rotateStepper_3+0x928>
    3a1c:	ce 01       	movw	r24, r28
    3a1e:	85 59       	subi	r24, 0x95	; 149
    3a20:	9f 4f       	sbci	r25, 0xFF	; 255
    3a22:	20 e9       	ldi	r18, 0x90	; 144
    3a24:	31 e0       	ldi	r19, 0x01	; 1
    3a26:	fc 01       	movw	r30, r24
    3a28:	31 83       	std	Z+1, r19	; 0x01
    3a2a:	20 83       	st	Z, r18
    3a2c:	ce 01       	movw	r24, r28
    3a2e:	85 59       	subi	r24, 0x95	; 149
    3a30:	9f 4f       	sbci	r25, 0xFF	; 255
    3a32:	fc 01       	movw	r30, r24
    3a34:	80 81       	ld	r24, Z
    3a36:	91 81       	ldd	r25, Z+1	; 0x01
    3a38:	01 97       	sbiw	r24, 0x01	; 1
    3a3a:	f1 f7       	brne	.-4      	; 0x3a38 <rotateStepper_3+0x8fc>
    3a3c:	9e 01       	movw	r18, r28
    3a3e:	25 59       	subi	r18, 0x95	; 149
    3a40:	3f 4f       	sbci	r19, 0xFF	; 255
    3a42:	f9 01       	movw	r30, r18
    3a44:	91 83       	std	Z+1, r25	; 0x01
    3a46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a48:	ce 01       	movw	r24, r28
    3a4a:	87 59       	subi	r24, 0x97	; 151
    3a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4e:	9e 01       	movw	r18, r28
    3a50:	27 59       	subi	r18, 0x97	; 151
    3a52:	3f 4f       	sbci	r19, 0xFF	; 255
    3a54:	f9 01       	movw	r30, r18
    3a56:	20 81       	ld	r18, Z
    3a58:	31 81       	ldd	r19, Z+1	; 0x01
    3a5a:	21 50       	subi	r18, 0x01	; 1
    3a5c:	31 09       	sbc	r19, r1
    3a5e:	fc 01       	movw	r30, r24
    3a60:	31 83       	std	Z+1, r19	; 0x01
    3a62:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a64:	ce 01       	movw	r24, r28
    3a66:	87 59       	subi	r24, 0x97	; 151
    3a68:	9f 4f       	sbci	r25, 0xFF	; 255
    3a6a:	fc 01       	movw	r30, r24
    3a6c:	80 81       	ld	r24, Z
    3a6e:	91 81       	ldd	r25, Z+1	; 0x01
    3a70:	89 2b       	or	r24, r25
    3a72:	a1 f6       	brne	.-88     	; 0x3a1c <rotateStepper_3+0x8e0>
    3a74:	2c c0       	rjmp	.+88     	; 0x3ace <rotateStepper_3+0x992>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a76:	8e 01       	movw	r16, r28
    3a78:	07 59       	subi	r16, 0x97	; 151
    3a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a7c:	ce 01       	movw	r24, r28
    3a7e:	8b 59       	subi	r24, 0x9B	; 155
    3a80:	9f 4f       	sbci	r25, 0xFF	; 255
    3a82:	fc 01       	movw	r30, r24
    3a84:	60 81       	ld	r22, Z
    3a86:	71 81       	ldd	r23, Z+1	; 0x01
    3a88:	82 81       	ldd	r24, Z+2	; 0x02
    3a8a:	93 81       	ldd	r25, Z+3	; 0x03
    3a8c:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	f8 01       	movw	r30, r16
    3a96:	91 83       	std	Z+1, r25	; 0x01
    3a98:	80 83       	st	Z, r24
    3a9a:	ce 01       	movw	r24, r28
    3a9c:	83 59       	subi	r24, 0x93	; 147
    3a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa0:	9e 01       	movw	r18, r28
    3aa2:	27 59       	subi	r18, 0x97	; 151
    3aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa6:	f9 01       	movw	r30, r18
    3aa8:	20 81       	ld	r18, Z
    3aaa:	31 81       	ldd	r19, Z+1	; 0x01
    3aac:	fc 01       	movw	r30, r24
    3aae:	31 83       	std	Z+1, r19	; 0x01
    3ab0:	20 83       	st	Z, r18
    3ab2:	ce 01       	movw	r24, r28
    3ab4:	83 59       	subi	r24, 0x93	; 147
    3ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab8:	fc 01       	movw	r30, r24
    3aba:	80 81       	ld	r24, Z
    3abc:	91 81       	ldd	r25, Z+1	; 0x01
    3abe:	01 97       	sbiw	r24, 0x01	; 1
    3ac0:	f1 f7       	brne	.-4      	; 0x3abe <rotateStepper_3+0x982>
    3ac2:	9e 01       	movw	r18, r28
    3ac4:	23 59       	subi	r18, 0x93	; 147
    3ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ac8:	f9 01       	movw	r30, r18
    3aca:	91 83       	std	Z+1, r25	; 0x01
    3acc:	80 83       	st	Z, r24
			PORTC = 0x09;
    3ace:	85 e3       	ldi	r24, 0x35	; 53
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	29 e0       	ldi	r18, 0x09	; 9
    3ad4:	fc 01       	movw	r30, r24
    3ad6:	20 83       	st	Z, r18
			_delay_ms(period);
    3ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    3ada:	9e 81       	ldd	r25, Y+6	; 0x06
    3adc:	09 2e       	mov	r0, r25
    3ade:	00 0c       	add	r0, r0
    3ae0:	aa 0b       	sbc	r26, r26
    3ae2:	bb 0b       	sbc	r27, r27
    3ae4:	bc 01       	movw	r22, r24
    3ae6:	cd 01       	movw	r24, r26
    3ae8:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	8b a3       	std	Y+35, r24	; 0x23
    3af2:	9c a3       	std	Y+36, r25	; 0x24
    3af4:	ad a3       	std	Y+37, r26	; 0x25
    3af6:	be a3       	std	Y+38, r27	; 0x26

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3af8:	8e 01       	movw	r16, r28
    3afa:	05 5a       	subi	r16, 0xA5	; 165
    3afc:	1f 4f       	sbci	r17, 0xFF	; 255
    3afe:	20 e0       	ldi	r18, 0x00	; 0
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	4a e7       	ldi	r20, 0x7A	; 122
    3b04:	55 e4       	ldi	r21, 0x45	; 69
    3b06:	6b a1       	ldd	r22, Y+35	; 0x23
    3b08:	7c a1       	ldd	r23, Y+36	; 0x24
    3b0a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b0c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b0e:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	f8 01       	movw	r30, r16
    3b18:	80 83       	st	Z, r24
    3b1a:	91 83       	std	Z+1, r25	; 0x01
    3b1c:	a2 83       	std	Z+2, r26	; 0x02
    3b1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b20:	ce 01       	movw	r24, r28
    3b22:	85 5a       	subi	r24, 0xA5	; 165
    3b24:	9f 4f       	sbci	r25, 0xFF	; 255
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	40 e8       	ldi	r20, 0x80	; 128
    3b2c:	5f e3       	ldi	r21, 0x3F	; 63
    3b2e:	fc 01       	movw	r30, r24
    3b30:	60 81       	ld	r22, Z
    3b32:	71 81       	ldd	r23, Z+1	; 0x01
    3b34:	82 81       	ldd	r24, Z+2	; 0x02
    3b36:	93 81       	ldd	r25, Z+3	; 0x03
    3b38:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    3b3c:	88 23       	and	r24, r24
    3b3e:	4c f4       	brge	.+18     	; 0x3b52 <rotateStepper_3+0xa16>
		__ticks = 1;
    3b40:	ce 01       	movw	r24, r28
    3b42:	81 5a       	subi	r24, 0xA1	; 161
    3b44:	9f 4f       	sbci	r25, 0xFF	; 255
    3b46:	21 e0       	ldi	r18, 0x01	; 1
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	31 83       	std	Z+1, r19	; 0x01
    3b4e:	20 83       	st	Z, r18
    3b50:	69 c0       	rjmp	.+210    	; 0x3c24 <rotateStepper_3+0xae8>
	else if (__tmp > 65535)
    3b52:	ce 01       	movw	r24, r28
    3b54:	85 5a       	subi	r24, 0xA5	; 165
    3b56:	9f 4f       	sbci	r25, 0xFF	; 255
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	3f ef       	ldi	r19, 0xFF	; 255
    3b5c:	4f e7       	ldi	r20, 0x7F	; 127
    3b5e:	57 e4       	ldi	r21, 0x47	; 71
    3b60:	fc 01       	movw	r30, r24
    3b62:	60 81       	ld	r22, Z
    3b64:	71 81       	ldd	r23, Z+1	; 0x01
    3b66:	82 81       	ldd	r24, Z+2	; 0x02
    3b68:	93 81       	ldd	r25, Z+3	; 0x03
    3b6a:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    3b6e:	18 16       	cp	r1, r24
    3b70:	0c f0       	brlt	.+2      	; 0x3b74 <rotateStepper_3+0xa38>
    3b72:	46 c0       	rjmp	.+140    	; 0x3c00 <rotateStepper_3+0xac4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	40 e2       	ldi	r20, 0x20	; 32
    3b7a:	51 e4       	ldi	r21, 0x41	; 65
    3b7c:	6b a1       	ldd	r22, Y+35	; 0x23
    3b7e:	7c a1       	ldd	r23, Y+36	; 0x24
    3b80:	8d a1       	ldd	r24, Y+37	; 0x25
    3b82:	9e a1       	ldd	r25, Y+38	; 0x26
    3b84:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	8e 01       	movw	r16, r28
    3b8e:	01 5a       	subi	r16, 0xA1	; 161
    3b90:	1f 4f       	sbci	r17, 0xFF	; 255
    3b92:	bc 01       	movw	r22, r24
    3b94:	cd 01       	movw	r24, r26
    3b96:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	cb 01       	movw	r24, r22
    3b9e:	f8 01       	movw	r30, r16
    3ba0:	91 83       	std	Z+1, r25	; 0x01
    3ba2:	80 83       	st	Z, r24
    3ba4:	24 c0       	rjmp	.+72     	; 0x3bee <rotateStepper_3+0xab2>
    3ba6:	ce 01       	movw	r24, r28
    3ba8:	8f 59       	subi	r24, 0x9F	; 159
    3baa:	9f 4f       	sbci	r25, 0xFF	; 255
    3bac:	20 e9       	ldi	r18, 0x90	; 144
    3bae:	31 e0       	ldi	r19, 0x01	; 1
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	31 83       	std	Z+1, r19	; 0x01
    3bb4:	20 83       	st	Z, r18
    3bb6:	ce 01       	movw	r24, r28
    3bb8:	8f 59       	subi	r24, 0x9F	; 159
    3bba:	9f 4f       	sbci	r25, 0xFF	; 255
    3bbc:	fc 01       	movw	r30, r24
    3bbe:	80 81       	ld	r24, Z
    3bc0:	91 81       	ldd	r25, Z+1	; 0x01
    3bc2:	01 97       	sbiw	r24, 0x01	; 1
    3bc4:	f1 f7       	brne	.-4      	; 0x3bc2 <rotateStepper_3+0xa86>
    3bc6:	9e 01       	movw	r18, r28
    3bc8:	2f 59       	subi	r18, 0x9F	; 159
    3bca:	3f 4f       	sbci	r19, 0xFF	; 255
    3bcc:	f9 01       	movw	r30, r18
    3bce:	91 83       	std	Z+1, r25	; 0x01
    3bd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd2:	ce 01       	movw	r24, r28
    3bd4:	81 5a       	subi	r24, 0xA1	; 161
    3bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd8:	9e 01       	movw	r18, r28
    3bda:	21 5a       	subi	r18, 0xA1	; 161
    3bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    3bde:	f9 01       	movw	r30, r18
    3be0:	20 81       	ld	r18, Z
    3be2:	31 81       	ldd	r19, Z+1	; 0x01
    3be4:	21 50       	subi	r18, 0x01	; 1
    3be6:	31 09       	sbc	r19, r1
    3be8:	fc 01       	movw	r30, r24
    3bea:	31 83       	std	Z+1, r19	; 0x01
    3bec:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bee:	ce 01       	movw	r24, r28
    3bf0:	81 5a       	subi	r24, 0xA1	; 161
    3bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf4:	fc 01       	movw	r30, r24
    3bf6:	80 81       	ld	r24, Z
    3bf8:	91 81       	ldd	r25, Z+1	; 0x01
    3bfa:	89 2b       	or	r24, r25
    3bfc:	a1 f6       	brne	.-88     	; 0x3ba6 <rotateStepper_3+0xa6a>
    3bfe:	2c c0       	rjmp	.+88     	; 0x3c58 <rotateStepper_3+0xb1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c00:	8e 01       	movw	r16, r28
    3c02:	01 5a       	subi	r16, 0xA1	; 161
    3c04:	1f 4f       	sbci	r17, 0xFF	; 255
    3c06:	ce 01       	movw	r24, r28
    3c08:	85 5a       	subi	r24, 0xA5	; 165
    3c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0c:	fc 01       	movw	r30, r24
    3c0e:	60 81       	ld	r22, Z
    3c10:	71 81       	ldd	r23, Z+1	; 0x01
    3c12:	82 81       	ldd	r24, Z+2	; 0x02
    3c14:	93 81       	ldd	r25, Z+3	; 0x03
    3c16:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    3c1a:	dc 01       	movw	r26, r24
    3c1c:	cb 01       	movw	r24, r22
    3c1e:	f8 01       	movw	r30, r16
    3c20:	91 83       	std	Z+1, r25	; 0x01
    3c22:	80 83       	st	Z, r24
    3c24:	ce 01       	movw	r24, r28
    3c26:	8d 59       	subi	r24, 0x9D	; 157
    3c28:	9f 4f       	sbci	r25, 0xFF	; 255
    3c2a:	9e 01       	movw	r18, r28
    3c2c:	21 5a       	subi	r18, 0xA1	; 161
    3c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c30:	f9 01       	movw	r30, r18
    3c32:	20 81       	ld	r18, Z
    3c34:	31 81       	ldd	r19, Z+1	; 0x01
    3c36:	fc 01       	movw	r30, r24
    3c38:	31 83       	std	Z+1, r19	; 0x01
    3c3a:	20 83       	st	Z, r18
    3c3c:	ce 01       	movw	r24, r28
    3c3e:	8d 59       	subi	r24, 0x9D	; 157
    3c40:	9f 4f       	sbci	r25, 0xFF	; 255
    3c42:	fc 01       	movw	r30, r24
    3c44:	80 81       	ld	r24, Z
    3c46:	91 81       	ldd	r25, Z+1	; 0x01
    3c48:	01 97       	sbiw	r24, 0x01	; 1
    3c4a:	f1 f7       	brne	.-4      	; 0x3c48 <rotateStepper_3+0xb0c>
    3c4c:	9e 01       	movw	r18, r28
    3c4e:	2d 59       	subi	r18, 0x9D	; 157
    3c50:	3f 4f       	sbci	r19, 0xFF	; 255
    3c52:	f9 01       	movw	r30, r18
    3c54:	91 83       	std	Z+1, r25	; 0x01
    3c56:	80 83       	st	Z, r24
			PORTC = 0x01;
    3c58:	85 e3       	ldi	r24, 0x35	; 53
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	21 e0       	ldi	r18, 0x01	; 1
    3c5e:	fc 01       	movw	r30, r24
    3c60:	20 83       	st	Z, r18
			_delay_ms(period);
    3c62:	8d 81       	ldd	r24, Y+5	; 0x05
    3c64:	9e 81       	ldd	r25, Y+6	; 0x06
    3c66:	09 2e       	mov	r0, r25
    3c68:	00 0c       	add	r0, r0
    3c6a:	aa 0b       	sbc	r26, r26
    3c6c:	bb 0b       	sbc	r27, r27
    3c6e:	bc 01       	movw	r22, r24
    3c70:	cd 01       	movw	r24, r26
    3c72:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	8f a3       	std	Y+39, r24	; 0x27
    3c7c:	98 a7       	std	Y+40, r25	; 0x28
    3c7e:	a9 a7       	std	Y+41, r26	; 0x29
    3c80:	ba a7       	std	Y+42, r27	; 0x2a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3c82:	8e 01       	movw	r16, r28
    3c84:	0f 5a       	subi	r16, 0xAF	; 175
    3c86:	1f 4f       	sbci	r17, 0xFF	; 255
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	4a e7       	ldi	r20, 0x7A	; 122
    3c8e:	55 e4       	ldi	r21, 0x45	; 69
    3c90:	6f a1       	ldd	r22, Y+39	; 0x27
    3c92:	78 a5       	ldd	r23, Y+40	; 0x28
    3c94:	89 a5       	ldd	r24, Y+41	; 0x29
    3c96:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c98:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	f8 01       	movw	r30, r16
    3ca2:	80 83       	st	Z, r24
    3ca4:	91 83       	std	Z+1, r25	; 0x01
    3ca6:	a2 83       	std	Z+2, r26	; 0x02
    3ca8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3caa:	ce 01       	movw	r24, r28
    3cac:	8f 5a       	subi	r24, 0xAF	; 175
    3cae:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	40 e8       	ldi	r20, 0x80	; 128
    3cb6:	5f e3       	ldi	r21, 0x3F	; 63
    3cb8:	fc 01       	movw	r30, r24
    3cba:	60 81       	ld	r22, Z
    3cbc:	71 81       	ldd	r23, Z+1	; 0x01
    3cbe:	82 81       	ldd	r24, Z+2	; 0x02
    3cc0:	93 81       	ldd	r25, Z+3	; 0x03
    3cc2:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    3cc6:	88 23       	and	r24, r24
    3cc8:	4c f4       	brge	.+18     	; 0x3cdc <rotateStepper_3+0xba0>
		__ticks = 1;
    3cca:	ce 01       	movw	r24, r28
    3ccc:	8b 5a       	subi	r24, 0xAB	; 171
    3cce:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd0:	21 e0       	ldi	r18, 0x01	; 1
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	31 83       	std	Z+1, r19	; 0x01
    3cd8:	20 83       	st	Z, r18
    3cda:	69 c0       	rjmp	.+210    	; 0x3dae <rotateStepper_3+0xc72>
	else if (__tmp > 65535)
    3cdc:	ce 01       	movw	r24, r28
    3cde:	8f 5a       	subi	r24, 0xAF	; 175
    3ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	3f ef       	ldi	r19, 0xFF	; 255
    3ce6:	4f e7       	ldi	r20, 0x7F	; 127
    3ce8:	57 e4       	ldi	r21, 0x47	; 71
    3cea:	fc 01       	movw	r30, r24
    3cec:	60 81       	ld	r22, Z
    3cee:	71 81       	ldd	r23, Z+1	; 0x01
    3cf0:	82 81       	ldd	r24, Z+2	; 0x02
    3cf2:	93 81       	ldd	r25, Z+3	; 0x03
    3cf4:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    3cf8:	18 16       	cp	r1, r24
    3cfa:	0c f0       	brlt	.+2      	; 0x3cfe <rotateStepper_3+0xbc2>
    3cfc:	46 c0       	rjmp	.+140    	; 0x3d8a <rotateStepper_3+0xc4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	40 e2       	ldi	r20, 0x20	; 32
    3d04:	51 e4       	ldi	r21, 0x41	; 65
    3d06:	6f a1       	ldd	r22, Y+39	; 0x27
    3d08:	78 a5       	ldd	r23, Y+40	; 0x28
    3d0a:	89 a5       	ldd	r24, Y+41	; 0x29
    3d0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d0e:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	8e 01       	movw	r16, r28
    3d18:	0b 5a       	subi	r16, 0xAB	; 171
    3d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d1c:	bc 01       	movw	r22, r24
    3d1e:	cd 01       	movw	r24, r26
    3d20:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	f8 01       	movw	r30, r16
    3d2a:	91 83       	std	Z+1, r25	; 0x01
    3d2c:	80 83       	st	Z, r24
    3d2e:	24 c0       	rjmp	.+72     	; 0x3d78 <rotateStepper_3+0xc3c>
    3d30:	ce 01       	movw	r24, r28
    3d32:	89 5a       	subi	r24, 0xA9	; 169
    3d34:	9f 4f       	sbci	r25, 0xFF	; 255
    3d36:	20 e9       	ldi	r18, 0x90	; 144
    3d38:	31 e0       	ldi	r19, 0x01	; 1
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	31 83       	std	Z+1, r19	; 0x01
    3d3e:	20 83       	st	Z, r18
    3d40:	ce 01       	movw	r24, r28
    3d42:	89 5a       	subi	r24, 0xA9	; 169
    3d44:	9f 4f       	sbci	r25, 0xFF	; 255
    3d46:	fc 01       	movw	r30, r24
    3d48:	80 81       	ld	r24, Z
    3d4a:	91 81       	ldd	r25, Z+1	; 0x01
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	f1 f7       	brne	.-4      	; 0x3d4c <rotateStepper_3+0xc10>
    3d50:	9e 01       	movw	r18, r28
    3d52:	29 5a       	subi	r18, 0xA9	; 169
    3d54:	3f 4f       	sbci	r19, 0xFF	; 255
    3d56:	f9 01       	movw	r30, r18
    3d58:	91 83       	std	Z+1, r25	; 0x01
    3d5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d5c:	ce 01       	movw	r24, r28
    3d5e:	8b 5a       	subi	r24, 0xAB	; 171
    3d60:	9f 4f       	sbci	r25, 0xFF	; 255
    3d62:	9e 01       	movw	r18, r28
    3d64:	2b 5a       	subi	r18, 0xAB	; 171
    3d66:	3f 4f       	sbci	r19, 0xFF	; 255
    3d68:	f9 01       	movw	r30, r18
    3d6a:	20 81       	ld	r18, Z
    3d6c:	31 81       	ldd	r19, Z+1	; 0x01
    3d6e:	21 50       	subi	r18, 0x01	; 1
    3d70:	31 09       	sbc	r19, r1
    3d72:	fc 01       	movw	r30, r24
    3d74:	31 83       	std	Z+1, r19	; 0x01
    3d76:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d78:	ce 01       	movw	r24, r28
    3d7a:	8b 5a       	subi	r24, 0xAB	; 171
    3d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d7e:	fc 01       	movw	r30, r24
    3d80:	80 81       	ld	r24, Z
    3d82:	91 81       	ldd	r25, Z+1	; 0x01
    3d84:	89 2b       	or	r24, r25
    3d86:	a1 f6       	brne	.-88     	; 0x3d30 <rotateStepper_3+0xbf4>
    3d88:	2c c0       	rjmp	.+88     	; 0x3de2 <rotateStepper_3+0xca6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8a:	8e 01       	movw	r16, r28
    3d8c:	0b 5a       	subi	r16, 0xAB	; 171
    3d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d90:	ce 01       	movw	r24, r28
    3d92:	8f 5a       	subi	r24, 0xAF	; 175
    3d94:	9f 4f       	sbci	r25, 0xFF	; 255
    3d96:	fc 01       	movw	r30, r24
    3d98:	60 81       	ld	r22, Z
    3d9a:	71 81       	ldd	r23, Z+1	; 0x01
    3d9c:	82 81       	ldd	r24, Z+2	; 0x02
    3d9e:	93 81       	ldd	r25, Z+3	; 0x03
    3da0:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	f8 01       	movw	r30, r16
    3daa:	91 83       	std	Z+1, r25	; 0x01
    3dac:	80 83       	st	Z, r24
    3dae:	ce 01       	movw	r24, r28
    3db0:	87 5a       	subi	r24, 0xA7	; 167
    3db2:	9f 4f       	sbci	r25, 0xFF	; 255
    3db4:	9e 01       	movw	r18, r28
    3db6:	2b 5a       	subi	r18, 0xAB	; 171
    3db8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dba:	f9 01       	movw	r30, r18
    3dbc:	20 81       	ld	r18, Z
    3dbe:	31 81       	ldd	r19, Z+1	; 0x01
    3dc0:	fc 01       	movw	r30, r24
    3dc2:	31 83       	std	Z+1, r19	; 0x01
    3dc4:	20 83       	st	Z, r18
    3dc6:	ce 01       	movw	r24, r28
    3dc8:	87 5a       	subi	r24, 0xA7	; 167
    3dca:	9f 4f       	sbci	r25, 0xFF	; 255
    3dcc:	fc 01       	movw	r30, r24
    3dce:	80 81       	ld	r24, Z
    3dd0:	91 81       	ldd	r25, Z+1	; 0x01
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	f1 f7       	brne	.-4      	; 0x3dd2 <rotateStepper_3+0xc96>
    3dd6:	9e 01       	movw	r18, r28
    3dd8:	27 5a       	subi	r18, 0xA7	; 167
    3dda:	3f 4f       	sbci	r19, 0xFF	; 255
    3ddc:	f9 01       	movw	r30, r18
    3dde:	91 83       	std	Z+1, r25	; 0x01
    3de0:	80 83       	st	Z, r24
			PORTC = 0x03;
    3de2:	85 e3       	ldi	r24, 0x35	; 53
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	23 e0       	ldi	r18, 0x03	; 3
    3de8:	fc 01       	movw	r30, r24
    3dea:	20 83       	st	Z, r18
			_delay_ms(period);
    3dec:	8d 81       	ldd	r24, Y+5	; 0x05
    3dee:	9e 81       	ldd	r25, Y+6	; 0x06
    3df0:	09 2e       	mov	r0, r25
    3df2:	00 0c       	add	r0, r0
    3df4:	aa 0b       	sbc	r26, r26
    3df6:	bb 0b       	sbc	r27, r27
    3df8:	bc 01       	movw	r22, r24
    3dfa:	cd 01       	movw	r24, r26
    3dfc:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	9e 01       	movw	r18, r28
    3e06:	2d 5b       	subi	r18, 0xBD	; 189
    3e08:	3f 4f       	sbci	r19, 0xFF	; 255
    3e0a:	f9 01       	movw	r30, r18
    3e0c:	80 83       	st	Z, r24
    3e0e:	91 83       	std	Z+1, r25	; 0x01
    3e10:	a2 83       	std	Z+2, r26	; 0x02
    3e12:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3e14:	8e 01       	movw	r16, r28
    3e16:	09 5b       	subi	r16, 0xB9	; 185
    3e18:	1f 4f       	sbci	r17, 0xFF	; 255
    3e1a:	ce 01       	movw	r24, r28
    3e1c:	8d 5b       	subi	r24, 0xBD	; 189
    3e1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	4a e7       	ldi	r20, 0x7A	; 122
    3e26:	55 e4       	ldi	r21, 0x45	; 69
    3e28:	fc 01       	movw	r30, r24
    3e2a:	60 81       	ld	r22, Z
    3e2c:	71 81       	ldd	r23, Z+1	; 0x01
    3e2e:	82 81       	ldd	r24, Z+2	; 0x02
    3e30:	93 81       	ldd	r25, Z+3	; 0x03
    3e32:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    3e36:	dc 01       	movw	r26, r24
    3e38:	cb 01       	movw	r24, r22
    3e3a:	f8 01       	movw	r30, r16
    3e3c:	80 83       	st	Z, r24
    3e3e:	91 83       	std	Z+1, r25	; 0x01
    3e40:	a2 83       	std	Z+2, r26	; 0x02
    3e42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e44:	ce 01       	movw	r24, r28
    3e46:	89 5b       	subi	r24, 0xB9	; 185
    3e48:	9f 4f       	sbci	r25, 0xFF	; 255
    3e4a:	20 e0       	ldi	r18, 0x00	; 0
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    3e4e:	40 e8       	ldi	r20, 0x80	; 128
    3e50:	5f e3       	ldi	r21, 0x3F	; 63
    3e52:	fc 01       	movw	r30, r24
    3e54:	60 81       	ld	r22, Z
    3e56:	71 81       	ldd	r23, Z+1	; 0x01
    3e58:	82 81       	ldd	r24, Z+2	; 0x02
    3e5a:	93 81       	ldd	r25, Z+3	; 0x03
    3e5c:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    3e60:	88 23       	and	r24, r24
    3e62:	4c f4       	brge	.+18     	; 0x3e76 <rotateStepper_3+0xd3a>
		__ticks = 1;
    3e64:	ce 01       	movw	r24, r28
    3e66:	85 5b       	subi	r24, 0xB5	; 181
    3e68:	9f 4f       	sbci	r25, 0xFF	; 255
    3e6a:	21 e0       	ldi	r18, 0x01	; 1
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	fc 01       	movw	r30, r24
    3e70:	31 83       	std	Z+1, r19	; 0x01
    3e72:	20 83       	st	Z, r18
    3e74:	6d c0       	rjmp	.+218    	; 0x3f50 <rotateStepper_3+0xe14>
	else if (__tmp > 65535)
    3e76:	ce 01       	movw	r24, r28
    3e78:	89 5b       	subi	r24, 0xB9	; 185
    3e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e7c:	20 e0       	ldi	r18, 0x00	; 0
    3e7e:	3f ef       	ldi	r19, 0xFF	; 255
    3e80:	4f e7       	ldi	r20, 0x7F	; 127
    3e82:	57 e4       	ldi	r21, 0x47	; 71
    3e84:	fc 01       	movw	r30, r24
    3e86:	60 81       	ld	r22, Z
    3e88:	71 81       	ldd	r23, Z+1	; 0x01
    3e8a:	82 81       	ldd	r24, Z+2	; 0x02
    3e8c:	93 81       	ldd	r25, Z+3	; 0x03
    3e8e:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    3e92:	18 16       	cp	r1, r24
    3e94:	0c f0       	brlt	.+2      	; 0x3e98 <rotateStepper_3+0xd5c>
    3e96:	4a c0       	rjmp	.+148    	; 0x3f2c <rotateStepper_3+0xdf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e98:	ce 01       	movw	r24, r28
    3e9a:	8d 5b       	subi	r24, 0xBD	; 189
    3e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	40 e2       	ldi	r20, 0x20	; 32
    3ea4:	51 e4       	ldi	r21, 0x41	; 65
    3ea6:	fc 01       	movw	r30, r24
    3ea8:	60 81       	ld	r22, Z
    3eaa:	71 81       	ldd	r23, Z+1	; 0x01
    3eac:	82 81       	ldd	r24, Z+2	; 0x02
    3eae:	93 81       	ldd	r25, Z+3	; 0x03
    3eb0:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	8e 01       	movw	r16, r28
    3eba:	05 5b       	subi	r16, 0xB5	; 181
    3ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ebe:	bc 01       	movw	r22, r24
    3ec0:	cd 01       	movw	r24, r26
    3ec2:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	cb 01       	movw	r24, r22
    3eca:	f8 01       	movw	r30, r16
    3ecc:	91 83       	std	Z+1, r25	; 0x01
    3ece:	80 83       	st	Z, r24
    3ed0:	24 c0       	rjmp	.+72     	; 0x3f1a <rotateStepper_3+0xdde>
    3ed2:	ce 01       	movw	r24, r28
    3ed4:	83 5b       	subi	r24, 0xB3	; 179
    3ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed8:	20 e9       	ldi	r18, 0x90	; 144
    3eda:	31 e0       	ldi	r19, 0x01	; 1
    3edc:	fc 01       	movw	r30, r24
    3ede:	31 83       	std	Z+1, r19	; 0x01
    3ee0:	20 83       	st	Z, r18
    3ee2:	ce 01       	movw	r24, r28
    3ee4:	83 5b       	subi	r24, 0xB3	; 179
    3ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee8:	fc 01       	movw	r30, r24
    3eea:	80 81       	ld	r24, Z
    3eec:	91 81       	ldd	r25, Z+1	; 0x01
    3eee:	01 97       	sbiw	r24, 0x01	; 1
    3ef0:	f1 f7       	brne	.-4      	; 0x3eee <rotateStepper_3+0xdb2>
    3ef2:	9e 01       	movw	r18, r28
    3ef4:	23 5b       	subi	r18, 0xB3	; 179
    3ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ef8:	f9 01       	movw	r30, r18
    3efa:	91 83       	std	Z+1, r25	; 0x01
    3efc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3efe:	ce 01       	movw	r24, r28
    3f00:	85 5b       	subi	r24, 0xB5	; 181
    3f02:	9f 4f       	sbci	r25, 0xFF	; 255
    3f04:	9e 01       	movw	r18, r28
    3f06:	25 5b       	subi	r18, 0xB5	; 181
    3f08:	3f 4f       	sbci	r19, 0xFF	; 255
    3f0a:	f9 01       	movw	r30, r18
    3f0c:	20 81       	ld	r18, Z
    3f0e:	31 81       	ldd	r19, Z+1	; 0x01
    3f10:	21 50       	subi	r18, 0x01	; 1
    3f12:	31 09       	sbc	r19, r1
    3f14:	fc 01       	movw	r30, r24
    3f16:	31 83       	std	Z+1, r19	; 0x01
    3f18:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f1a:	ce 01       	movw	r24, r28
    3f1c:	85 5b       	subi	r24, 0xB5	; 181
    3f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f20:	fc 01       	movw	r30, r24
    3f22:	80 81       	ld	r24, Z
    3f24:	91 81       	ldd	r25, Z+1	; 0x01
    3f26:	89 2b       	or	r24, r25
    3f28:	a1 f6       	brne	.-88     	; 0x3ed2 <rotateStepper_3+0xd96>
    3f2a:	2c c0       	rjmp	.+88     	; 0x3f84 <rotateStepper_3+0xe48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f2c:	8e 01       	movw	r16, r28
    3f2e:	05 5b       	subi	r16, 0xB5	; 181
    3f30:	1f 4f       	sbci	r17, 0xFF	; 255
    3f32:	ce 01       	movw	r24, r28
    3f34:	89 5b       	subi	r24, 0xB9	; 185
    3f36:	9f 4f       	sbci	r25, 0xFF	; 255
    3f38:	fc 01       	movw	r30, r24
    3f3a:	60 81       	ld	r22, Z
    3f3c:	71 81       	ldd	r23, Z+1	; 0x01
    3f3e:	82 81       	ldd	r24, Z+2	; 0x02
    3f40:	93 81       	ldd	r25, Z+3	; 0x03
    3f42:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    3f46:	dc 01       	movw	r26, r24
    3f48:	cb 01       	movw	r24, r22
    3f4a:	f8 01       	movw	r30, r16
    3f4c:	91 83       	std	Z+1, r25	; 0x01
    3f4e:	80 83       	st	Z, r24
    3f50:	ce 01       	movw	r24, r28
    3f52:	81 5b       	subi	r24, 0xB1	; 177
    3f54:	9f 4f       	sbci	r25, 0xFF	; 255
    3f56:	9e 01       	movw	r18, r28
    3f58:	25 5b       	subi	r18, 0xB5	; 181
    3f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f5c:	f9 01       	movw	r30, r18
    3f5e:	20 81       	ld	r18, Z
    3f60:	31 81       	ldd	r19, Z+1	; 0x01
    3f62:	fc 01       	movw	r30, r24
    3f64:	31 83       	std	Z+1, r19	; 0x01
    3f66:	20 83       	st	Z, r18
    3f68:	ce 01       	movw	r24, r28
    3f6a:	81 5b       	subi	r24, 0xB1	; 177
    3f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f6e:	fc 01       	movw	r30, r24
    3f70:	80 81       	ld	r24, Z
    3f72:	91 81       	ldd	r25, Z+1	; 0x01
    3f74:	01 97       	sbiw	r24, 0x01	; 1
    3f76:	f1 f7       	brne	.-4      	; 0x3f74 <rotateStepper_3+0xe38>
    3f78:	9e 01       	movw	r18, r28
    3f7a:	21 5b       	subi	r18, 0xB1	; 177
    3f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f7e:	f9 01       	movw	r30, r18
    3f80:	91 83       	std	Z+1, r25	; 0x01
    3f82:	80 83       	st	Z, r24
	int period;
	period = 10;
	if (direction == 1)
	{
		/* Rotate  clockwise */
		for (int i = 0; i < 50; i++)
    3f84:	89 81       	ldd	r24, Y+1	; 0x01
    3f86:	9a 81       	ldd	r25, Y+2	; 0x02
    3f88:	01 96       	adiw	r24, 0x01	; 1
    3f8a:	9a 83       	std	Y+2, r25	; 0x02
    3f8c:	89 83       	std	Y+1, r24	; 0x01
    3f8e:	89 81       	ldd	r24, Y+1	; 0x01
    3f90:	9a 81       	ldd	r25, Y+2	; 0x02
    3f92:	c2 97       	sbiw	r24, 0x32	; 50
    3f94:	0c f4       	brge	.+2      	; 0x3f98 <rotateStepper_3+0xe5c>
    3f96:	fd c8       	rjmp	.-3590   	; 0x3192 <rotateStepper_3+0x56>
    3f98:	80 e0       	ldi	r24, 0x00	; 0
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	a0 e2       	ldi	r26, 0x20	; 32
    3f9e:	b1 e4       	ldi	r27, 0x41	; 65
    3fa0:	8f 83       	std	Y+7, r24	; 0x07
    3fa2:	98 87       	std	Y+8, r25	; 0x08
    3fa4:	a9 87       	std	Y+9, r26	; 0x09
    3fa6:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3fa8:	8e 01       	movw	r16, r28
    3faa:	0f 55       	subi	r16, 0x5F	; 95
    3fac:	1f 4f       	sbci	r17, 0xFF	; 255
    3fae:	20 e0       	ldi	r18, 0x00	; 0
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	4a e7       	ldi	r20, 0x7A	; 122
    3fb4:	55 e4       	ldi	r21, 0x45	; 69
    3fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    3fb8:	78 85       	ldd	r23, Y+8	; 0x08
    3fba:	89 85       	ldd	r24, Y+9	; 0x09
    3fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fbe:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	f8 01       	movw	r30, r16
    3fc8:	80 83       	st	Z, r24
    3fca:	91 83       	std	Z+1, r25	; 0x01
    3fcc:	a2 83       	std	Z+2, r26	; 0x02
    3fce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fd0:	ce 01       	movw	r24, r28
    3fd2:	8f 55       	subi	r24, 0x5F	; 95
    3fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	40 e8       	ldi	r20, 0x80	; 128
    3fdc:	5f e3       	ldi	r21, 0x3F	; 63
    3fde:	fc 01       	movw	r30, r24
    3fe0:	60 81       	ld	r22, Z
    3fe2:	71 81       	ldd	r23, Z+1	; 0x01
    3fe4:	82 81       	ldd	r24, Z+2	; 0x02
    3fe6:	93 81       	ldd	r25, Z+3	; 0x03
    3fe8:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    3fec:	88 23       	and	r24, r24
    3fee:	4c f4       	brge	.+18     	; 0x4002 <rotateStepper_3+0xec6>
		__ticks = 1;
    3ff0:	ce 01       	movw	r24, r28
    3ff2:	8b 55       	subi	r24, 0x5B	; 91
    3ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ff6:	21 e0       	ldi	r18, 0x01	; 1
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	fc 01       	movw	r30, r24
    3ffc:	31 83       	std	Z+1, r19	; 0x01
    3ffe:	20 83       	st	Z, r18
    4000:	69 c0       	rjmp	.+210    	; 0x40d4 <rotateStepper_3+0xf98>
	else if (__tmp > 65535)
    4002:	ce 01       	movw	r24, r28
    4004:	8f 55       	subi	r24, 0x5F	; 95
    4006:	9f 4f       	sbci	r25, 0xFF	; 255
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	3f ef       	ldi	r19, 0xFF	; 255
    400c:	4f e7       	ldi	r20, 0x7F	; 127
    400e:	57 e4       	ldi	r21, 0x47	; 71
    4010:	fc 01       	movw	r30, r24
    4012:	60 81       	ld	r22, Z
    4014:	71 81       	ldd	r23, Z+1	; 0x01
    4016:	82 81       	ldd	r24, Z+2	; 0x02
    4018:	93 81       	ldd	r25, Z+3	; 0x03
    401a:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    401e:	18 16       	cp	r1, r24
    4020:	0c f0       	brlt	.+2      	; 0x4024 <rotateStepper_3+0xee8>
    4022:	46 c0       	rjmp	.+140    	; 0x40b0 <rotateStepper_3+0xf74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	40 e2       	ldi	r20, 0x20	; 32
    402a:	51 e4       	ldi	r21, 0x41	; 65
    402c:	6f 81       	ldd	r22, Y+7	; 0x07
    402e:	78 85       	ldd	r23, Y+8	; 0x08
    4030:	89 85       	ldd	r24, Y+9	; 0x09
    4032:	9a 85       	ldd	r25, Y+10	; 0x0a
    4034:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4038:	dc 01       	movw	r26, r24
    403a:	cb 01       	movw	r24, r22
    403c:	8e 01       	movw	r16, r28
    403e:	0b 55       	subi	r16, 0x5B	; 91
    4040:	1f 4f       	sbci	r17, 0xFF	; 255
    4042:	bc 01       	movw	r22, r24
    4044:	cd 01       	movw	r24, r26
    4046:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    404a:	dc 01       	movw	r26, r24
    404c:	cb 01       	movw	r24, r22
    404e:	f8 01       	movw	r30, r16
    4050:	91 83       	std	Z+1, r25	; 0x01
    4052:	80 83       	st	Z, r24
    4054:	24 c0       	rjmp	.+72     	; 0x409e <rotateStepper_3+0xf62>
    4056:	ce 01       	movw	r24, r28
    4058:	89 55       	subi	r24, 0x59	; 89
    405a:	9f 4f       	sbci	r25, 0xFF	; 255
    405c:	20 e9       	ldi	r18, 0x90	; 144
    405e:	31 e0       	ldi	r19, 0x01	; 1
    4060:	fc 01       	movw	r30, r24
    4062:	31 83       	std	Z+1, r19	; 0x01
    4064:	20 83       	st	Z, r18
    4066:	ce 01       	movw	r24, r28
    4068:	89 55       	subi	r24, 0x59	; 89
    406a:	9f 4f       	sbci	r25, 0xFF	; 255
    406c:	fc 01       	movw	r30, r24
    406e:	80 81       	ld	r24, Z
    4070:	91 81       	ldd	r25, Z+1	; 0x01
    4072:	01 97       	sbiw	r24, 0x01	; 1
    4074:	f1 f7       	brne	.-4      	; 0x4072 <rotateStepper_3+0xf36>
    4076:	9e 01       	movw	r18, r28
    4078:	29 55       	subi	r18, 0x59	; 89
    407a:	3f 4f       	sbci	r19, 0xFF	; 255
    407c:	f9 01       	movw	r30, r18
    407e:	91 83       	std	Z+1, r25	; 0x01
    4080:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4082:	ce 01       	movw	r24, r28
    4084:	8b 55       	subi	r24, 0x5B	; 91
    4086:	9f 4f       	sbci	r25, 0xFF	; 255
    4088:	9e 01       	movw	r18, r28
    408a:	2b 55       	subi	r18, 0x5B	; 91
    408c:	3f 4f       	sbci	r19, 0xFF	; 255
    408e:	f9 01       	movw	r30, r18
    4090:	20 81       	ld	r18, Z
    4092:	31 81       	ldd	r19, Z+1	; 0x01
    4094:	21 50       	subi	r18, 0x01	; 1
    4096:	31 09       	sbc	r19, r1
    4098:	fc 01       	movw	r30, r24
    409a:	31 83       	std	Z+1, r19	; 0x01
    409c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    409e:	ce 01       	movw	r24, r28
    40a0:	8b 55       	subi	r24, 0x5B	; 91
    40a2:	9f 4f       	sbci	r25, 0xFF	; 255
    40a4:	fc 01       	movw	r30, r24
    40a6:	80 81       	ld	r24, Z
    40a8:	91 81       	ldd	r25, Z+1	; 0x01
    40aa:	89 2b       	or	r24, r25
    40ac:	a1 f6       	brne	.-88     	; 0x4056 <rotateStepper_3+0xf1a>
			_delay_ms(period);
		}

		_delay_ms(10);
	}
}
    40ae:	d5 c4       	rjmp	.+2474   	; 0x4a5a <rotateStepper_3+0x191e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40b0:	8e 01       	movw	r16, r28
    40b2:	0b 55       	subi	r16, 0x5B	; 91
    40b4:	1f 4f       	sbci	r17, 0xFF	; 255
    40b6:	ce 01       	movw	r24, r28
    40b8:	8f 55       	subi	r24, 0x5F	; 95
    40ba:	9f 4f       	sbci	r25, 0xFF	; 255
    40bc:	fc 01       	movw	r30, r24
    40be:	60 81       	ld	r22, Z
    40c0:	71 81       	ldd	r23, Z+1	; 0x01
    40c2:	82 81       	ldd	r24, Z+2	; 0x02
    40c4:	93 81       	ldd	r25, Z+3	; 0x03
    40c6:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	f8 01       	movw	r30, r16
    40d0:	91 83       	std	Z+1, r25	; 0x01
    40d2:	80 83       	st	Z, r24
    40d4:	ce 01       	movw	r24, r28
    40d6:	87 55       	subi	r24, 0x57	; 87
    40d8:	9f 4f       	sbci	r25, 0xFF	; 255
    40da:	9e 01       	movw	r18, r28
    40dc:	2b 55       	subi	r18, 0x5B	; 91
    40de:	3f 4f       	sbci	r19, 0xFF	; 255
    40e0:	f9 01       	movw	r30, r18
    40e2:	20 81       	ld	r18, Z
    40e4:	31 81       	ldd	r19, Z+1	; 0x01
    40e6:	fc 01       	movw	r30, r24
    40e8:	31 83       	std	Z+1, r19	; 0x01
    40ea:	20 83       	st	Z, r18
    40ec:	ce 01       	movw	r24, r28
    40ee:	87 55       	subi	r24, 0x57	; 87
    40f0:	9f 4f       	sbci	r25, 0xFF	; 255
    40f2:	fc 01       	movw	r30, r24
    40f4:	80 81       	ld	r24, Z
    40f6:	91 81       	ldd	r25, Z+1	; 0x01
    40f8:	01 97       	sbiw	r24, 0x01	; 1
    40fa:	f1 f7       	brne	.-4      	; 0x40f8 <rotateStepper_3+0xfbc>
    40fc:	9e 01       	movw	r18, r28
    40fe:	27 55       	subi	r18, 0x57	; 87
    4100:	3f 4f       	sbci	r19, 0xFF	; 255
    4102:	f9 01       	movw	r30, r18
    4104:	91 83       	std	Z+1, r25	; 0x01
    4106:	80 83       	st	Z, r24
    4108:	a8 c4       	rjmp	.+2384   	; 0x4a5a <rotateStepper_3+0x191e>
		_delay_ms(10);
	}
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < 50; i++)
    410a:	1c 82       	std	Y+4, r1	; 0x04
    410c:	1b 82       	std	Y+3, r1	; 0x03
    410e:	e8 c3       	rjmp	.+2000   	; 0x48e0 <rotateStepper_3+0x17a4>
		{
			PORTC = 0x03;
    4110:	85 e3       	ldi	r24, 0x35	; 53
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	23 e0       	ldi	r18, 0x03	; 3
    4116:	fc 01       	movw	r30, r24
    4118:	20 83       	st	Z, r18
			_delay_ms(period);
    411a:	8d 81       	ldd	r24, Y+5	; 0x05
    411c:	9e 81       	ldd	r25, Y+6	; 0x06
    411e:	09 2e       	mov	r0, r25
    4120:	00 0c       	add	r0, r0
    4122:	aa 0b       	sbc	r26, r26
    4124:	bb 0b       	sbc	r27, r27
    4126:	bc 01       	movw	r22, r24
    4128:	cd 01       	movw	r24, r26
    412a:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    412e:	dc 01       	movw	r26, r24
    4130:	cb 01       	movw	r24, r22
    4132:	8b ab       	std	Y+51, r24	; 0x33
    4134:	9c ab       	std	Y+52, r25	; 0x34
    4136:	ad ab       	std	Y+53, r26	; 0x35
    4138:	be ab       	std	Y+54, r27	; 0x36

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    413a:	8e 01       	movw	r16, r28
    413c:	0d 52       	subi	r16, 0x2D	; 45
    413e:	1f 4f       	sbci	r17, 0xFF	; 255
    4140:	20 e0       	ldi	r18, 0x00	; 0
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	4a e7       	ldi	r20, 0x7A	; 122
    4146:	55 e4       	ldi	r21, 0x45	; 69
    4148:	6b a9       	ldd	r22, Y+51	; 0x33
    414a:	7c a9       	ldd	r23, Y+52	; 0x34
    414c:	8d a9       	ldd	r24, Y+53	; 0x35
    414e:	9e a9       	ldd	r25, Y+54	; 0x36
    4150:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	f8 01       	movw	r30, r16
    415a:	80 83       	st	Z, r24
    415c:	91 83       	std	Z+1, r25	; 0x01
    415e:	a2 83       	std	Z+2, r26	; 0x02
    4160:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4162:	ce 01       	movw	r24, r28
    4164:	8d 52       	subi	r24, 0x2D	; 45
    4166:	9f 4f       	sbci	r25, 0xFF	; 255
    4168:	20 e0       	ldi	r18, 0x00	; 0
    416a:	30 e0       	ldi	r19, 0x00	; 0
    416c:	40 e8       	ldi	r20, 0x80	; 128
    416e:	5f e3       	ldi	r21, 0x3F	; 63
    4170:	fc 01       	movw	r30, r24
    4172:	60 81       	ld	r22, Z
    4174:	71 81       	ldd	r23, Z+1	; 0x01
    4176:	82 81       	ldd	r24, Z+2	; 0x02
    4178:	93 81       	ldd	r25, Z+3	; 0x03
    417a:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    417e:	88 23       	and	r24, r24
    4180:	4c f4       	brge	.+18     	; 0x4194 <rotateStepper_3+0x1058>
		__ticks = 1;
    4182:	ce 01       	movw	r24, r28
    4184:	89 52       	subi	r24, 0x29	; 41
    4186:	9f 4f       	sbci	r25, 0xFF	; 255
    4188:	21 e0       	ldi	r18, 0x01	; 1
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	fc 01       	movw	r30, r24
    418e:	31 83       	std	Z+1, r19	; 0x01
    4190:	20 83       	st	Z, r18
    4192:	69 c0       	rjmp	.+210    	; 0x4266 <rotateStepper_3+0x112a>
	else if (__tmp > 65535)
    4194:	ce 01       	movw	r24, r28
    4196:	8d 52       	subi	r24, 0x2D	; 45
    4198:	9f 4f       	sbci	r25, 0xFF	; 255
    419a:	20 e0       	ldi	r18, 0x00	; 0
    419c:	3f ef       	ldi	r19, 0xFF	; 255
    419e:	4f e7       	ldi	r20, 0x7F	; 127
    41a0:	57 e4       	ldi	r21, 0x47	; 71
    41a2:	fc 01       	movw	r30, r24
    41a4:	60 81       	ld	r22, Z
    41a6:	71 81       	ldd	r23, Z+1	; 0x01
    41a8:	82 81       	ldd	r24, Z+2	; 0x02
    41aa:	93 81       	ldd	r25, Z+3	; 0x03
    41ac:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    41b0:	18 16       	cp	r1, r24
    41b2:	0c f0       	brlt	.+2      	; 0x41b6 <rotateStepper_3+0x107a>
    41b4:	46 c0       	rjmp	.+140    	; 0x4242 <rotateStepper_3+0x1106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b6:	20 e0       	ldi	r18, 0x00	; 0
    41b8:	30 e0       	ldi	r19, 0x00	; 0
    41ba:	40 e2       	ldi	r20, 0x20	; 32
    41bc:	51 e4       	ldi	r21, 0x41	; 65
    41be:	6b a9       	ldd	r22, Y+51	; 0x33
    41c0:	7c a9       	ldd	r23, Y+52	; 0x34
    41c2:	8d a9       	ldd	r24, Y+53	; 0x35
    41c4:	9e a9       	ldd	r25, Y+54	; 0x36
    41c6:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    41ca:	dc 01       	movw	r26, r24
    41cc:	cb 01       	movw	r24, r22
    41ce:	8e 01       	movw	r16, r28
    41d0:	09 52       	subi	r16, 0x29	; 41
    41d2:	1f 4f       	sbci	r17, 0xFF	; 255
    41d4:	bc 01       	movw	r22, r24
    41d6:	cd 01       	movw	r24, r26
    41d8:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    41dc:	dc 01       	movw	r26, r24
    41de:	cb 01       	movw	r24, r22
    41e0:	f8 01       	movw	r30, r16
    41e2:	91 83       	std	Z+1, r25	; 0x01
    41e4:	80 83       	st	Z, r24
    41e6:	24 c0       	rjmp	.+72     	; 0x4230 <rotateStepper_3+0x10f4>
    41e8:	ce 01       	movw	r24, r28
    41ea:	87 52       	subi	r24, 0x27	; 39
    41ec:	9f 4f       	sbci	r25, 0xFF	; 255
    41ee:	20 e9       	ldi	r18, 0x90	; 144
    41f0:	31 e0       	ldi	r19, 0x01	; 1
    41f2:	fc 01       	movw	r30, r24
    41f4:	31 83       	std	Z+1, r19	; 0x01
    41f6:	20 83       	st	Z, r18
    41f8:	ce 01       	movw	r24, r28
    41fa:	87 52       	subi	r24, 0x27	; 39
    41fc:	9f 4f       	sbci	r25, 0xFF	; 255
    41fe:	fc 01       	movw	r30, r24
    4200:	80 81       	ld	r24, Z
    4202:	91 81       	ldd	r25, Z+1	; 0x01
    4204:	01 97       	sbiw	r24, 0x01	; 1
    4206:	f1 f7       	brne	.-4      	; 0x4204 <rotateStepper_3+0x10c8>
    4208:	9e 01       	movw	r18, r28
    420a:	27 52       	subi	r18, 0x27	; 39
    420c:	3f 4f       	sbci	r19, 0xFF	; 255
    420e:	f9 01       	movw	r30, r18
    4210:	91 83       	std	Z+1, r25	; 0x01
    4212:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4214:	ce 01       	movw	r24, r28
    4216:	89 52       	subi	r24, 0x29	; 41
    4218:	9f 4f       	sbci	r25, 0xFF	; 255
    421a:	9e 01       	movw	r18, r28
    421c:	29 52       	subi	r18, 0x29	; 41
    421e:	3f 4f       	sbci	r19, 0xFF	; 255
    4220:	f9 01       	movw	r30, r18
    4222:	20 81       	ld	r18, Z
    4224:	31 81       	ldd	r19, Z+1	; 0x01
    4226:	21 50       	subi	r18, 0x01	; 1
    4228:	31 09       	sbc	r19, r1
    422a:	fc 01       	movw	r30, r24
    422c:	31 83       	std	Z+1, r19	; 0x01
    422e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4230:	ce 01       	movw	r24, r28
    4232:	89 52       	subi	r24, 0x29	; 41
    4234:	9f 4f       	sbci	r25, 0xFF	; 255
    4236:	fc 01       	movw	r30, r24
    4238:	80 81       	ld	r24, Z
    423a:	91 81       	ldd	r25, Z+1	; 0x01
    423c:	89 2b       	or	r24, r25
    423e:	a1 f6       	brne	.-88     	; 0x41e8 <rotateStepper_3+0x10ac>
    4240:	2c c0       	rjmp	.+88     	; 0x429a <rotateStepper_3+0x115e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4242:	8e 01       	movw	r16, r28
    4244:	09 52       	subi	r16, 0x29	; 41
    4246:	1f 4f       	sbci	r17, 0xFF	; 255
    4248:	ce 01       	movw	r24, r28
    424a:	8d 52       	subi	r24, 0x2D	; 45
    424c:	9f 4f       	sbci	r25, 0xFF	; 255
    424e:	fc 01       	movw	r30, r24
    4250:	60 81       	ld	r22, Z
    4252:	71 81       	ldd	r23, Z+1	; 0x01
    4254:	82 81       	ldd	r24, Z+2	; 0x02
    4256:	93 81       	ldd	r25, Z+3	; 0x03
    4258:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	f8 01       	movw	r30, r16
    4262:	91 83       	std	Z+1, r25	; 0x01
    4264:	80 83       	st	Z, r24
    4266:	ce 01       	movw	r24, r28
    4268:	85 52       	subi	r24, 0x25	; 37
    426a:	9f 4f       	sbci	r25, 0xFF	; 255
    426c:	9e 01       	movw	r18, r28
    426e:	29 52       	subi	r18, 0x29	; 41
    4270:	3f 4f       	sbci	r19, 0xFF	; 255
    4272:	f9 01       	movw	r30, r18
    4274:	20 81       	ld	r18, Z
    4276:	31 81       	ldd	r19, Z+1	; 0x01
    4278:	fc 01       	movw	r30, r24
    427a:	31 83       	std	Z+1, r19	; 0x01
    427c:	20 83       	st	Z, r18
    427e:	ce 01       	movw	r24, r28
    4280:	85 52       	subi	r24, 0x25	; 37
    4282:	9f 4f       	sbci	r25, 0xFF	; 255
    4284:	fc 01       	movw	r30, r24
    4286:	80 81       	ld	r24, Z
    4288:	91 81       	ldd	r25, Z+1	; 0x01
    428a:	01 97       	sbiw	r24, 0x01	; 1
    428c:	f1 f7       	brne	.-4      	; 0x428a <rotateStepper_3+0x114e>
    428e:	9e 01       	movw	r18, r28
    4290:	25 52       	subi	r18, 0x25	; 37
    4292:	3f 4f       	sbci	r19, 0xFF	; 255
    4294:	f9 01       	movw	r30, r18
    4296:	91 83       	std	Z+1, r25	; 0x01
    4298:	80 83       	st	Z, r24
			PORTC = 0x09;
    429a:	85 e3       	ldi	r24, 0x35	; 53
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	29 e0       	ldi	r18, 0x09	; 9
    42a0:	fc 01       	movw	r30, r24
    42a2:	20 83       	st	Z, r18
			_delay_ms(period);
    42a4:	8d 81       	ldd	r24, Y+5	; 0x05
    42a6:	9e 81       	ldd	r25, Y+6	; 0x06
    42a8:	09 2e       	mov	r0, r25
    42aa:	00 0c       	add	r0, r0
    42ac:	aa 0b       	sbc	r26, r26
    42ae:	bb 0b       	sbc	r27, r27
    42b0:	bc 01       	movw	r22, r24
    42b2:	cd 01       	movw	r24, r26
    42b4:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    42b8:	dc 01       	movw	r26, r24
    42ba:	cb 01       	movw	r24, r22
    42bc:	8f ab       	std	Y+55, r24	; 0x37
    42be:	98 af       	std	Y+56, r25	; 0x38
    42c0:	a9 af       	std	Y+57, r26	; 0x39
    42c2:	ba af       	std	Y+58, r27	; 0x3a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    42c4:	8e 01       	movw	r16, r28
    42c6:	07 53       	subi	r16, 0x37	; 55
    42c8:	1f 4f       	sbci	r17, 0xFF	; 255
    42ca:	20 e0       	ldi	r18, 0x00	; 0
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	4a e7       	ldi	r20, 0x7A	; 122
    42d0:	55 e4       	ldi	r21, 0x45	; 69
    42d2:	6f a9       	ldd	r22, Y+55	; 0x37
    42d4:	78 ad       	ldd	r23, Y+56	; 0x38
    42d6:	89 ad       	ldd	r24, Y+57	; 0x39
    42d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    42da:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    42de:	dc 01       	movw	r26, r24
    42e0:	cb 01       	movw	r24, r22
    42e2:	f8 01       	movw	r30, r16
    42e4:	80 83       	st	Z, r24
    42e6:	91 83       	std	Z+1, r25	; 0x01
    42e8:	a2 83       	std	Z+2, r26	; 0x02
    42ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42ec:	ce 01       	movw	r24, r28
    42ee:	87 53       	subi	r24, 0x37	; 55
    42f0:	9f 4f       	sbci	r25, 0xFF	; 255
    42f2:	20 e0       	ldi	r18, 0x00	; 0
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	40 e8       	ldi	r20, 0x80	; 128
    42f8:	5f e3       	ldi	r21, 0x3F	; 63
    42fa:	fc 01       	movw	r30, r24
    42fc:	60 81       	ld	r22, Z
    42fe:	71 81       	ldd	r23, Z+1	; 0x01
    4300:	82 81       	ldd	r24, Z+2	; 0x02
    4302:	93 81       	ldd	r25, Z+3	; 0x03
    4304:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    4308:	88 23       	and	r24, r24
    430a:	4c f4       	brge	.+18     	; 0x431e <rotateStepper_3+0x11e2>
		__ticks = 1;
    430c:	ce 01       	movw	r24, r28
    430e:	83 53       	subi	r24, 0x33	; 51
    4310:	9f 4f       	sbci	r25, 0xFF	; 255
    4312:	21 e0       	ldi	r18, 0x01	; 1
    4314:	30 e0       	ldi	r19, 0x00	; 0
    4316:	fc 01       	movw	r30, r24
    4318:	31 83       	std	Z+1, r19	; 0x01
    431a:	20 83       	st	Z, r18
    431c:	69 c0       	rjmp	.+210    	; 0x43f0 <rotateStepper_3+0x12b4>
	else if (__tmp > 65535)
    431e:	ce 01       	movw	r24, r28
    4320:	87 53       	subi	r24, 0x37	; 55
    4322:	9f 4f       	sbci	r25, 0xFF	; 255
    4324:	20 e0       	ldi	r18, 0x00	; 0
    4326:	3f ef       	ldi	r19, 0xFF	; 255
    4328:	4f e7       	ldi	r20, 0x7F	; 127
    432a:	57 e4       	ldi	r21, 0x47	; 71
    432c:	fc 01       	movw	r30, r24
    432e:	60 81       	ld	r22, Z
    4330:	71 81       	ldd	r23, Z+1	; 0x01
    4332:	82 81       	ldd	r24, Z+2	; 0x02
    4334:	93 81       	ldd	r25, Z+3	; 0x03
    4336:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    433a:	18 16       	cp	r1, r24
    433c:	0c f0       	brlt	.+2      	; 0x4340 <rotateStepper_3+0x1204>
    433e:	46 c0       	rjmp	.+140    	; 0x43cc <rotateStepper_3+0x1290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	30 e0       	ldi	r19, 0x00	; 0
    4344:	40 e2       	ldi	r20, 0x20	; 32
    4346:	51 e4       	ldi	r21, 0x41	; 65
    4348:	6f a9       	ldd	r22, Y+55	; 0x37
    434a:	78 ad       	ldd	r23, Y+56	; 0x38
    434c:	89 ad       	ldd	r24, Y+57	; 0x39
    434e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4350:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	8e 01       	movw	r16, r28
    435a:	03 53       	subi	r16, 0x33	; 51
    435c:	1f 4f       	sbci	r17, 0xFF	; 255
    435e:	bc 01       	movw	r22, r24
    4360:	cd 01       	movw	r24, r26
    4362:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    4366:	dc 01       	movw	r26, r24
    4368:	cb 01       	movw	r24, r22
    436a:	f8 01       	movw	r30, r16
    436c:	91 83       	std	Z+1, r25	; 0x01
    436e:	80 83       	st	Z, r24
    4370:	24 c0       	rjmp	.+72     	; 0x43ba <rotateStepper_3+0x127e>
    4372:	ce 01       	movw	r24, r28
    4374:	81 53       	subi	r24, 0x31	; 49
    4376:	9f 4f       	sbci	r25, 0xFF	; 255
    4378:	20 e9       	ldi	r18, 0x90	; 144
    437a:	31 e0       	ldi	r19, 0x01	; 1
    437c:	fc 01       	movw	r30, r24
    437e:	31 83       	std	Z+1, r19	; 0x01
    4380:	20 83       	st	Z, r18
    4382:	ce 01       	movw	r24, r28
    4384:	81 53       	subi	r24, 0x31	; 49
    4386:	9f 4f       	sbci	r25, 0xFF	; 255
    4388:	fc 01       	movw	r30, r24
    438a:	80 81       	ld	r24, Z
    438c:	91 81       	ldd	r25, Z+1	; 0x01
    438e:	01 97       	sbiw	r24, 0x01	; 1
    4390:	f1 f7       	brne	.-4      	; 0x438e <rotateStepper_3+0x1252>
    4392:	9e 01       	movw	r18, r28
    4394:	21 53       	subi	r18, 0x31	; 49
    4396:	3f 4f       	sbci	r19, 0xFF	; 255
    4398:	f9 01       	movw	r30, r18
    439a:	91 83       	std	Z+1, r25	; 0x01
    439c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    439e:	ce 01       	movw	r24, r28
    43a0:	83 53       	subi	r24, 0x33	; 51
    43a2:	9f 4f       	sbci	r25, 0xFF	; 255
    43a4:	9e 01       	movw	r18, r28
    43a6:	23 53       	subi	r18, 0x33	; 51
    43a8:	3f 4f       	sbci	r19, 0xFF	; 255
    43aa:	f9 01       	movw	r30, r18
    43ac:	20 81       	ld	r18, Z
    43ae:	31 81       	ldd	r19, Z+1	; 0x01
    43b0:	21 50       	subi	r18, 0x01	; 1
    43b2:	31 09       	sbc	r19, r1
    43b4:	fc 01       	movw	r30, r24
    43b6:	31 83       	std	Z+1, r19	; 0x01
    43b8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ba:	ce 01       	movw	r24, r28
    43bc:	83 53       	subi	r24, 0x33	; 51
    43be:	9f 4f       	sbci	r25, 0xFF	; 255
    43c0:	fc 01       	movw	r30, r24
    43c2:	80 81       	ld	r24, Z
    43c4:	91 81       	ldd	r25, Z+1	; 0x01
    43c6:	89 2b       	or	r24, r25
    43c8:	a1 f6       	brne	.-88     	; 0x4372 <rotateStepper_3+0x1236>
    43ca:	2c c0       	rjmp	.+88     	; 0x4424 <rotateStepper_3+0x12e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43cc:	8e 01       	movw	r16, r28
    43ce:	03 53       	subi	r16, 0x33	; 51
    43d0:	1f 4f       	sbci	r17, 0xFF	; 255
    43d2:	ce 01       	movw	r24, r28
    43d4:	87 53       	subi	r24, 0x37	; 55
    43d6:	9f 4f       	sbci	r25, 0xFF	; 255
    43d8:	fc 01       	movw	r30, r24
    43da:	60 81       	ld	r22, Z
    43dc:	71 81       	ldd	r23, Z+1	; 0x01
    43de:	82 81       	ldd	r24, Z+2	; 0x02
    43e0:	93 81       	ldd	r25, Z+3	; 0x03
    43e2:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    43e6:	dc 01       	movw	r26, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	f8 01       	movw	r30, r16
    43ec:	91 83       	std	Z+1, r25	; 0x01
    43ee:	80 83       	st	Z, r24
    43f0:	ce 01       	movw	r24, r28
    43f2:	8f 52       	subi	r24, 0x2F	; 47
    43f4:	9f 4f       	sbci	r25, 0xFF	; 255
    43f6:	9e 01       	movw	r18, r28
    43f8:	23 53       	subi	r18, 0x33	; 51
    43fa:	3f 4f       	sbci	r19, 0xFF	; 255
    43fc:	f9 01       	movw	r30, r18
    43fe:	20 81       	ld	r18, Z
    4400:	31 81       	ldd	r19, Z+1	; 0x01
    4402:	fc 01       	movw	r30, r24
    4404:	31 83       	std	Z+1, r19	; 0x01
    4406:	20 83       	st	Z, r18
    4408:	ce 01       	movw	r24, r28
    440a:	8f 52       	subi	r24, 0x2F	; 47
    440c:	9f 4f       	sbci	r25, 0xFF	; 255
    440e:	fc 01       	movw	r30, r24
    4410:	80 81       	ld	r24, Z
    4412:	91 81       	ldd	r25, Z+1	; 0x01
    4414:	01 97       	sbiw	r24, 0x01	; 1
    4416:	f1 f7       	brne	.-4      	; 0x4414 <rotateStepper_3+0x12d8>
    4418:	9e 01       	movw	r18, r28
    441a:	2f 52       	subi	r18, 0x2F	; 47
    441c:	3f 4f       	sbci	r19, 0xFF	; 255
    441e:	f9 01       	movw	r30, r18
    4420:	91 83       	std	Z+1, r25	; 0x01
    4422:	80 83       	st	Z, r24
			PORTC = 0x0c;
    4424:	85 e3       	ldi	r24, 0x35	; 53
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	2c e0       	ldi	r18, 0x0C	; 12
    442a:	fc 01       	movw	r30, r24
    442c:	20 83       	st	Z, r18
			_delay_ms(period);
    442e:	8d 81       	ldd	r24, Y+5	; 0x05
    4430:	9e 81       	ldd	r25, Y+6	; 0x06
    4432:	09 2e       	mov	r0, r25
    4434:	00 0c       	add	r0, r0
    4436:	aa 0b       	sbc	r26, r26
    4438:	bb 0b       	sbc	r27, r27
    443a:	bc 01       	movw	r22, r24
    443c:	cd 01       	movw	r24, r26
    443e:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    4442:	dc 01       	movw	r26, r24
    4444:	cb 01       	movw	r24, r22
    4446:	8b af       	std	Y+59, r24	; 0x3b
    4448:	9c af       	std	Y+60, r25	; 0x3c
    444a:	ad af       	std	Y+61, r26	; 0x3d
    444c:	be af       	std	Y+62, r27	; 0x3e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    444e:	8e 01       	movw	r16, r28
    4450:	01 54       	subi	r16, 0x41	; 65
    4452:	1f 4f       	sbci	r17, 0xFF	; 255
    4454:	20 e0       	ldi	r18, 0x00	; 0
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	4a e7       	ldi	r20, 0x7A	; 122
    445a:	55 e4       	ldi	r21, 0x45	; 69
    445c:	6b ad       	ldd	r22, Y+59	; 0x3b
    445e:	7c ad       	ldd	r23, Y+60	; 0x3c
    4460:	8d ad       	ldd	r24, Y+61	; 0x3d
    4462:	9e ad       	ldd	r25, Y+62	; 0x3e
    4464:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	f8 01       	movw	r30, r16
    446e:	80 83       	st	Z, r24
    4470:	91 83       	std	Z+1, r25	; 0x01
    4472:	a2 83       	std	Z+2, r26	; 0x02
    4474:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4476:	ce 01       	movw	r24, r28
    4478:	81 54       	subi	r24, 0x41	; 65
    447a:	9f 4f       	sbci	r25, 0xFF	; 255
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	40 e8       	ldi	r20, 0x80	; 128
    4482:	5f e3       	ldi	r21, 0x3F	; 63
    4484:	fc 01       	movw	r30, r24
    4486:	60 81       	ld	r22, Z
    4488:	71 81       	ldd	r23, Z+1	; 0x01
    448a:	82 81       	ldd	r24, Z+2	; 0x02
    448c:	93 81       	ldd	r25, Z+3	; 0x03
    448e:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    4492:	88 23       	and	r24, r24
    4494:	4c f4       	brge	.+18     	; 0x44a8 <rotateStepper_3+0x136c>
		__ticks = 1;
    4496:	ce 01       	movw	r24, r28
    4498:	8d 53       	subi	r24, 0x3D	; 61
    449a:	9f 4f       	sbci	r25, 0xFF	; 255
    449c:	21 e0       	ldi	r18, 0x01	; 1
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	fc 01       	movw	r30, r24
    44a2:	31 83       	std	Z+1, r19	; 0x01
    44a4:	20 83       	st	Z, r18
    44a6:	69 c0       	rjmp	.+210    	; 0x457a <rotateStepper_3+0x143e>
	else if (__tmp > 65535)
    44a8:	ce 01       	movw	r24, r28
    44aa:	81 54       	subi	r24, 0x41	; 65
    44ac:	9f 4f       	sbci	r25, 0xFF	; 255
    44ae:	20 e0       	ldi	r18, 0x00	; 0
    44b0:	3f ef       	ldi	r19, 0xFF	; 255
    44b2:	4f e7       	ldi	r20, 0x7F	; 127
    44b4:	57 e4       	ldi	r21, 0x47	; 71
    44b6:	fc 01       	movw	r30, r24
    44b8:	60 81       	ld	r22, Z
    44ba:	71 81       	ldd	r23, Z+1	; 0x01
    44bc:	82 81       	ldd	r24, Z+2	; 0x02
    44be:	93 81       	ldd	r25, Z+3	; 0x03
    44c0:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    44c4:	18 16       	cp	r1, r24
    44c6:	0c f0       	brlt	.+2      	; 0x44ca <rotateStepper_3+0x138e>
    44c8:	46 c0       	rjmp	.+140    	; 0x4556 <rotateStepper_3+0x141a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ca:	20 e0       	ldi	r18, 0x00	; 0
    44cc:	30 e0       	ldi	r19, 0x00	; 0
    44ce:	40 e2       	ldi	r20, 0x20	; 32
    44d0:	51 e4       	ldi	r21, 0x41	; 65
    44d2:	6b ad       	ldd	r22, Y+59	; 0x3b
    44d4:	7c ad       	ldd	r23, Y+60	; 0x3c
    44d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    44d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    44da:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    44de:	dc 01       	movw	r26, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	8e 01       	movw	r16, r28
    44e4:	0d 53       	subi	r16, 0x3D	; 61
    44e6:	1f 4f       	sbci	r17, 0xFF	; 255
    44e8:	bc 01       	movw	r22, r24
    44ea:	cd 01       	movw	r24, r26
    44ec:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    44f0:	dc 01       	movw	r26, r24
    44f2:	cb 01       	movw	r24, r22
    44f4:	f8 01       	movw	r30, r16
    44f6:	91 83       	std	Z+1, r25	; 0x01
    44f8:	80 83       	st	Z, r24
    44fa:	24 c0       	rjmp	.+72     	; 0x4544 <rotateStepper_3+0x1408>
    44fc:	ce 01       	movw	r24, r28
    44fe:	8b 53       	subi	r24, 0x3B	; 59
    4500:	9f 4f       	sbci	r25, 0xFF	; 255
    4502:	20 e9       	ldi	r18, 0x90	; 144
    4504:	31 e0       	ldi	r19, 0x01	; 1
    4506:	fc 01       	movw	r30, r24
    4508:	31 83       	std	Z+1, r19	; 0x01
    450a:	20 83       	st	Z, r18
    450c:	ce 01       	movw	r24, r28
    450e:	8b 53       	subi	r24, 0x3B	; 59
    4510:	9f 4f       	sbci	r25, 0xFF	; 255
    4512:	fc 01       	movw	r30, r24
    4514:	80 81       	ld	r24, Z
    4516:	91 81       	ldd	r25, Z+1	; 0x01
    4518:	01 97       	sbiw	r24, 0x01	; 1
    451a:	f1 f7       	brne	.-4      	; 0x4518 <rotateStepper_3+0x13dc>
    451c:	9e 01       	movw	r18, r28
    451e:	2b 53       	subi	r18, 0x3B	; 59
    4520:	3f 4f       	sbci	r19, 0xFF	; 255
    4522:	f9 01       	movw	r30, r18
    4524:	91 83       	std	Z+1, r25	; 0x01
    4526:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4528:	ce 01       	movw	r24, r28
    452a:	8d 53       	subi	r24, 0x3D	; 61
    452c:	9f 4f       	sbci	r25, 0xFF	; 255
    452e:	9e 01       	movw	r18, r28
    4530:	2d 53       	subi	r18, 0x3D	; 61
    4532:	3f 4f       	sbci	r19, 0xFF	; 255
    4534:	f9 01       	movw	r30, r18
    4536:	20 81       	ld	r18, Z
    4538:	31 81       	ldd	r19, Z+1	; 0x01
    453a:	21 50       	subi	r18, 0x01	; 1
    453c:	31 09       	sbc	r19, r1
    453e:	fc 01       	movw	r30, r24
    4540:	31 83       	std	Z+1, r19	; 0x01
    4542:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4544:	ce 01       	movw	r24, r28
    4546:	8d 53       	subi	r24, 0x3D	; 61
    4548:	9f 4f       	sbci	r25, 0xFF	; 255
    454a:	fc 01       	movw	r30, r24
    454c:	80 81       	ld	r24, Z
    454e:	91 81       	ldd	r25, Z+1	; 0x01
    4550:	89 2b       	or	r24, r25
    4552:	a1 f6       	brne	.-88     	; 0x44fc <rotateStepper_3+0x13c0>
    4554:	2c c0       	rjmp	.+88     	; 0x45ae <rotateStepper_3+0x1472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4556:	8e 01       	movw	r16, r28
    4558:	0d 53       	subi	r16, 0x3D	; 61
    455a:	1f 4f       	sbci	r17, 0xFF	; 255
    455c:	ce 01       	movw	r24, r28
    455e:	81 54       	subi	r24, 0x41	; 65
    4560:	9f 4f       	sbci	r25, 0xFF	; 255
    4562:	fc 01       	movw	r30, r24
    4564:	60 81       	ld	r22, Z
    4566:	71 81       	ldd	r23, Z+1	; 0x01
    4568:	82 81       	ldd	r24, Z+2	; 0x02
    456a:	93 81       	ldd	r25, Z+3	; 0x03
    456c:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    4570:	dc 01       	movw	r26, r24
    4572:	cb 01       	movw	r24, r22
    4574:	f8 01       	movw	r30, r16
    4576:	91 83       	std	Z+1, r25	; 0x01
    4578:	80 83       	st	Z, r24
    457a:	ce 01       	movw	r24, r28
    457c:	89 53       	subi	r24, 0x39	; 57
    457e:	9f 4f       	sbci	r25, 0xFF	; 255
    4580:	9e 01       	movw	r18, r28
    4582:	2d 53       	subi	r18, 0x3D	; 61
    4584:	3f 4f       	sbci	r19, 0xFF	; 255
    4586:	f9 01       	movw	r30, r18
    4588:	20 81       	ld	r18, Z
    458a:	31 81       	ldd	r19, Z+1	; 0x01
    458c:	fc 01       	movw	r30, r24
    458e:	31 83       	std	Z+1, r19	; 0x01
    4590:	20 83       	st	Z, r18
    4592:	ce 01       	movw	r24, r28
    4594:	89 53       	subi	r24, 0x39	; 57
    4596:	9f 4f       	sbci	r25, 0xFF	; 255
    4598:	fc 01       	movw	r30, r24
    459a:	80 81       	ld	r24, Z
    459c:	91 81       	ldd	r25, Z+1	; 0x01
    459e:	01 97       	sbiw	r24, 0x01	; 1
    45a0:	f1 f7       	brne	.-4      	; 0x459e <rotateStepper_3+0x1462>
    45a2:	9e 01       	movw	r18, r28
    45a4:	29 53       	subi	r18, 0x39	; 57
    45a6:	3f 4f       	sbci	r19, 0xFF	; 255
    45a8:	f9 01       	movw	r30, r18
    45aa:	91 83       	std	Z+1, r25	; 0x01
    45ac:	80 83       	st	Z, r24
			PORTC = 0x06;
    45ae:	85 e3       	ldi	r24, 0x35	; 53
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	26 e0       	ldi	r18, 0x06	; 6
    45b4:	fc 01       	movw	r30, r24
    45b6:	20 83       	st	Z, r18
			_delay_ms(period);
    45b8:	8d 81       	ldd	r24, Y+5	; 0x05
    45ba:	9e 81       	ldd	r25, Y+6	; 0x06
    45bc:	09 2e       	mov	r0, r25
    45be:	00 0c       	add	r0, r0
    45c0:	aa 0b       	sbc	r26, r26
    45c2:	bb 0b       	sbc	r27, r27
    45c4:	bc 01       	movw	r22, r24
    45c6:	cd 01       	movw	r24, r26
    45c8:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    45cc:	dc 01       	movw	r26, r24
    45ce:	cb 01       	movw	r24, r22
    45d0:	9e 01       	movw	r18, r28
    45d2:	21 5c       	subi	r18, 0xC1	; 193
    45d4:	3f 4f       	sbci	r19, 0xFF	; 255
    45d6:	f9 01       	movw	r30, r18
    45d8:	80 83       	st	Z, r24
    45da:	91 83       	std	Z+1, r25	; 0x01
    45dc:	a2 83       	std	Z+2, r26	; 0x02
    45de:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    45e0:	8e 01       	movw	r16, r28
    45e2:	0b 54       	subi	r16, 0x4B	; 75
    45e4:	1f 4f       	sbci	r17, 0xFF	; 255
    45e6:	ce 01       	movw	r24, r28
    45e8:	cf 96       	adiw	r24, 0x3f	; 63
    45ea:	20 e0       	ldi	r18, 0x00	; 0
    45ec:	30 e0       	ldi	r19, 0x00	; 0
    45ee:	4a e7       	ldi	r20, 0x7A	; 122
    45f0:	55 e4       	ldi	r21, 0x45	; 69
    45f2:	fc 01       	movw	r30, r24
    45f4:	60 81       	ld	r22, Z
    45f6:	71 81       	ldd	r23, Z+1	; 0x01
    45f8:	82 81       	ldd	r24, Z+2	; 0x02
    45fa:	93 81       	ldd	r25, Z+3	; 0x03
    45fc:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	f8 01       	movw	r30, r16
    4606:	80 83       	st	Z, r24
    4608:	91 83       	std	Z+1, r25	; 0x01
    460a:	a2 83       	std	Z+2, r26	; 0x02
    460c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    460e:	ce 01       	movw	r24, r28
    4610:	8b 54       	subi	r24, 0x4B	; 75
    4612:	9f 4f       	sbci	r25, 0xFF	; 255
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	40 e8       	ldi	r20, 0x80	; 128
    461a:	5f e3       	ldi	r21, 0x3F	; 63
    461c:	fc 01       	movw	r30, r24
    461e:	60 81       	ld	r22, Z
    4620:	71 81       	ldd	r23, Z+1	; 0x01
    4622:	82 81       	ldd	r24, Z+2	; 0x02
    4624:	93 81       	ldd	r25, Z+3	; 0x03
    4626:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    462a:	88 23       	and	r24, r24
    462c:	4c f4       	brge	.+18     	; 0x4640 <rotateStepper_3+0x1504>
		__ticks = 1;
    462e:	ce 01       	movw	r24, r28
    4630:	87 54       	subi	r24, 0x47	; 71
    4632:	9f 4f       	sbci	r25, 0xFF	; 255
    4634:	21 e0       	ldi	r18, 0x01	; 1
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	fc 01       	movw	r30, r24
    463a:	31 83       	std	Z+1, r19	; 0x01
    463c:	20 83       	st	Z, r18
    463e:	6c c0       	rjmp	.+216    	; 0x4718 <rotateStepper_3+0x15dc>
	else if (__tmp > 65535)
    4640:	ce 01       	movw	r24, r28
    4642:	8b 54       	subi	r24, 0x4B	; 75
    4644:	9f 4f       	sbci	r25, 0xFF	; 255
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	3f ef       	ldi	r19, 0xFF	; 255
    464a:	4f e7       	ldi	r20, 0x7F	; 127
    464c:	57 e4       	ldi	r21, 0x47	; 71
    464e:	fc 01       	movw	r30, r24
    4650:	60 81       	ld	r22, Z
    4652:	71 81       	ldd	r23, Z+1	; 0x01
    4654:	82 81       	ldd	r24, Z+2	; 0x02
    4656:	93 81       	ldd	r25, Z+3	; 0x03
    4658:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    465c:	18 16       	cp	r1, r24
    465e:	0c f0       	brlt	.+2      	; 0x4662 <rotateStepper_3+0x1526>
    4660:	49 c0       	rjmp	.+146    	; 0x46f4 <rotateStepper_3+0x15b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4662:	ce 01       	movw	r24, r28
    4664:	cf 96       	adiw	r24, 0x3f	; 63
    4666:	20 e0       	ldi	r18, 0x00	; 0
    4668:	30 e0       	ldi	r19, 0x00	; 0
    466a:	40 e2       	ldi	r20, 0x20	; 32
    466c:	51 e4       	ldi	r21, 0x41	; 65
    466e:	fc 01       	movw	r30, r24
    4670:	60 81       	ld	r22, Z
    4672:	71 81       	ldd	r23, Z+1	; 0x01
    4674:	82 81       	ldd	r24, Z+2	; 0x02
    4676:	93 81       	ldd	r25, Z+3	; 0x03
    4678:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    467c:	dc 01       	movw	r26, r24
    467e:	cb 01       	movw	r24, r22
    4680:	8e 01       	movw	r16, r28
    4682:	07 54       	subi	r16, 0x47	; 71
    4684:	1f 4f       	sbci	r17, 0xFF	; 255
    4686:	bc 01       	movw	r22, r24
    4688:	cd 01       	movw	r24, r26
    468a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    468e:	dc 01       	movw	r26, r24
    4690:	cb 01       	movw	r24, r22
    4692:	f8 01       	movw	r30, r16
    4694:	91 83       	std	Z+1, r25	; 0x01
    4696:	80 83       	st	Z, r24
    4698:	24 c0       	rjmp	.+72     	; 0x46e2 <rotateStepper_3+0x15a6>
    469a:	ce 01       	movw	r24, r28
    469c:	85 54       	subi	r24, 0x45	; 69
    469e:	9f 4f       	sbci	r25, 0xFF	; 255
    46a0:	20 e9       	ldi	r18, 0x90	; 144
    46a2:	31 e0       	ldi	r19, 0x01	; 1
    46a4:	fc 01       	movw	r30, r24
    46a6:	31 83       	std	Z+1, r19	; 0x01
    46a8:	20 83       	st	Z, r18
    46aa:	ce 01       	movw	r24, r28
    46ac:	85 54       	subi	r24, 0x45	; 69
    46ae:	9f 4f       	sbci	r25, 0xFF	; 255
    46b0:	fc 01       	movw	r30, r24
    46b2:	80 81       	ld	r24, Z
    46b4:	91 81       	ldd	r25, Z+1	; 0x01
    46b6:	01 97       	sbiw	r24, 0x01	; 1
    46b8:	f1 f7       	brne	.-4      	; 0x46b6 <rotateStepper_3+0x157a>
    46ba:	9e 01       	movw	r18, r28
    46bc:	25 54       	subi	r18, 0x45	; 69
    46be:	3f 4f       	sbci	r19, 0xFF	; 255
    46c0:	f9 01       	movw	r30, r18
    46c2:	91 83       	std	Z+1, r25	; 0x01
    46c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46c6:	ce 01       	movw	r24, r28
    46c8:	87 54       	subi	r24, 0x47	; 71
    46ca:	9f 4f       	sbci	r25, 0xFF	; 255
    46cc:	9e 01       	movw	r18, r28
    46ce:	27 54       	subi	r18, 0x47	; 71
    46d0:	3f 4f       	sbci	r19, 0xFF	; 255
    46d2:	f9 01       	movw	r30, r18
    46d4:	20 81       	ld	r18, Z
    46d6:	31 81       	ldd	r19, Z+1	; 0x01
    46d8:	21 50       	subi	r18, 0x01	; 1
    46da:	31 09       	sbc	r19, r1
    46dc:	fc 01       	movw	r30, r24
    46de:	31 83       	std	Z+1, r19	; 0x01
    46e0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46e2:	ce 01       	movw	r24, r28
    46e4:	87 54       	subi	r24, 0x47	; 71
    46e6:	9f 4f       	sbci	r25, 0xFF	; 255
    46e8:	fc 01       	movw	r30, r24
    46ea:	80 81       	ld	r24, Z
    46ec:	91 81       	ldd	r25, Z+1	; 0x01
    46ee:	89 2b       	or	r24, r25
    46f0:	a1 f6       	brne	.-88     	; 0x469a <rotateStepper_3+0x155e>
    46f2:	2c c0       	rjmp	.+88     	; 0x474c <rotateStepper_3+0x1610>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46f4:	8e 01       	movw	r16, r28
    46f6:	07 54       	subi	r16, 0x47	; 71
    46f8:	1f 4f       	sbci	r17, 0xFF	; 255
    46fa:	ce 01       	movw	r24, r28
    46fc:	8b 54       	subi	r24, 0x4B	; 75
    46fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4700:	fc 01       	movw	r30, r24
    4702:	60 81       	ld	r22, Z
    4704:	71 81       	ldd	r23, Z+1	; 0x01
    4706:	82 81       	ldd	r24, Z+2	; 0x02
    4708:	93 81       	ldd	r25, Z+3	; 0x03
    470a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    470e:	dc 01       	movw	r26, r24
    4710:	cb 01       	movw	r24, r22
    4712:	f8 01       	movw	r30, r16
    4714:	91 83       	std	Z+1, r25	; 0x01
    4716:	80 83       	st	Z, r24
    4718:	ce 01       	movw	r24, r28
    471a:	83 54       	subi	r24, 0x43	; 67
    471c:	9f 4f       	sbci	r25, 0xFF	; 255
    471e:	9e 01       	movw	r18, r28
    4720:	27 54       	subi	r18, 0x47	; 71
    4722:	3f 4f       	sbci	r19, 0xFF	; 255
    4724:	f9 01       	movw	r30, r18
    4726:	20 81       	ld	r18, Z
    4728:	31 81       	ldd	r19, Z+1	; 0x01
    472a:	fc 01       	movw	r30, r24
    472c:	31 83       	std	Z+1, r19	; 0x01
    472e:	20 83       	st	Z, r18
    4730:	ce 01       	movw	r24, r28
    4732:	83 54       	subi	r24, 0x43	; 67
    4734:	9f 4f       	sbci	r25, 0xFF	; 255
    4736:	fc 01       	movw	r30, r24
    4738:	80 81       	ld	r24, Z
    473a:	91 81       	ldd	r25, Z+1	; 0x01
    473c:	01 97       	sbiw	r24, 0x01	; 1
    473e:	f1 f7       	brne	.-4      	; 0x473c <rotateStepper_3+0x1600>
    4740:	9e 01       	movw	r18, r28
    4742:	23 54       	subi	r18, 0x43	; 67
    4744:	3f 4f       	sbci	r19, 0xFF	; 255
    4746:	f9 01       	movw	r30, r18
    4748:	91 83       	std	Z+1, r25	; 0x01
    474a:	80 83       	st	Z, r24
			PORTC = 0x03;
    474c:	85 e3       	ldi	r24, 0x35	; 53
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	23 e0       	ldi	r18, 0x03	; 3
    4752:	fc 01       	movw	r30, r24
    4754:	20 83       	st	Z, r18
			_delay_ms(period);
    4756:	8d 81       	ldd	r24, Y+5	; 0x05
    4758:	9e 81       	ldd	r25, Y+6	; 0x06
    475a:	09 2e       	mov	r0, r25
    475c:	00 0c       	add	r0, r0
    475e:	aa 0b       	sbc	r26, r26
    4760:	bb 0b       	sbc	r27, r27
    4762:	bc 01       	movw	r22, r24
    4764:	cd 01       	movw	r24, r26
    4766:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    476a:	dc 01       	movw	r26, r24
    476c:	cb 01       	movw	r24, r22
    476e:	8b a7       	std	Y+43, r24	; 0x2b
    4770:	9c a7       	std	Y+44, r25	; 0x2c
    4772:	ad a7       	std	Y+45, r26	; 0x2d
    4774:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4776:	8e 01       	movw	r16, r28
    4778:	05 55       	subi	r16, 0x55	; 85
    477a:	1f 4f       	sbci	r17, 0xFF	; 255
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	4a e7       	ldi	r20, 0x7A	; 122
    4782:	55 e4       	ldi	r21, 0x45	; 69
    4784:	6b a5       	ldd	r22, Y+43	; 0x2b
    4786:	7c a5       	ldd	r23, Y+44	; 0x2c
    4788:	8d a5       	ldd	r24, Y+45	; 0x2d
    478a:	9e a5       	ldd	r25, Y+46	; 0x2e
    478c:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4790:	dc 01       	movw	r26, r24
    4792:	cb 01       	movw	r24, r22
    4794:	f8 01       	movw	r30, r16
    4796:	80 83       	st	Z, r24
    4798:	91 83       	std	Z+1, r25	; 0x01
    479a:	a2 83       	std	Z+2, r26	; 0x02
    479c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    479e:	ce 01       	movw	r24, r28
    47a0:	85 55       	subi	r24, 0x55	; 85
    47a2:	9f 4f       	sbci	r25, 0xFF	; 255
    47a4:	20 e0       	ldi	r18, 0x00	; 0
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	40 e8       	ldi	r20, 0x80	; 128
    47aa:	5f e3       	ldi	r21, 0x3F	; 63
    47ac:	fc 01       	movw	r30, r24
    47ae:	60 81       	ld	r22, Z
    47b0:	71 81       	ldd	r23, Z+1	; 0x01
    47b2:	82 81       	ldd	r24, Z+2	; 0x02
    47b4:	93 81       	ldd	r25, Z+3	; 0x03
    47b6:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    47ba:	88 23       	and	r24, r24
    47bc:	4c f4       	brge	.+18     	; 0x47d0 <rotateStepper_3+0x1694>
		__ticks = 1;
    47be:	ce 01       	movw	r24, r28
    47c0:	81 55       	subi	r24, 0x51	; 81
    47c2:	9f 4f       	sbci	r25, 0xFF	; 255
    47c4:	21 e0       	ldi	r18, 0x01	; 1
    47c6:	30 e0       	ldi	r19, 0x00	; 0
    47c8:	fc 01       	movw	r30, r24
    47ca:	31 83       	std	Z+1, r19	; 0x01
    47cc:	20 83       	st	Z, r18
    47ce:	69 c0       	rjmp	.+210    	; 0x48a2 <rotateStepper_3+0x1766>
	else if (__tmp > 65535)
    47d0:	ce 01       	movw	r24, r28
    47d2:	85 55       	subi	r24, 0x55	; 85
    47d4:	9f 4f       	sbci	r25, 0xFF	; 255
    47d6:	20 e0       	ldi	r18, 0x00	; 0
    47d8:	3f ef       	ldi	r19, 0xFF	; 255
    47da:	4f e7       	ldi	r20, 0x7F	; 127
    47dc:	57 e4       	ldi	r21, 0x47	; 71
    47de:	fc 01       	movw	r30, r24
    47e0:	60 81       	ld	r22, Z
    47e2:	71 81       	ldd	r23, Z+1	; 0x01
    47e4:	82 81       	ldd	r24, Z+2	; 0x02
    47e6:	93 81       	ldd	r25, Z+3	; 0x03
    47e8:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    47ec:	18 16       	cp	r1, r24
    47ee:	0c f0       	brlt	.+2      	; 0x47f2 <rotateStepper_3+0x16b6>
    47f0:	46 c0       	rjmp	.+140    	; 0x487e <rotateStepper_3+0x1742>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f2:	20 e0       	ldi	r18, 0x00	; 0
    47f4:	30 e0       	ldi	r19, 0x00	; 0
    47f6:	40 e2       	ldi	r20, 0x20	; 32
    47f8:	51 e4       	ldi	r21, 0x41	; 65
    47fa:	6b a5       	ldd	r22, Y+43	; 0x2b
    47fc:	7c a5       	ldd	r23, Y+44	; 0x2c
    47fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    4800:	9e a5       	ldd	r25, Y+46	; 0x2e
    4802:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4806:	dc 01       	movw	r26, r24
    4808:	cb 01       	movw	r24, r22
    480a:	8e 01       	movw	r16, r28
    480c:	01 55       	subi	r16, 0x51	; 81
    480e:	1f 4f       	sbci	r17, 0xFF	; 255
    4810:	bc 01       	movw	r22, r24
    4812:	cd 01       	movw	r24, r26
    4814:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    4818:	dc 01       	movw	r26, r24
    481a:	cb 01       	movw	r24, r22
    481c:	f8 01       	movw	r30, r16
    481e:	91 83       	std	Z+1, r25	; 0x01
    4820:	80 83       	st	Z, r24
    4822:	24 c0       	rjmp	.+72     	; 0x486c <rotateStepper_3+0x1730>
    4824:	ce 01       	movw	r24, r28
    4826:	8f 54       	subi	r24, 0x4F	; 79
    4828:	9f 4f       	sbci	r25, 0xFF	; 255
    482a:	20 e9       	ldi	r18, 0x90	; 144
    482c:	31 e0       	ldi	r19, 0x01	; 1
    482e:	fc 01       	movw	r30, r24
    4830:	31 83       	std	Z+1, r19	; 0x01
    4832:	20 83       	st	Z, r18
    4834:	ce 01       	movw	r24, r28
    4836:	8f 54       	subi	r24, 0x4F	; 79
    4838:	9f 4f       	sbci	r25, 0xFF	; 255
    483a:	fc 01       	movw	r30, r24
    483c:	80 81       	ld	r24, Z
    483e:	91 81       	ldd	r25, Z+1	; 0x01
    4840:	01 97       	sbiw	r24, 0x01	; 1
    4842:	f1 f7       	brne	.-4      	; 0x4840 <rotateStepper_3+0x1704>
    4844:	9e 01       	movw	r18, r28
    4846:	2f 54       	subi	r18, 0x4F	; 79
    4848:	3f 4f       	sbci	r19, 0xFF	; 255
    484a:	f9 01       	movw	r30, r18
    484c:	91 83       	std	Z+1, r25	; 0x01
    484e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4850:	ce 01       	movw	r24, r28
    4852:	81 55       	subi	r24, 0x51	; 81
    4854:	9f 4f       	sbci	r25, 0xFF	; 255
    4856:	9e 01       	movw	r18, r28
    4858:	21 55       	subi	r18, 0x51	; 81
    485a:	3f 4f       	sbci	r19, 0xFF	; 255
    485c:	f9 01       	movw	r30, r18
    485e:	20 81       	ld	r18, Z
    4860:	31 81       	ldd	r19, Z+1	; 0x01
    4862:	21 50       	subi	r18, 0x01	; 1
    4864:	31 09       	sbc	r19, r1
    4866:	fc 01       	movw	r30, r24
    4868:	31 83       	std	Z+1, r19	; 0x01
    486a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    486c:	ce 01       	movw	r24, r28
    486e:	81 55       	subi	r24, 0x51	; 81
    4870:	9f 4f       	sbci	r25, 0xFF	; 255
    4872:	fc 01       	movw	r30, r24
    4874:	80 81       	ld	r24, Z
    4876:	91 81       	ldd	r25, Z+1	; 0x01
    4878:	89 2b       	or	r24, r25
    487a:	a1 f6       	brne	.-88     	; 0x4824 <rotateStepper_3+0x16e8>
    487c:	2c c0       	rjmp	.+88     	; 0x48d6 <rotateStepper_3+0x179a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    487e:	8e 01       	movw	r16, r28
    4880:	01 55       	subi	r16, 0x51	; 81
    4882:	1f 4f       	sbci	r17, 0xFF	; 255
    4884:	ce 01       	movw	r24, r28
    4886:	85 55       	subi	r24, 0x55	; 85
    4888:	9f 4f       	sbci	r25, 0xFF	; 255
    488a:	fc 01       	movw	r30, r24
    488c:	60 81       	ld	r22, Z
    488e:	71 81       	ldd	r23, Z+1	; 0x01
    4890:	82 81       	ldd	r24, Z+2	; 0x02
    4892:	93 81       	ldd	r25, Z+3	; 0x03
    4894:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    4898:	dc 01       	movw	r26, r24
    489a:	cb 01       	movw	r24, r22
    489c:	f8 01       	movw	r30, r16
    489e:	91 83       	std	Z+1, r25	; 0x01
    48a0:	80 83       	st	Z, r24
    48a2:	ce 01       	movw	r24, r28
    48a4:	8d 54       	subi	r24, 0x4D	; 77
    48a6:	9f 4f       	sbci	r25, 0xFF	; 255
    48a8:	9e 01       	movw	r18, r28
    48aa:	21 55       	subi	r18, 0x51	; 81
    48ac:	3f 4f       	sbci	r19, 0xFF	; 255
    48ae:	f9 01       	movw	r30, r18
    48b0:	20 81       	ld	r18, Z
    48b2:	31 81       	ldd	r19, Z+1	; 0x01
    48b4:	fc 01       	movw	r30, r24
    48b6:	31 83       	std	Z+1, r19	; 0x01
    48b8:	20 83       	st	Z, r18
    48ba:	ce 01       	movw	r24, r28
    48bc:	8d 54       	subi	r24, 0x4D	; 77
    48be:	9f 4f       	sbci	r25, 0xFF	; 255
    48c0:	fc 01       	movw	r30, r24
    48c2:	80 81       	ld	r24, Z
    48c4:	91 81       	ldd	r25, Z+1	; 0x01
    48c6:	01 97       	sbiw	r24, 0x01	; 1
    48c8:	f1 f7       	brne	.-4      	; 0x48c6 <rotateStepper_3+0x178a>
    48ca:	9e 01       	movw	r18, r28
    48cc:	2d 54       	subi	r18, 0x4D	; 77
    48ce:	3f 4f       	sbci	r19, 0xFF	; 255
    48d0:	f9 01       	movw	r30, r18
    48d2:	91 83       	std	Z+1, r25	; 0x01
    48d4:	80 83       	st	Z, r24
		_delay_ms(10);
	}
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < 50; i++)
    48d6:	8b 81       	ldd	r24, Y+3	; 0x03
    48d8:	9c 81       	ldd	r25, Y+4	; 0x04
    48da:	01 96       	adiw	r24, 0x01	; 1
    48dc:	9c 83       	std	Y+4, r25	; 0x04
    48de:	8b 83       	std	Y+3, r24	; 0x03
    48e0:	8b 81       	ldd	r24, Y+3	; 0x03
    48e2:	9c 81       	ldd	r25, Y+4	; 0x04
    48e4:	c2 97       	sbiw	r24, 0x32	; 50
    48e6:	0c f4       	brge	.+2      	; 0x48ea <rotateStepper_3+0x17ae>
    48e8:	13 cc       	rjmp	.-2010   	; 0x4110 <rotateStepper_3+0xfd4>
    48ea:	80 e0       	ldi	r24, 0x00	; 0
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	a0 e2       	ldi	r26, 0x20	; 32
    48f0:	b1 e4       	ldi	r27, 0x41	; 65
    48f2:	8f a7       	std	Y+47, r24	; 0x2f
    48f4:	98 ab       	std	Y+48, r25	; 0x30
    48f6:	a9 ab       	std	Y+49, r26	; 0x31
    48f8:	ba ab       	std	Y+50, r27	; 0x32

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    48fa:	8e 01       	movw	r16, r28
    48fc:	03 52       	subi	r16, 0x23	; 35
    48fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4900:	20 e0       	ldi	r18, 0x00	; 0
    4902:	30 e0       	ldi	r19, 0x00	; 0
    4904:	4a e7       	ldi	r20, 0x7A	; 122
    4906:	55 e4       	ldi	r21, 0x45	; 69
    4908:	6f a5       	ldd	r22, Y+47	; 0x2f
    490a:	78 a9       	ldd	r23, Y+48	; 0x30
    490c:	89 a9       	ldd	r24, Y+49	; 0x31
    490e:	9a a9       	ldd	r25, Y+50	; 0x32
    4910:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4914:	dc 01       	movw	r26, r24
    4916:	cb 01       	movw	r24, r22
    4918:	f8 01       	movw	r30, r16
    491a:	80 83       	st	Z, r24
    491c:	91 83       	std	Z+1, r25	; 0x01
    491e:	a2 83       	std	Z+2, r26	; 0x02
    4920:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4922:	ce 01       	movw	r24, r28
    4924:	83 52       	subi	r24, 0x23	; 35
    4926:	9f 4f       	sbci	r25, 0xFF	; 255
    4928:	20 e0       	ldi	r18, 0x00	; 0
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	40 e8       	ldi	r20, 0x80	; 128
    492e:	5f e3       	ldi	r21, 0x3F	; 63
    4930:	fc 01       	movw	r30, r24
    4932:	60 81       	ld	r22, Z
    4934:	71 81       	ldd	r23, Z+1	; 0x01
    4936:	82 81       	ldd	r24, Z+2	; 0x02
    4938:	93 81       	ldd	r25, Z+3	; 0x03
    493a:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    493e:	88 23       	and	r24, r24
    4940:	4c f4       	brge	.+18     	; 0x4954 <rotateStepper_3+0x1818>
		__ticks = 1;
    4942:	ce 01       	movw	r24, r28
    4944:	8f 51       	subi	r24, 0x1F	; 31
    4946:	9f 4f       	sbci	r25, 0xFF	; 255
    4948:	21 e0       	ldi	r18, 0x01	; 1
    494a:	30 e0       	ldi	r19, 0x00	; 0
    494c:	fc 01       	movw	r30, r24
    494e:	31 83       	std	Z+1, r19	; 0x01
    4950:	20 83       	st	Z, r18
    4952:	69 c0       	rjmp	.+210    	; 0x4a26 <rotateStepper_3+0x18ea>
	else if (__tmp > 65535)
    4954:	ce 01       	movw	r24, r28
    4956:	83 52       	subi	r24, 0x23	; 35
    4958:	9f 4f       	sbci	r25, 0xFF	; 255
    495a:	20 e0       	ldi	r18, 0x00	; 0
    495c:	3f ef       	ldi	r19, 0xFF	; 255
    495e:	4f e7       	ldi	r20, 0x7F	; 127
    4960:	57 e4       	ldi	r21, 0x47	; 71
    4962:	fc 01       	movw	r30, r24
    4964:	60 81       	ld	r22, Z
    4966:	71 81       	ldd	r23, Z+1	; 0x01
    4968:	82 81       	ldd	r24, Z+2	; 0x02
    496a:	93 81       	ldd	r25, Z+3	; 0x03
    496c:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    4970:	18 16       	cp	r1, r24
    4972:	0c f0       	brlt	.+2      	; 0x4976 <rotateStepper_3+0x183a>
    4974:	46 c0       	rjmp	.+140    	; 0x4a02 <rotateStepper_3+0x18c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4976:	20 e0       	ldi	r18, 0x00	; 0
    4978:	30 e0       	ldi	r19, 0x00	; 0
    497a:	40 e2       	ldi	r20, 0x20	; 32
    497c:	51 e4       	ldi	r21, 0x41	; 65
    497e:	6f a5       	ldd	r22, Y+47	; 0x2f
    4980:	78 a9       	ldd	r23, Y+48	; 0x30
    4982:	89 a9       	ldd	r24, Y+49	; 0x31
    4984:	9a a9       	ldd	r25, Y+50	; 0x32
    4986:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    498a:	dc 01       	movw	r26, r24
    498c:	cb 01       	movw	r24, r22
    498e:	8e 01       	movw	r16, r28
    4990:	0f 51       	subi	r16, 0x1F	; 31
    4992:	1f 4f       	sbci	r17, 0xFF	; 255
    4994:	bc 01       	movw	r22, r24
    4996:	cd 01       	movw	r24, r26
    4998:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    499c:	dc 01       	movw	r26, r24
    499e:	cb 01       	movw	r24, r22
    49a0:	f8 01       	movw	r30, r16
    49a2:	91 83       	std	Z+1, r25	; 0x01
    49a4:	80 83       	st	Z, r24
    49a6:	24 c0       	rjmp	.+72     	; 0x49f0 <rotateStepper_3+0x18b4>
    49a8:	ce 01       	movw	r24, r28
    49aa:	8d 51       	subi	r24, 0x1D	; 29
    49ac:	9f 4f       	sbci	r25, 0xFF	; 255
    49ae:	20 e9       	ldi	r18, 0x90	; 144
    49b0:	31 e0       	ldi	r19, 0x01	; 1
    49b2:	fc 01       	movw	r30, r24
    49b4:	31 83       	std	Z+1, r19	; 0x01
    49b6:	20 83       	st	Z, r18
    49b8:	ce 01       	movw	r24, r28
    49ba:	8d 51       	subi	r24, 0x1D	; 29
    49bc:	9f 4f       	sbci	r25, 0xFF	; 255
    49be:	fc 01       	movw	r30, r24
    49c0:	80 81       	ld	r24, Z
    49c2:	91 81       	ldd	r25, Z+1	; 0x01
    49c4:	01 97       	sbiw	r24, 0x01	; 1
    49c6:	f1 f7       	brne	.-4      	; 0x49c4 <rotateStepper_3+0x1888>
    49c8:	9e 01       	movw	r18, r28
    49ca:	2d 51       	subi	r18, 0x1D	; 29
    49cc:	3f 4f       	sbci	r19, 0xFF	; 255
    49ce:	f9 01       	movw	r30, r18
    49d0:	91 83       	std	Z+1, r25	; 0x01
    49d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49d4:	ce 01       	movw	r24, r28
    49d6:	8f 51       	subi	r24, 0x1F	; 31
    49d8:	9f 4f       	sbci	r25, 0xFF	; 255
    49da:	9e 01       	movw	r18, r28
    49dc:	2f 51       	subi	r18, 0x1F	; 31
    49de:	3f 4f       	sbci	r19, 0xFF	; 255
    49e0:	f9 01       	movw	r30, r18
    49e2:	20 81       	ld	r18, Z
    49e4:	31 81       	ldd	r19, Z+1	; 0x01
    49e6:	21 50       	subi	r18, 0x01	; 1
    49e8:	31 09       	sbc	r19, r1
    49ea:	fc 01       	movw	r30, r24
    49ec:	31 83       	std	Z+1, r19	; 0x01
    49ee:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49f0:	ce 01       	movw	r24, r28
    49f2:	8f 51       	subi	r24, 0x1F	; 31
    49f4:	9f 4f       	sbci	r25, 0xFF	; 255
    49f6:	fc 01       	movw	r30, r24
    49f8:	80 81       	ld	r24, Z
    49fa:	91 81       	ldd	r25, Z+1	; 0x01
    49fc:	89 2b       	or	r24, r25
    49fe:	a1 f6       	brne	.-88     	; 0x49a8 <rotateStepper_3+0x186c>
			_delay_ms(period);
		}

		_delay_ms(10);
	}
}
    4a00:	2c c0       	rjmp	.+88     	; 0x4a5a <rotateStepper_3+0x191e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a02:	8e 01       	movw	r16, r28
    4a04:	0f 51       	subi	r16, 0x1F	; 31
    4a06:	1f 4f       	sbci	r17, 0xFF	; 255
    4a08:	ce 01       	movw	r24, r28
    4a0a:	83 52       	subi	r24, 0x23	; 35
    4a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a0e:	fc 01       	movw	r30, r24
    4a10:	60 81       	ld	r22, Z
    4a12:	71 81       	ldd	r23, Z+1	; 0x01
    4a14:	82 81       	ldd	r24, Z+2	; 0x02
    4a16:	93 81       	ldd	r25, Z+3	; 0x03
    4a18:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    4a1c:	dc 01       	movw	r26, r24
    4a1e:	cb 01       	movw	r24, r22
    4a20:	f8 01       	movw	r30, r16
    4a22:	91 83       	std	Z+1, r25	; 0x01
    4a24:	80 83       	st	Z, r24
    4a26:	ce 01       	movw	r24, r28
    4a28:	8b 51       	subi	r24, 0x1B	; 27
    4a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a2c:	9e 01       	movw	r18, r28
    4a2e:	2f 51       	subi	r18, 0x1F	; 31
    4a30:	3f 4f       	sbci	r19, 0xFF	; 255
    4a32:	f9 01       	movw	r30, r18
    4a34:	20 81       	ld	r18, Z
    4a36:	31 81       	ldd	r19, Z+1	; 0x01
    4a38:	fc 01       	movw	r30, r24
    4a3a:	31 83       	std	Z+1, r19	; 0x01
    4a3c:	20 83       	st	Z, r18
    4a3e:	ce 01       	movw	r24, r28
    4a40:	8b 51       	subi	r24, 0x1B	; 27
    4a42:	9f 4f       	sbci	r25, 0xFF	; 255
    4a44:	fc 01       	movw	r30, r24
    4a46:	80 81       	ld	r24, Z
    4a48:	91 81       	ldd	r25, Z+1	; 0x01
    4a4a:	01 97       	sbiw	r24, 0x01	; 1
    4a4c:	f1 f7       	brne	.-4      	; 0x4a4a <rotateStepper_3+0x190e>
    4a4e:	9e 01       	movw	r18, r28
    4a50:	2b 51       	subi	r18, 0x1B	; 27
    4a52:	3f 4f       	sbci	r19, 0xFF	; 255
    4a54:	f9 01       	movw	r30, r18
    4a56:	91 83       	std	Z+1, r25	; 0x01
    4a58:	80 83       	st	Z, r24
    4a5a:	00 00       	nop
    4a5c:	c4 51       	subi	r28, 0x14	; 20
    4a5e:	df 4f       	sbci	r29, 0xFF	; 255
    4a60:	0f b6       	in	r0, 0x3f	; 63
    4a62:	f8 94       	cli
    4a64:	de bf       	out	0x3e, r29	; 62
    4a66:	0f be       	out	0x3f, r0	; 63
    4a68:	cd bf       	out	0x3d, r28	; 61
    4a6a:	df 91       	pop	r29
    4a6c:	cf 91       	pop	r28
    4a6e:	1f 91       	pop	r17
    4a70:	0f 91       	pop	r16
    4a72:	08 95       	ret

00004a74 <rotateStepper_4>:

void rotateStepper_4(int direction){
    4a74:	0f 93       	push	r16
    4a76:	1f 93       	push	r17
    4a78:	cf 93       	push	r28
    4a7a:	df 93       	push	r29
    4a7c:	cd b7       	in	r28, 0x3d	; 61
    4a7e:	de b7       	in	r29, 0x3e	; 62
    4a80:	c8 5e       	subi	r28, 0xE8	; 232
    4a82:	d1 09       	sbc	r29, r1
    4a84:	0f b6       	in	r0, 0x3f	; 63
    4a86:	f8 94       	cli
    4a88:	de bf       	out	0x3e, r29	; 62
    4a8a:	0f be       	out	0x3f, r0	; 63
    4a8c:	cd bf       	out	0x3d, r28	; 61
    4a8e:	9e 01       	movw	r18, r28
    4a90:	29 51       	subi	r18, 0x19	; 25
    4a92:	3f 4f       	sbci	r19, 0xFF	; 255
    4a94:	f9 01       	movw	r30, r18
    4a96:	91 83       	std	Z+1, r25	; 0x01
    4a98:	80 83       	st	Z, r24
	// clockwise-1
	// Counterclockwise-0
	// 1 distance unit = 1 rotating

	int period;
	period = 10;
    4a9a:	8a e0       	ldi	r24, 0x0A	; 10
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	9e 83       	std	Y+6, r25	; 0x06
    4aa0:	8d 83       	std	Y+5, r24	; 0x05
	if (direction == 1)
    4aa2:	ce 01       	movw	r24, r28
    4aa4:	89 51       	subi	r24, 0x19	; 25
    4aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa8:	fc 01       	movw	r30, r24
    4aaa:	80 81       	ld	r24, Z
    4aac:	91 81       	ldd	r25, Z+1	; 0x01
    4aae:	01 97       	sbiw	r24, 0x01	; 1
    4ab0:	09 f0       	breq	.+2      	; 0x4ab4 <rotateStepper_4+0x40>
    4ab2:	bf c7       	rjmp	.+3966   	; 0x5a32 <rotateStepper_4+0xfbe>
	{
		/* Rotate  clockwise */
		for (int i = 0; i < 15; i++) // 108 degree cutting arm
    4ab4:	1a 82       	std	Y+2, r1	; 0x02
    4ab6:	19 82       	std	Y+1, r1	; 0x01
    4ab8:	fe c6       	rjmp	.+3580   	; 0x58b6 <rotateStepper_4+0xe42>
		{
			PORTC = 0x30;
    4aba:	85 e3       	ldi	r24, 0x35	; 53
    4abc:	90 e0       	ldi	r25, 0x00	; 0
    4abe:	20 e3       	ldi	r18, 0x30	; 48
    4ac0:	fc 01       	movw	r30, r24
    4ac2:	20 83       	st	Z, r18
			_delay_ms(period);
    4ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ac8:	09 2e       	mov	r0, r25
    4aca:	00 0c       	add	r0, r0
    4acc:	aa 0b       	sbc	r26, r26
    4ace:	bb 0b       	sbc	r27, r27
    4ad0:	bc 01       	movw	r22, r24
    4ad2:	cd 01       	movw	r24, r26
    4ad4:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    4ad8:	dc 01       	movw	r26, r24
    4ada:	cb 01       	movw	r24, r22
    4adc:	8b 87       	std	Y+11, r24	; 0x0b
    4ade:	9c 87       	std	Y+12, r25	; 0x0c
    4ae0:	ad 87       	std	Y+13, r26	; 0x0d
    4ae2:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4ae4:	8e 01       	movw	r16, r28
    4ae6:	09 56       	subi	r16, 0x69	; 105
    4ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aea:	20 e0       	ldi	r18, 0x00	; 0
    4aec:	30 e0       	ldi	r19, 0x00	; 0
    4aee:	4a e7       	ldi	r20, 0x7A	; 122
    4af0:	55 e4       	ldi	r21, 0x45	; 69
    4af2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4af4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4afa:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4afe:	dc 01       	movw	r26, r24
    4b00:	cb 01       	movw	r24, r22
    4b02:	f8 01       	movw	r30, r16
    4b04:	80 83       	st	Z, r24
    4b06:	91 83       	std	Z+1, r25	; 0x01
    4b08:	a2 83       	std	Z+2, r26	; 0x02
    4b0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b0c:	ce 01       	movw	r24, r28
    4b0e:	89 56       	subi	r24, 0x69	; 105
    4b10:	9f 4f       	sbci	r25, 0xFF	; 255
    4b12:	20 e0       	ldi	r18, 0x00	; 0
    4b14:	30 e0       	ldi	r19, 0x00	; 0
    4b16:	40 e8       	ldi	r20, 0x80	; 128
    4b18:	5f e3       	ldi	r21, 0x3F	; 63
    4b1a:	fc 01       	movw	r30, r24
    4b1c:	60 81       	ld	r22, Z
    4b1e:	71 81       	ldd	r23, Z+1	; 0x01
    4b20:	82 81       	ldd	r24, Z+2	; 0x02
    4b22:	93 81       	ldd	r25, Z+3	; 0x03
    4b24:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    4b28:	88 23       	and	r24, r24
    4b2a:	4c f4       	brge	.+18     	; 0x4b3e <rotateStepper_4+0xca>
		__ticks = 1;
    4b2c:	ce 01       	movw	r24, r28
    4b2e:	85 56       	subi	r24, 0x65	; 101
    4b30:	9f 4f       	sbci	r25, 0xFF	; 255
    4b32:	21 e0       	ldi	r18, 0x01	; 1
    4b34:	30 e0       	ldi	r19, 0x00	; 0
    4b36:	fc 01       	movw	r30, r24
    4b38:	31 83       	std	Z+1, r19	; 0x01
    4b3a:	20 83       	st	Z, r18
    4b3c:	69 c0       	rjmp	.+210    	; 0x4c10 <rotateStepper_4+0x19c>
	else if (__tmp > 65535)
    4b3e:	ce 01       	movw	r24, r28
    4b40:	89 56       	subi	r24, 0x69	; 105
    4b42:	9f 4f       	sbci	r25, 0xFF	; 255
    4b44:	20 e0       	ldi	r18, 0x00	; 0
    4b46:	3f ef       	ldi	r19, 0xFF	; 255
    4b48:	4f e7       	ldi	r20, 0x7F	; 127
    4b4a:	57 e4       	ldi	r21, 0x47	; 71
    4b4c:	fc 01       	movw	r30, r24
    4b4e:	60 81       	ld	r22, Z
    4b50:	71 81       	ldd	r23, Z+1	; 0x01
    4b52:	82 81       	ldd	r24, Z+2	; 0x02
    4b54:	93 81       	ldd	r25, Z+3	; 0x03
    4b56:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    4b5a:	18 16       	cp	r1, r24
    4b5c:	0c f0       	brlt	.+2      	; 0x4b60 <rotateStepper_4+0xec>
    4b5e:	46 c0       	rjmp	.+140    	; 0x4bec <rotateStepper_4+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b60:	20 e0       	ldi	r18, 0x00	; 0
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	40 e2       	ldi	r20, 0x20	; 32
    4b66:	51 e4       	ldi	r21, 0x41	; 65
    4b68:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b70:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4b74:	dc 01       	movw	r26, r24
    4b76:	cb 01       	movw	r24, r22
    4b78:	8e 01       	movw	r16, r28
    4b7a:	05 56       	subi	r16, 0x65	; 101
    4b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    4b7e:	bc 01       	movw	r22, r24
    4b80:	cd 01       	movw	r24, r26
    4b82:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    4b86:	dc 01       	movw	r26, r24
    4b88:	cb 01       	movw	r24, r22
    4b8a:	f8 01       	movw	r30, r16
    4b8c:	91 83       	std	Z+1, r25	; 0x01
    4b8e:	80 83       	st	Z, r24
    4b90:	24 c0       	rjmp	.+72     	; 0x4bda <rotateStepper_4+0x166>
    4b92:	ce 01       	movw	r24, r28
    4b94:	83 56       	subi	r24, 0x63	; 99
    4b96:	9f 4f       	sbci	r25, 0xFF	; 255
    4b98:	20 e9       	ldi	r18, 0x90	; 144
    4b9a:	31 e0       	ldi	r19, 0x01	; 1
    4b9c:	fc 01       	movw	r30, r24
    4b9e:	31 83       	std	Z+1, r19	; 0x01
    4ba0:	20 83       	st	Z, r18
    4ba2:	ce 01       	movw	r24, r28
    4ba4:	83 56       	subi	r24, 0x63	; 99
    4ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ba8:	fc 01       	movw	r30, r24
    4baa:	80 81       	ld	r24, Z
    4bac:	91 81       	ldd	r25, Z+1	; 0x01
    4bae:	01 97       	sbiw	r24, 0x01	; 1
    4bb0:	f1 f7       	brne	.-4      	; 0x4bae <rotateStepper_4+0x13a>
    4bb2:	9e 01       	movw	r18, r28
    4bb4:	23 56       	subi	r18, 0x63	; 99
    4bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    4bb8:	f9 01       	movw	r30, r18
    4bba:	91 83       	std	Z+1, r25	; 0x01
    4bbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bbe:	ce 01       	movw	r24, r28
    4bc0:	85 56       	subi	r24, 0x65	; 101
    4bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4bc4:	9e 01       	movw	r18, r28
    4bc6:	25 56       	subi	r18, 0x65	; 101
    4bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bca:	f9 01       	movw	r30, r18
    4bcc:	20 81       	ld	r18, Z
    4bce:	31 81       	ldd	r19, Z+1	; 0x01
    4bd0:	21 50       	subi	r18, 0x01	; 1
    4bd2:	31 09       	sbc	r19, r1
    4bd4:	fc 01       	movw	r30, r24
    4bd6:	31 83       	std	Z+1, r19	; 0x01
    4bd8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bda:	ce 01       	movw	r24, r28
    4bdc:	85 56       	subi	r24, 0x65	; 101
    4bde:	9f 4f       	sbci	r25, 0xFF	; 255
    4be0:	fc 01       	movw	r30, r24
    4be2:	80 81       	ld	r24, Z
    4be4:	91 81       	ldd	r25, Z+1	; 0x01
    4be6:	89 2b       	or	r24, r25
    4be8:	a1 f6       	brne	.-88     	; 0x4b92 <rotateStepper_4+0x11e>
    4bea:	2c c0       	rjmp	.+88     	; 0x4c44 <rotateStepper_4+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bec:	8e 01       	movw	r16, r28
    4bee:	05 56       	subi	r16, 0x65	; 101
    4bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf2:	ce 01       	movw	r24, r28
    4bf4:	89 56       	subi	r24, 0x69	; 105
    4bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    4bf8:	fc 01       	movw	r30, r24
    4bfa:	60 81       	ld	r22, Z
    4bfc:	71 81       	ldd	r23, Z+1	; 0x01
    4bfe:	82 81       	ldd	r24, Z+2	; 0x02
    4c00:	93 81       	ldd	r25, Z+3	; 0x03
    4c02:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    4c06:	dc 01       	movw	r26, r24
    4c08:	cb 01       	movw	r24, r22
    4c0a:	f8 01       	movw	r30, r16
    4c0c:	91 83       	std	Z+1, r25	; 0x01
    4c0e:	80 83       	st	Z, r24
    4c10:	ce 01       	movw	r24, r28
    4c12:	81 56       	subi	r24, 0x61	; 97
    4c14:	9f 4f       	sbci	r25, 0xFF	; 255
    4c16:	9e 01       	movw	r18, r28
    4c18:	25 56       	subi	r18, 0x65	; 101
    4c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c1c:	f9 01       	movw	r30, r18
    4c1e:	20 81       	ld	r18, Z
    4c20:	31 81       	ldd	r19, Z+1	; 0x01
    4c22:	fc 01       	movw	r30, r24
    4c24:	31 83       	std	Z+1, r19	; 0x01
    4c26:	20 83       	st	Z, r18
    4c28:	ce 01       	movw	r24, r28
    4c2a:	81 56       	subi	r24, 0x61	; 97
    4c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    4c2e:	fc 01       	movw	r30, r24
    4c30:	80 81       	ld	r24, Z
    4c32:	91 81       	ldd	r25, Z+1	; 0x01
    4c34:	01 97       	sbiw	r24, 0x01	; 1
    4c36:	f1 f7       	brne	.-4      	; 0x4c34 <rotateStepper_4+0x1c0>
    4c38:	9e 01       	movw	r18, r28
    4c3a:	21 56       	subi	r18, 0x61	; 97
    4c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c3e:	f9 01       	movw	r30, r18
    4c40:	91 83       	std	Z+1, r25	; 0x01
    4c42:	80 83       	st	Z, r24
			PORTC = 0x20;
    4c44:	85 e3       	ldi	r24, 0x35	; 53
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	20 e2       	ldi	r18, 0x20	; 32
    4c4a:	fc 01       	movw	r30, r24
    4c4c:	20 83       	st	Z, r18
			_delay_ms(period);
    4c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c50:	9e 81       	ldd	r25, Y+6	; 0x06
    4c52:	09 2e       	mov	r0, r25
    4c54:	00 0c       	add	r0, r0
    4c56:	aa 0b       	sbc	r26, r26
    4c58:	bb 0b       	sbc	r27, r27
    4c5a:	bc 01       	movw	r22, r24
    4c5c:	cd 01       	movw	r24, r26
    4c5e:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    4c62:	dc 01       	movw	r26, r24
    4c64:	cb 01       	movw	r24, r22
    4c66:	8f 87       	std	Y+15, r24	; 0x0f
    4c68:	98 8b       	std	Y+16, r25	; 0x10
    4c6a:	a9 8b       	std	Y+17, r26	; 0x11
    4c6c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4c6e:	8e 01       	movw	r16, r28
    4c70:	03 57       	subi	r16, 0x73	; 115
    4c72:	1f 4f       	sbci	r17, 0xFF	; 255
    4c74:	20 e0       	ldi	r18, 0x00	; 0
    4c76:	30 e0       	ldi	r19, 0x00	; 0
    4c78:	4a e7       	ldi	r20, 0x7A	; 122
    4c7a:	55 e4       	ldi	r21, 0x45	; 69
    4c7c:	6f 85       	ldd	r22, Y+15	; 0x0f
    4c7e:	78 89       	ldd	r23, Y+16	; 0x10
    4c80:	89 89       	ldd	r24, Y+17	; 0x11
    4c82:	9a 89       	ldd	r25, Y+18	; 0x12
    4c84:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4c88:	dc 01       	movw	r26, r24
    4c8a:	cb 01       	movw	r24, r22
    4c8c:	f8 01       	movw	r30, r16
    4c8e:	80 83       	st	Z, r24
    4c90:	91 83       	std	Z+1, r25	; 0x01
    4c92:	a2 83       	std	Z+2, r26	; 0x02
    4c94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c96:	ce 01       	movw	r24, r28
    4c98:	83 57       	subi	r24, 0x73	; 115
    4c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c9c:	20 e0       	ldi	r18, 0x00	; 0
    4c9e:	30 e0       	ldi	r19, 0x00	; 0
    4ca0:	40 e8       	ldi	r20, 0x80	; 128
    4ca2:	5f e3       	ldi	r21, 0x3F	; 63
    4ca4:	fc 01       	movw	r30, r24
    4ca6:	60 81       	ld	r22, Z
    4ca8:	71 81       	ldd	r23, Z+1	; 0x01
    4caa:	82 81       	ldd	r24, Z+2	; 0x02
    4cac:	93 81       	ldd	r25, Z+3	; 0x03
    4cae:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    4cb2:	88 23       	and	r24, r24
    4cb4:	4c f4       	brge	.+18     	; 0x4cc8 <rotateStepper_4+0x254>
		__ticks = 1;
    4cb6:	ce 01       	movw	r24, r28
    4cb8:	8f 56       	subi	r24, 0x6F	; 111
    4cba:	9f 4f       	sbci	r25, 0xFF	; 255
    4cbc:	21 e0       	ldi	r18, 0x01	; 1
    4cbe:	30 e0       	ldi	r19, 0x00	; 0
    4cc0:	fc 01       	movw	r30, r24
    4cc2:	31 83       	std	Z+1, r19	; 0x01
    4cc4:	20 83       	st	Z, r18
    4cc6:	69 c0       	rjmp	.+210    	; 0x4d9a <rotateStepper_4+0x326>
	else if (__tmp > 65535)
    4cc8:	ce 01       	movw	r24, r28
    4cca:	83 57       	subi	r24, 0x73	; 115
    4ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    4cce:	20 e0       	ldi	r18, 0x00	; 0
    4cd0:	3f ef       	ldi	r19, 0xFF	; 255
    4cd2:	4f e7       	ldi	r20, 0x7F	; 127
    4cd4:	57 e4       	ldi	r21, 0x47	; 71
    4cd6:	fc 01       	movw	r30, r24
    4cd8:	60 81       	ld	r22, Z
    4cda:	71 81       	ldd	r23, Z+1	; 0x01
    4cdc:	82 81       	ldd	r24, Z+2	; 0x02
    4cde:	93 81       	ldd	r25, Z+3	; 0x03
    4ce0:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    4ce4:	18 16       	cp	r1, r24
    4ce6:	0c f0       	brlt	.+2      	; 0x4cea <rotateStepper_4+0x276>
    4ce8:	46 c0       	rjmp	.+140    	; 0x4d76 <rotateStepper_4+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cea:	20 e0       	ldi	r18, 0x00	; 0
    4cec:	30 e0       	ldi	r19, 0x00	; 0
    4cee:	40 e2       	ldi	r20, 0x20	; 32
    4cf0:	51 e4       	ldi	r21, 0x41	; 65
    4cf2:	6f 85       	ldd	r22, Y+15	; 0x0f
    4cf4:	78 89       	ldd	r23, Y+16	; 0x10
    4cf6:	89 89       	ldd	r24, Y+17	; 0x11
    4cf8:	9a 89       	ldd	r25, Y+18	; 0x12
    4cfa:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4cfe:	dc 01       	movw	r26, r24
    4d00:	cb 01       	movw	r24, r22
    4d02:	8e 01       	movw	r16, r28
    4d04:	0f 56       	subi	r16, 0x6F	; 111
    4d06:	1f 4f       	sbci	r17, 0xFF	; 255
    4d08:	bc 01       	movw	r22, r24
    4d0a:	cd 01       	movw	r24, r26
    4d0c:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    4d10:	dc 01       	movw	r26, r24
    4d12:	cb 01       	movw	r24, r22
    4d14:	f8 01       	movw	r30, r16
    4d16:	91 83       	std	Z+1, r25	; 0x01
    4d18:	80 83       	st	Z, r24
    4d1a:	24 c0       	rjmp	.+72     	; 0x4d64 <rotateStepper_4+0x2f0>
    4d1c:	ce 01       	movw	r24, r28
    4d1e:	8d 56       	subi	r24, 0x6D	; 109
    4d20:	9f 4f       	sbci	r25, 0xFF	; 255
    4d22:	20 e9       	ldi	r18, 0x90	; 144
    4d24:	31 e0       	ldi	r19, 0x01	; 1
    4d26:	fc 01       	movw	r30, r24
    4d28:	31 83       	std	Z+1, r19	; 0x01
    4d2a:	20 83       	st	Z, r18
    4d2c:	ce 01       	movw	r24, r28
    4d2e:	8d 56       	subi	r24, 0x6D	; 109
    4d30:	9f 4f       	sbci	r25, 0xFF	; 255
    4d32:	fc 01       	movw	r30, r24
    4d34:	80 81       	ld	r24, Z
    4d36:	91 81       	ldd	r25, Z+1	; 0x01
    4d38:	01 97       	sbiw	r24, 0x01	; 1
    4d3a:	f1 f7       	brne	.-4      	; 0x4d38 <rotateStepper_4+0x2c4>
    4d3c:	9e 01       	movw	r18, r28
    4d3e:	2d 56       	subi	r18, 0x6D	; 109
    4d40:	3f 4f       	sbci	r19, 0xFF	; 255
    4d42:	f9 01       	movw	r30, r18
    4d44:	91 83       	std	Z+1, r25	; 0x01
    4d46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d48:	ce 01       	movw	r24, r28
    4d4a:	8f 56       	subi	r24, 0x6F	; 111
    4d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d4e:	9e 01       	movw	r18, r28
    4d50:	2f 56       	subi	r18, 0x6F	; 111
    4d52:	3f 4f       	sbci	r19, 0xFF	; 255
    4d54:	f9 01       	movw	r30, r18
    4d56:	20 81       	ld	r18, Z
    4d58:	31 81       	ldd	r19, Z+1	; 0x01
    4d5a:	21 50       	subi	r18, 0x01	; 1
    4d5c:	31 09       	sbc	r19, r1
    4d5e:	fc 01       	movw	r30, r24
    4d60:	31 83       	std	Z+1, r19	; 0x01
    4d62:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d64:	ce 01       	movw	r24, r28
    4d66:	8f 56       	subi	r24, 0x6F	; 111
    4d68:	9f 4f       	sbci	r25, 0xFF	; 255
    4d6a:	fc 01       	movw	r30, r24
    4d6c:	80 81       	ld	r24, Z
    4d6e:	91 81       	ldd	r25, Z+1	; 0x01
    4d70:	89 2b       	or	r24, r25
    4d72:	a1 f6       	brne	.-88     	; 0x4d1c <rotateStepper_4+0x2a8>
    4d74:	2c c0       	rjmp	.+88     	; 0x4dce <rotateStepper_4+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d76:	8e 01       	movw	r16, r28
    4d78:	0f 56       	subi	r16, 0x6F	; 111
    4d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d7c:	ce 01       	movw	r24, r28
    4d7e:	83 57       	subi	r24, 0x73	; 115
    4d80:	9f 4f       	sbci	r25, 0xFF	; 255
    4d82:	fc 01       	movw	r30, r24
    4d84:	60 81       	ld	r22, Z
    4d86:	71 81       	ldd	r23, Z+1	; 0x01
    4d88:	82 81       	ldd	r24, Z+2	; 0x02
    4d8a:	93 81       	ldd	r25, Z+3	; 0x03
    4d8c:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    4d90:	dc 01       	movw	r26, r24
    4d92:	cb 01       	movw	r24, r22
    4d94:	f8 01       	movw	r30, r16
    4d96:	91 83       	std	Z+1, r25	; 0x01
    4d98:	80 83       	st	Z, r24
    4d9a:	ce 01       	movw	r24, r28
    4d9c:	8b 56       	subi	r24, 0x6B	; 107
    4d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    4da0:	9e 01       	movw	r18, r28
    4da2:	2f 56       	subi	r18, 0x6F	; 111
    4da4:	3f 4f       	sbci	r19, 0xFF	; 255
    4da6:	f9 01       	movw	r30, r18
    4da8:	20 81       	ld	r18, Z
    4daa:	31 81       	ldd	r19, Z+1	; 0x01
    4dac:	fc 01       	movw	r30, r24
    4dae:	31 83       	std	Z+1, r19	; 0x01
    4db0:	20 83       	st	Z, r18
    4db2:	ce 01       	movw	r24, r28
    4db4:	8b 56       	subi	r24, 0x6B	; 107
    4db6:	9f 4f       	sbci	r25, 0xFF	; 255
    4db8:	fc 01       	movw	r30, r24
    4dba:	80 81       	ld	r24, Z
    4dbc:	91 81       	ldd	r25, Z+1	; 0x01
    4dbe:	01 97       	sbiw	r24, 0x01	; 1
    4dc0:	f1 f7       	brne	.-4      	; 0x4dbe <rotateStepper_4+0x34a>
    4dc2:	9e 01       	movw	r18, r28
    4dc4:	2b 56       	subi	r18, 0x6B	; 107
    4dc6:	3f 4f       	sbci	r19, 0xFF	; 255
    4dc8:	f9 01       	movw	r30, r18
    4dca:	91 83       	std	Z+1, r25	; 0x01
    4dcc:	80 83       	st	Z, r24
			PORTC = 0x60;
    4dce:	85 e3       	ldi	r24, 0x35	; 53
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	20 e6       	ldi	r18, 0x60	; 96
    4dd4:	fc 01       	movw	r30, r24
    4dd6:	20 83       	st	Z, r18
			_delay_ms(period);
    4dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    4dda:	9e 81       	ldd	r25, Y+6	; 0x06
    4ddc:	09 2e       	mov	r0, r25
    4dde:	00 0c       	add	r0, r0
    4de0:	aa 0b       	sbc	r26, r26
    4de2:	bb 0b       	sbc	r27, r27
    4de4:	bc 01       	movw	r22, r24
    4de6:	cd 01       	movw	r24, r26
    4de8:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    4dec:	dc 01       	movw	r26, r24
    4dee:	cb 01       	movw	r24, r22
    4df0:	8b 8b       	std	Y+19, r24	; 0x13
    4df2:	9c 8b       	std	Y+20, r25	; 0x14
    4df4:	ad 8b       	std	Y+21, r26	; 0x15
    4df6:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4df8:	8e 01       	movw	r16, r28
    4dfa:	0d 57       	subi	r16, 0x7D	; 125
    4dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    4dfe:	20 e0       	ldi	r18, 0x00	; 0
    4e00:	30 e0       	ldi	r19, 0x00	; 0
    4e02:	4a e7       	ldi	r20, 0x7A	; 122
    4e04:	55 e4       	ldi	r21, 0x45	; 69
    4e06:	6b 89       	ldd	r22, Y+19	; 0x13
    4e08:	7c 89       	ldd	r23, Y+20	; 0x14
    4e0a:	8d 89       	ldd	r24, Y+21	; 0x15
    4e0c:	9e 89       	ldd	r25, Y+22	; 0x16
    4e0e:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4e12:	dc 01       	movw	r26, r24
    4e14:	cb 01       	movw	r24, r22
    4e16:	f8 01       	movw	r30, r16
    4e18:	80 83       	st	Z, r24
    4e1a:	91 83       	std	Z+1, r25	; 0x01
    4e1c:	a2 83       	std	Z+2, r26	; 0x02
    4e1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e20:	ce 01       	movw	r24, r28
    4e22:	8d 57       	subi	r24, 0x7D	; 125
    4e24:	9f 4f       	sbci	r25, 0xFF	; 255
    4e26:	20 e0       	ldi	r18, 0x00	; 0
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	40 e8       	ldi	r20, 0x80	; 128
    4e2c:	5f e3       	ldi	r21, 0x3F	; 63
    4e2e:	fc 01       	movw	r30, r24
    4e30:	60 81       	ld	r22, Z
    4e32:	71 81       	ldd	r23, Z+1	; 0x01
    4e34:	82 81       	ldd	r24, Z+2	; 0x02
    4e36:	93 81       	ldd	r25, Z+3	; 0x03
    4e38:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    4e3c:	88 23       	and	r24, r24
    4e3e:	4c f4       	brge	.+18     	; 0x4e52 <rotateStepper_4+0x3de>
		__ticks = 1;
    4e40:	ce 01       	movw	r24, r28
    4e42:	89 57       	subi	r24, 0x79	; 121
    4e44:	9f 4f       	sbci	r25, 0xFF	; 255
    4e46:	21 e0       	ldi	r18, 0x01	; 1
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	fc 01       	movw	r30, r24
    4e4c:	31 83       	std	Z+1, r19	; 0x01
    4e4e:	20 83       	st	Z, r18
    4e50:	69 c0       	rjmp	.+210    	; 0x4f24 <rotateStepper_4+0x4b0>
	else if (__tmp > 65535)
    4e52:	ce 01       	movw	r24, r28
    4e54:	8d 57       	subi	r24, 0x7D	; 125
    4e56:	9f 4f       	sbci	r25, 0xFF	; 255
    4e58:	20 e0       	ldi	r18, 0x00	; 0
    4e5a:	3f ef       	ldi	r19, 0xFF	; 255
    4e5c:	4f e7       	ldi	r20, 0x7F	; 127
    4e5e:	57 e4       	ldi	r21, 0x47	; 71
    4e60:	fc 01       	movw	r30, r24
    4e62:	60 81       	ld	r22, Z
    4e64:	71 81       	ldd	r23, Z+1	; 0x01
    4e66:	82 81       	ldd	r24, Z+2	; 0x02
    4e68:	93 81       	ldd	r25, Z+3	; 0x03
    4e6a:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    4e6e:	18 16       	cp	r1, r24
    4e70:	0c f0       	brlt	.+2      	; 0x4e74 <rotateStepper_4+0x400>
    4e72:	46 c0       	rjmp	.+140    	; 0x4f00 <rotateStepper_4+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e74:	20 e0       	ldi	r18, 0x00	; 0
    4e76:	30 e0       	ldi	r19, 0x00	; 0
    4e78:	40 e2       	ldi	r20, 0x20	; 32
    4e7a:	51 e4       	ldi	r21, 0x41	; 65
    4e7c:	6b 89       	ldd	r22, Y+19	; 0x13
    4e7e:	7c 89       	ldd	r23, Y+20	; 0x14
    4e80:	8d 89       	ldd	r24, Y+21	; 0x15
    4e82:	9e 89       	ldd	r25, Y+22	; 0x16
    4e84:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4e88:	dc 01       	movw	r26, r24
    4e8a:	cb 01       	movw	r24, r22
    4e8c:	8e 01       	movw	r16, r28
    4e8e:	09 57       	subi	r16, 0x79	; 121
    4e90:	1f 4f       	sbci	r17, 0xFF	; 255
    4e92:	bc 01       	movw	r22, r24
    4e94:	cd 01       	movw	r24, r26
    4e96:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    4e9a:	dc 01       	movw	r26, r24
    4e9c:	cb 01       	movw	r24, r22
    4e9e:	f8 01       	movw	r30, r16
    4ea0:	91 83       	std	Z+1, r25	; 0x01
    4ea2:	80 83       	st	Z, r24
    4ea4:	24 c0       	rjmp	.+72     	; 0x4eee <rotateStepper_4+0x47a>
    4ea6:	ce 01       	movw	r24, r28
    4ea8:	87 57       	subi	r24, 0x77	; 119
    4eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    4eac:	20 e9       	ldi	r18, 0x90	; 144
    4eae:	31 e0       	ldi	r19, 0x01	; 1
    4eb0:	fc 01       	movw	r30, r24
    4eb2:	31 83       	std	Z+1, r19	; 0x01
    4eb4:	20 83       	st	Z, r18
    4eb6:	ce 01       	movw	r24, r28
    4eb8:	87 57       	subi	r24, 0x77	; 119
    4eba:	9f 4f       	sbci	r25, 0xFF	; 255
    4ebc:	fc 01       	movw	r30, r24
    4ebe:	80 81       	ld	r24, Z
    4ec0:	91 81       	ldd	r25, Z+1	; 0x01
    4ec2:	01 97       	sbiw	r24, 0x01	; 1
    4ec4:	f1 f7       	brne	.-4      	; 0x4ec2 <rotateStepper_4+0x44e>
    4ec6:	9e 01       	movw	r18, r28
    4ec8:	27 57       	subi	r18, 0x77	; 119
    4eca:	3f 4f       	sbci	r19, 0xFF	; 255
    4ecc:	f9 01       	movw	r30, r18
    4ece:	91 83       	std	Z+1, r25	; 0x01
    4ed0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ed2:	ce 01       	movw	r24, r28
    4ed4:	89 57       	subi	r24, 0x79	; 121
    4ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ed8:	9e 01       	movw	r18, r28
    4eda:	29 57       	subi	r18, 0x79	; 121
    4edc:	3f 4f       	sbci	r19, 0xFF	; 255
    4ede:	f9 01       	movw	r30, r18
    4ee0:	20 81       	ld	r18, Z
    4ee2:	31 81       	ldd	r19, Z+1	; 0x01
    4ee4:	21 50       	subi	r18, 0x01	; 1
    4ee6:	31 09       	sbc	r19, r1
    4ee8:	fc 01       	movw	r30, r24
    4eea:	31 83       	std	Z+1, r19	; 0x01
    4eec:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eee:	ce 01       	movw	r24, r28
    4ef0:	89 57       	subi	r24, 0x79	; 121
    4ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ef4:	fc 01       	movw	r30, r24
    4ef6:	80 81       	ld	r24, Z
    4ef8:	91 81       	ldd	r25, Z+1	; 0x01
    4efa:	89 2b       	or	r24, r25
    4efc:	a1 f6       	brne	.-88     	; 0x4ea6 <rotateStepper_4+0x432>
    4efe:	2c c0       	rjmp	.+88     	; 0x4f58 <rotateStepper_4+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f00:	8e 01       	movw	r16, r28
    4f02:	09 57       	subi	r16, 0x79	; 121
    4f04:	1f 4f       	sbci	r17, 0xFF	; 255
    4f06:	ce 01       	movw	r24, r28
    4f08:	8d 57       	subi	r24, 0x7D	; 125
    4f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f0c:	fc 01       	movw	r30, r24
    4f0e:	60 81       	ld	r22, Z
    4f10:	71 81       	ldd	r23, Z+1	; 0x01
    4f12:	82 81       	ldd	r24, Z+2	; 0x02
    4f14:	93 81       	ldd	r25, Z+3	; 0x03
    4f16:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    4f1a:	dc 01       	movw	r26, r24
    4f1c:	cb 01       	movw	r24, r22
    4f1e:	f8 01       	movw	r30, r16
    4f20:	91 83       	std	Z+1, r25	; 0x01
    4f22:	80 83       	st	Z, r24
    4f24:	ce 01       	movw	r24, r28
    4f26:	85 57       	subi	r24, 0x75	; 117
    4f28:	9f 4f       	sbci	r25, 0xFF	; 255
    4f2a:	9e 01       	movw	r18, r28
    4f2c:	29 57       	subi	r18, 0x79	; 121
    4f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f30:	f9 01       	movw	r30, r18
    4f32:	20 81       	ld	r18, Z
    4f34:	31 81       	ldd	r19, Z+1	; 0x01
    4f36:	fc 01       	movw	r30, r24
    4f38:	31 83       	std	Z+1, r19	; 0x01
    4f3a:	20 83       	st	Z, r18
    4f3c:	ce 01       	movw	r24, r28
    4f3e:	85 57       	subi	r24, 0x75	; 117
    4f40:	9f 4f       	sbci	r25, 0xFF	; 255
    4f42:	fc 01       	movw	r30, r24
    4f44:	80 81       	ld	r24, Z
    4f46:	91 81       	ldd	r25, Z+1	; 0x01
    4f48:	01 97       	sbiw	r24, 0x01	; 1
    4f4a:	f1 f7       	brne	.-4      	; 0x4f48 <rotateStepper_4+0x4d4>
    4f4c:	9e 01       	movw	r18, r28
    4f4e:	25 57       	subi	r18, 0x75	; 117
    4f50:	3f 4f       	sbci	r19, 0xFF	; 255
    4f52:	f9 01       	movw	r30, r18
    4f54:	91 83       	std	Z+1, r25	; 0x01
    4f56:	80 83       	st	Z, r24
			PORTC = 0x40;
    4f58:	85 e3       	ldi	r24, 0x35	; 53
    4f5a:	90 e0       	ldi	r25, 0x00	; 0
    4f5c:	20 e4       	ldi	r18, 0x40	; 64
    4f5e:	fc 01       	movw	r30, r24
    4f60:	20 83       	st	Z, r18
			_delay_ms(period);
    4f62:	8d 81       	ldd	r24, Y+5	; 0x05
    4f64:	9e 81       	ldd	r25, Y+6	; 0x06
    4f66:	09 2e       	mov	r0, r25
    4f68:	00 0c       	add	r0, r0
    4f6a:	aa 0b       	sbc	r26, r26
    4f6c:	bb 0b       	sbc	r27, r27
    4f6e:	bc 01       	movw	r22, r24
    4f70:	cd 01       	movw	r24, r26
    4f72:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    4f76:	dc 01       	movw	r26, r24
    4f78:	cb 01       	movw	r24, r22
    4f7a:	8f 8b       	std	Y+23, r24	; 0x17
    4f7c:	98 8f       	std	Y+24, r25	; 0x18
    4f7e:	a9 8f       	std	Y+25, r26	; 0x19
    4f80:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4f82:	8e 01       	movw	r16, r28
    4f84:	07 58       	subi	r16, 0x87	; 135
    4f86:	1f 4f       	sbci	r17, 0xFF	; 255
    4f88:	20 e0       	ldi	r18, 0x00	; 0
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	4a e7       	ldi	r20, 0x7A	; 122
    4f8e:	55 e4       	ldi	r21, 0x45	; 69
    4f90:	6f 89       	ldd	r22, Y+23	; 0x17
    4f92:	78 8d       	ldd	r23, Y+24	; 0x18
    4f94:	89 8d       	ldd	r24, Y+25	; 0x19
    4f96:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4f98:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    4f9c:	dc 01       	movw	r26, r24
    4f9e:	cb 01       	movw	r24, r22
    4fa0:	f8 01       	movw	r30, r16
    4fa2:	80 83       	st	Z, r24
    4fa4:	91 83       	std	Z+1, r25	; 0x01
    4fa6:	a2 83       	std	Z+2, r26	; 0x02
    4fa8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4faa:	ce 01       	movw	r24, r28
    4fac:	87 58       	subi	r24, 0x87	; 135
    4fae:	9f 4f       	sbci	r25, 0xFF	; 255
    4fb0:	20 e0       	ldi	r18, 0x00	; 0
    4fb2:	30 e0       	ldi	r19, 0x00	; 0
    4fb4:	40 e8       	ldi	r20, 0x80	; 128
    4fb6:	5f e3       	ldi	r21, 0x3F	; 63
    4fb8:	fc 01       	movw	r30, r24
    4fba:	60 81       	ld	r22, Z
    4fbc:	71 81       	ldd	r23, Z+1	; 0x01
    4fbe:	82 81       	ldd	r24, Z+2	; 0x02
    4fc0:	93 81       	ldd	r25, Z+3	; 0x03
    4fc2:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    4fc6:	88 23       	and	r24, r24
    4fc8:	4c f4       	brge	.+18     	; 0x4fdc <rotateStepper_4+0x568>
		__ticks = 1;
    4fca:	ce 01       	movw	r24, r28
    4fcc:	83 58       	subi	r24, 0x83	; 131
    4fce:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd0:	21 e0       	ldi	r18, 0x01	; 1
    4fd2:	30 e0       	ldi	r19, 0x00	; 0
    4fd4:	fc 01       	movw	r30, r24
    4fd6:	31 83       	std	Z+1, r19	; 0x01
    4fd8:	20 83       	st	Z, r18
    4fda:	69 c0       	rjmp	.+210    	; 0x50ae <rotateStepper_4+0x63a>
	else if (__tmp > 65535)
    4fdc:	ce 01       	movw	r24, r28
    4fde:	87 58       	subi	r24, 0x87	; 135
    4fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    4fe2:	20 e0       	ldi	r18, 0x00	; 0
    4fe4:	3f ef       	ldi	r19, 0xFF	; 255
    4fe6:	4f e7       	ldi	r20, 0x7F	; 127
    4fe8:	57 e4       	ldi	r21, 0x47	; 71
    4fea:	fc 01       	movw	r30, r24
    4fec:	60 81       	ld	r22, Z
    4fee:	71 81       	ldd	r23, Z+1	; 0x01
    4ff0:	82 81       	ldd	r24, Z+2	; 0x02
    4ff2:	93 81       	ldd	r25, Z+3	; 0x03
    4ff4:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    4ff8:	18 16       	cp	r1, r24
    4ffa:	0c f0       	brlt	.+2      	; 0x4ffe <rotateStepper_4+0x58a>
    4ffc:	46 c0       	rjmp	.+140    	; 0x508a <rotateStepper_4+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ffe:	20 e0       	ldi	r18, 0x00	; 0
    5000:	30 e0       	ldi	r19, 0x00	; 0
    5002:	40 e2       	ldi	r20, 0x20	; 32
    5004:	51 e4       	ldi	r21, 0x41	; 65
    5006:	6f 89       	ldd	r22, Y+23	; 0x17
    5008:	78 8d       	ldd	r23, Y+24	; 0x18
    500a:	89 8d       	ldd	r24, Y+25	; 0x19
    500c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    500e:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    5012:	dc 01       	movw	r26, r24
    5014:	cb 01       	movw	r24, r22
    5016:	8e 01       	movw	r16, r28
    5018:	03 58       	subi	r16, 0x83	; 131
    501a:	1f 4f       	sbci	r17, 0xFF	; 255
    501c:	bc 01       	movw	r22, r24
    501e:	cd 01       	movw	r24, r26
    5020:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    5024:	dc 01       	movw	r26, r24
    5026:	cb 01       	movw	r24, r22
    5028:	f8 01       	movw	r30, r16
    502a:	91 83       	std	Z+1, r25	; 0x01
    502c:	80 83       	st	Z, r24
    502e:	24 c0       	rjmp	.+72     	; 0x5078 <rotateStepper_4+0x604>
    5030:	ce 01       	movw	r24, r28
    5032:	81 58       	subi	r24, 0x81	; 129
    5034:	9f 4f       	sbci	r25, 0xFF	; 255
    5036:	20 e9       	ldi	r18, 0x90	; 144
    5038:	31 e0       	ldi	r19, 0x01	; 1
    503a:	fc 01       	movw	r30, r24
    503c:	31 83       	std	Z+1, r19	; 0x01
    503e:	20 83       	st	Z, r18
    5040:	ce 01       	movw	r24, r28
    5042:	81 58       	subi	r24, 0x81	; 129
    5044:	9f 4f       	sbci	r25, 0xFF	; 255
    5046:	fc 01       	movw	r30, r24
    5048:	80 81       	ld	r24, Z
    504a:	91 81       	ldd	r25, Z+1	; 0x01
    504c:	01 97       	sbiw	r24, 0x01	; 1
    504e:	f1 f7       	brne	.-4      	; 0x504c <rotateStepper_4+0x5d8>
    5050:	9e 01       	movw	r18, r28
    5052:	21 58       	subi	r18, 0x81	; 129
    5054:	3f 4f       	sbci	r19, 0xFF	; 255
    5056:	f9 01       	movw	r30, r18
    5058:	91 83       	std	Z+1, r25	; 0x01
    505a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    505c:	ce 01       	movw	r24, r28
    505e:	83 58       	subi	r24, 0x83	; 131
    5060:	9f 4f       	sbci	r25, 0xFF	; 255
    5062:	9e 01       	movw	r18, r28
    5064:	23 58       	subi	r18, 0x83	; 131
    5066:	3f 4f       	sbci	r19, 0xFF	; 255
    5068:	f9 01       	movw	r30, r18
    506a:	20 81       	ld	r18, Z
    506c:	31 81       	ldd	r19, Z+1	; 0x01
    506e:	21 50       	subi	r18, 0x01	; 1
    5070:	31 09       	sbc	r19, r1
    5072:	fc 01       	movw	r30, r24
    5074:	31 83       	std	Z+1, r19	; 0x01
    5076:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5078:	ce 01       	movw	r24, r28
    507a:	83 58       	subi	r24, 0x83	; 131
    507c:	9f 4f       	sbci	r25, 0xFF	; 255
    507e:	fc 01       	movw	r30, r24
    5080:	80 81       	ld	r24, Z
    5082:	91 81       	ldd	r25, Z+1	; 0x01
    5084:	89 2b       	or	r24, r25
    5086:	a1 f6       	brne	.-88     	; 0x5030 <rotateStepper_4+0x5bc>
    5088:	2c c0       	rjmp	.+88     	; 0x50e2 <rotateStepper_4+0x66e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    508a:	8e 01       	movw	r16, r28
    508c:	03 58       	subi	r16, 0x83	; 131
    508e:	1f 4f       	sbci	r17, 0xFF	; 255
    5090:	ce 01       	movw	r24, r28
    5092:	87 58       	subi	r24, 0x87	; 135
    5094:	9f 4f       	sbci	r25, 0xFF	; 255
    5096:	fc 01       	movw	r30, r24
    5098:	60 81       	ld	r22, Z
    509a:	71 81       	ldd	r23, Z+1	; 0x01
    509c:	82 81       	ldd	r24, Z+2	; 0x02
    509e:	93 81       	ldd	r25, Z+3	; 0x03
    50a0:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    50a4:	dc 01       	movw	r26, r24
    50a6:	cb 01       	movw	r24, r22
    50a8:	f8 01       	movw	r30, r16
    50aa:	91 83       	std	Z+1, r25	; 0x01
    50ac:	80 83       	st	Z, r24
    50ae:	ce 01       	movw	r24, r28
    50b0:	8f 57       	subi	r24, 0x7F	; 127
    50b2:	9f 4f       	sbci	r25, 0xFF	; 255
    50b4:	9e 01       	movw	r18, r28
    50b6:	23 58       	subi	r18, 0x83	; 131
    50b8:	3f 4f       	sbci	r19, 0xFF	; 255
    50ba:	f9 01       	movw	r30, r18
    50bc:	20 81       	ld	r18, Z
    50be:	31 81       	ldd	r19, Z+1	; 0x01
    50c0:	fc 01       	movw	r30, r24
    50c2:	31 83       	std	Z+1, r19	; 0x01
    50c4:	20 83       	st	Z, r18
    50c6:	ce 01       	movw	r24, r28
    50c8:	8f 57       	subi	r24, 0x7F	; 127
    50ca:	9f 4f       	sbci	r25, 0xFF	; 255
    50cc:	fc 01       	movw	r30, r24
    50ce:	80 81       	ld	r24, Z
    50d0:	91 81       	ldd	r25, Z+1	; 0x01
    50d2:	01 97       	sbiw	r24, 0x01	; 1
    50d4:	f1 f7       	brne	.-4      	; 0x50d2 <rotateStepper_4+0x65e>
    50d6:	9e 01       	movw	r18, r28
    50d8:	2f 57       	subi	r18, 0x7F	; 127
    50da:	3f 4f       	sbci	r19, 0xFF	; 255
    50dc:	f9 01       	movw	r30, r18
    50de:	91 83       	std	Z+1, r25	; 0x01
    50e0:	80 83       	st	Z, r24
			PORTC = 0xc0;
    50e2:	85 e3       	ldi	r24, 0x35	; 53
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	20 ec       	ldi	r18, 0xC0	; 192
    50e8:	fc 01       	movw	r30, r24
    50ea:	20 83       	st	Z, r18
			_delay_ms(period);
    50ec:	8d 81       	ldd	r24, Y+5	; 0x05
    50ee:	9e 81       	ldd	r25, Y+6	; 0x06
    50f0:	09 2e       	mov	r0, r25
    50f2:	00 0c       	add	r0, r0
    50f4:	aa 0b       	sbc	r26, r26
    50f6:	bb 0b       	sbc	r27, r27
    50f8:	bc 01       	movw	r22, r24
    50fa:	cd 01       	movw	r24, r26
    50fc:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    5100:	dc 01       	movw	r26, r24
    5102:	cb 01       	movw	r24, r22
    5104:	8b 8f       	std	Y+27, r24	; 0x1b
    5106:	9c 8f       	std	Y+28, r25	; 0x1c
    5108:	ad 8f       	std	Y+29, r26	; 0x1d
    510a:	be 8f       	std	Y+30, r27	; 0x1e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    510c:	8e 01       	movw	r16, r28
    510e:	01 59       	subi	r16, 0x91	; 145
    5110:	1f 4f       	sbci	r17, 0xFF	; 255
    5112:	20 e0       	ldi	r18, 0x00	; 0
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	4a e7       	ldi	r20, 0x7A	; 122
    5118:	55 e4       	ldi	r21, 0x45	; 69
    511a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    511c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    511e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5120:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5122:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    5126:	dc 01       	movw	r26, r24
    5128:	cb 01       	movw	r24, r22
    512a:	f8 01       	movw	r30, r16
    512c:	80 83       	st	Z, r24
    512e:	91 83       	std	Z+1, r25	; 0x01
    5130:	a2 83       	std	Z+2, r26	; 0x02
    5132:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5134:	ce 01       	movw	r24, r28
    5136:	81 59       	subi	r24, 0x91	; 145
    5138:	9f 4f       	sbci	r25, 0xFF	; 255
    513a:	20 e0       	ldi	r18, 0x00	; 0
    513c:	30 e0       	ldi	r19, 0x00	; 0
    513e:	40 e8       	ldi	r20, 0x80	; 128
    5140:	5f e3       	ldi	r21, 0x3F	; 63
    5142:	fc 01       	movw	r30, r24
    5144:	60 81       	ld	r22, Z
    5146:	71 81       	ldd	r23, Z+1	; 0x01
    5148:	82 81       	ldd	r24, Z+2	; 0x02
    514a:	93 81       	ldd	r25, Z+3	; 0x03
    514c:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    5150:	88 23       	and	r24, r24
    5152:	4c f4       	brge	.+18     	; 0x5166 <rotateStepper_4+0x6f2>
		__ticks = 1;
    5154:	ce 01       	movw	r24, r28
    5156:	8d 58       	subi	r24, 0x8D	; 141
    5158:	9f 4f       	sbci	r25, 0xFF	; 255
    515a:	21 e0       	ldi	r18, 0x01	; 1
    515c:	30 e0       	ldi	r19, 0x00	; 0
    515e:	fc 01       	movw	r30, r24
    5160:	31 83       	std	Z+1, r19	; 0x01
    5162:	20 83       	st	Z, r18
    5164:	69 c0       	rjmp	.+210    	; 0x5238 <rotateStepper_4+0x7c4>
	else if (__tmp > 65535)
    5166:	ce 01       	movw	r24, r28
    5168:	81 59       	subi	r24, 0x91	; 145
    516a:	9f 4f       	sbci	r25, 0xFF	; 255
    516c:	20 e0       	ldi	r18, 0x00	; 0
    516e:	3f ef       	ldi	r19, 0xFF	; 255
    5170:	4f e7       	ldi	r20, 0x7F	; 127
    5172:	57 e4       	ldi	r21, 0x47	; 71
    5174:	fc 01       	movw	r30, r24
    5176:	60 81       	ld	r22, Z
    5178:	71 81       	ldd	r23, Z+1	; 0x01
    517a:	82 81       	ldd	r24, Z+2	; 0x02
    517c:	93 81       	ldd	r25, Z+3	; 0x03
    517e:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    5182:	18 16       	cp	r1, r24
    5184:	0c f0       	brlt	.+2      	; 0x5188 <rotateStepper_4+0x714>
    5186:	46 c0       	rjmp	.+140    	; 0x5214 <rotateStepper_4+0x7a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5188:	20 e0       	ldi	r18, 0x00	; 0
    518a:	30 e0       	ldi	r19, 0x00	; 0
    518c:	40 e2       	ldi	r20, 0x20	; 32
    518e:	51 e4       	ldi	r21, 0x41	; 65
    5190:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5192:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5194:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5196:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5198:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    519c:	dc 01       	movw	r26, r24
    519e:	cb 01       	movw	r24, r22
    51a0:	8e 01       	movw	r16, r28
    51a2:	0d 58       	subi	r16, 0x8D	; 141
    51a4:	1f 4f       	sbci	r17, 0xFF	; 255
    51a6:	bc 01       	movw	r22, r24
    51a8:	cd 01       	movw	r24, r26
    51aa:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    51ae:	dc 01       	movw	r26, r24
    51b0:	cb 01       	movw	r24, r22
    51b2:	f8 01       	movw	r30, r16
    51b4:	91 83       	std	Z+1, r25	; 0x01
    51b6:	80 83       	st	Z, r24
    51b8:	24 c0       	rjmp	.+72     	; 0x5202 <rotateStepper_4+0x78e>
    51ba:	ce 01       	movw	r24, r28
    51bc:	8b 58       	subi	r24, 0x8B	; 139
    51be:	9f 4f       	sbci	r25, 0xFF	; 255
    51c0:	20 e9       	ldi	r18, 0x90	; 144
    51c2:	31 e0       	ldi	r19, 0x01	; 1
    51c4:	fc 01       	movw	r30, r24
    51c6:	31 83       	std	Z+1, r19	; 0x01
    51c8:	20 83       	st	Z, r18
    51ca:	ce 01       	movw	r24, r28
    51cc:	8b 58       	subi	r24, 0x8B	; 139
    51ce:	9f 4f       	sbci	r25, 0xFF	; 255
    51d0:	fc 01       	movw	r30, r24
    51d2:	80 81       	ld	r24, Z
    51d4:	91 81       	ldd	r25, Z+1	; 0x01
    51d6:	01 97       	sbiw	r24, 0x01	; 1
    51d8:	f1 f7       	brne	.-4      	; 0x51d6 <rotateStepper_4+0x762>
    51da:	9e 01       	movw	r18, r28
    51dc:	2b 58       	subi	r18, 0x8B	; 139
    51de:	3f 4f       	sbci	r19, 0xFF	; 255
    51e0:	f9 01       	movw	r30, r18
    51e2:	91 83       	std	Z+1, r25	; 0x01
    51e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51e6:	ce 01       	movw	r24, r28
    51e8:	8d 58       	subi	r24, 0x8D	; 141
    51ea:	9f 4f       	sbci	r25, 0xFF	; 255
    51ec:	9e 01       	movw	r18, r28
    51ee:	2d 58       	subi	r18, 0x8D	; 141
    51f0:	3f 4f       	sbci	r19, 0xFF	; 255
    51f2:	f9 01       	movw	r30, r18
    51f4:	20 81       	ld	r18, Z
    51f6:	31 81       	ldd	r19, Z+1	; 0x01
    51f8:	21 50       	subi	r18, 0x01	; 1
    51fa:	31 09       	sbc	r19, r1
    51fc:	fc 01       	movw	r30, r24
    51fe:	31 83       	std	Z+1, r19	; 0x01
    5200:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5202:	ce 01       	movw	r24, r28
    5204:	8d 58       	subi	r24, 0x8D	; 141
    5206:	9f 4f       	sbci	r25, 0xFF	; 255
    5208:	fc 01       	movw	r30, r24
    520a:	80 81       	ld	r24, Z
    520c:	91 81       	ldd	r25, Z+1	; 0x01
    520e:	89 2b       	or	r24, r25
    5210:	a1 f6       	brne	.-88     	; 0x51ba <rotateStepper_4+0x746>
    5212:	2c c0       	rjmp	.+88     	; 0x526c <rotateStepper_4+0x7f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5214:	8e 01       	movw	r16, r28
    5216:	0d 58       	subi	r16, 0x8D	; 141
    5218:	1f 4f       	sbci	r17, 0xFF	; 255
    521a:	ce 01       	movw	r24, r28
    521c:	81 59       	subi	r24, 0x91	; 145
    521e:	9f 4f       	sbci	r25, 0xFF	; 255
    5220:	fc 01       	movw	r30, r24
    5222:	60 81       	ld	r22, Z
    5224:	71 81       	ldd	r23, Z+1	; 0x01
    5226:	82 81       	ldd	r24, Z+2	; 0x02
    5228:	93 81       	ldd	r25, Z+3	; 0x03
    522a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    522e:	dc 01       	movw	r26, r24
    5230:	cb 01       	movw	r24, r22
    5232:	f8 01       	movw	r30, r16
    5234:	91 83       	std	Z+1, r25	; 0x01
    5236:	80 83       	st	Z, r24
    5238:	ce 01       	movw	r24, r28
    523a:	89 58       	subi	r24, 0x89	; 137
    523c:	9f 4f       	sbci	r25, 0xFF	; 255
    523e:	9e 01       	movw	r18, r28
    5240:	2d 58       	subi	r18, 0x8D	; 141
    5242:	3f 4f       	sbci	r19, 0xFF	; 255
    5244:	f9 01       	movw	r30, r18
    5246:	20 81       	ld	r18, Z
    5248:	31 81       	ldd	r19, Z+1	; 0x01
    524a:	fc 01       	movw	r30, r24
    524c:	31 83       	std	Z+1, r19	; 0x01
    524e:	20 83       	st	Z, r18
    5250:	ce 01       	movw	r24, r28
    5252:	89 58       	subi	r24, 0x89	; 137
    5254:	9f 4f       	sbci	r25, 0xFF	; 255
    5256:	fc 01       	movw	r30, r24
    5258:	80 81       	ld	r24, Z
    525a:	91 81       	ldd	r25, Z+1	; 0x01
    525c:	01 97       	sbiw	r24, 0x01	; 1
    525e:	f1 f7       	brne	.-4      	; 0x525c <rotateStepper_4+0x7e8>
    5260:	9e 01       	movw	r18, r28
    5262:	29 58       	subi	r18, 0x89	; 137
    5264:	3f 4f       	sbci	r19, 0xFF	; 255
    5266:	f9 01       	movw	r30, r18
    5268:	91 83       	std	Z+1, r25	; 0x01
    526a:	80 83       	st	Z, r24
			PORTC = 0x80;
    526c:	85 e3       	ldi	r24, 0x35	; 53
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	20 e8       	ldi	r18, 0x80	; 128
    5272:	fc 01       	movw	r30, r24
    5274:	20 83       	st	Z, r18
			_delay_ms(period);
    5276:	8d 81       	ldd	r24, Y+5	; 0x05
    5278:	9e 81       	ldd	r25, Y+6	; 0x06
    527a:	09 2e       	mov	r0, r25
    527c:	00 0c       	add	r0, r0
    527e:	aa 0b       	sbc	r26, r26
    5280:	bb 0b       	sbc	r27, r27
    5282:	bc 01       	movw	r22, r24
    5284:	cd 01       	movw	r24, r26
    5286:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    528a:	dc 01       	movw	r26, r24
    528c:	cb 01       	movw	r24, r22
    528e:	8f 8f       	std	Y+31, r24	; 0x1f
    5290:	98 a3       	std	Y+32, r25	; 0x20
    5292:	a9 a3       	std	Y+33, r26	; 0x21
    5294:	ba a3       	std	Y+34, r27	; 0x22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5296:	8e 01       	movw	r16, r28
    5298:	0b 59       	subi	r16, 0x9B	; 155
    529a:	1f 4f       	sbci	r17, 0xFF	; 255
    529c:	20 e0       	ldi	r18, 0x00	; 0
    529e:	30 e0       	ldi	r19, 0x00	; 0
    52a0:	4a e7       	ldi	r20, 0x7A	; 122
    52a2:	55 e4       	ldi	r21, 0x45	; 69
    52a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    52a6:	78 a1       	ldd	r23, Y+32	; 0x20
    52a8:	89 a1       	ldd	r24, Y+33	; 0x21
    52aa:	9a a1       	ldd	r25, Y+34	; 0x22
    52ac:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    52b0:	dc 01       	movw	r26, r24
    52b2:	cb 01       	movw	r24, r22
    52b4:	f8 01       	movw	r30, r16
    52b6:	80 83       	st	Z, r24
    52b8:	91 83       	std	Z+1, r25	; 0x01
    52ba:	a2 83       	std	Z+2, r26	; 0x02
    52bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    52be:	ce 01       	movw	r24, r28
    52c0:	8b 59       	subi	r24, 0x9B	; 155
    52c2:	9f 4f       	sbci	r25, 0xFF	; 255
    52c4:	20 e0       	ldi	r18, 0x00	; 0
    52c6:	30 e0       	ldi	r19, 0x00	; 0
    52c8:	40 e8       	ldi	r20, 0x80	; 128
    52ca:	5f e3       	ldi	r21, 0x3F	; 63
    52cc:	fc 01       	movw	r30, r24
    52ce:	60 81       	ld	r22, Z
    52d0:	71 81       	ldd	r23, Z+1	; 0x01
    52d2:	82 81       	ldd	r24, Z+2	; 0x02
    52d4:	93 81       	ldd	r25, Z+3	; 0x03
    52d6:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    52da:	88 23       	and	r24, r24
    52dc:	4c f4       	brge	.+18     	; 0x52f0 <rotateStepper_4+0x87c>
		__ticks = 1;
    52de:	ce 01       	movw	r24, r28
    52e0:	87 59       	subi	r24, 0x97	; 151
    52e2:	9f 4f       	sbci	r25, 0xFF	; 255
    52e4:	21 e0       	ldi	r18, 0x01	; 1
    52e6:	30 e0       	ldi	r19, 0x00	; 0
    52e8:	fc 01       	movw	r30, r24
    52ea:	31 83       	std	Z+1, r19	; 0x01
    52ec:	20 83       	st	Z, r18
    52ee:	69 c0       	rjmp	.+210    	; 0x53c2 <rotateStepper_4+0x94e>
	else if (__tmp > 65535)
    52f0:	ce 01       	movw	r24, r28
    52f2:	8b 59       	subi	r24, 0x9B	; 155
    52f4:	9f 4f       	sbci	r25, 0xFF	; 255
    52f6:	20 e0       	ldi	r18, 0x00	; 0
    52f8:	3f ef       	ldi	r19, 0xFF	; 255
    52fa:	4f e7       	ldi	r20, 0x7F	; 127
    52fc:	57 e4       	ldi	r21, 0x47	; 71
    52fe:	fc 01       	movw	r30, r24
    5300:	60 81       	ld	r22, Z
    5302:	71 81       	ldd	r23, Z+1	; 0x01
    5304:	82 81       	ldd	r24, Z+2	; 0x02
    5306:	93 81       	ldd	r25, Z+3	; 0x03
    5308:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    530c:	18 16       	cp	r1, r24
    530e:	0c f0       	brlt	.+2      	; 0x5312 <rotateStepper_4+0x89e>
    5310:	46 c0       	rjmp	.+140    	; 0x539e <rotateStepper_4+0x92a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5312:	20 e0       	ldi	r18, 0x00	; 0
    5314:	30 e0       	ldi	r19, 0x00	; 0
    5316:	40 e2       	ldi	r20, 0x20	; 32
    5318:	51 e4       	ldi	r21, 0x41	; 65
    531a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    531c:	78 a1       	ldd	r23, Y+32	; 0x20
    531e:	89 a1       	ldd	r24, Y+33	; 0x21
    5320:	9a a1       	ldd	r25, Y+34	; 0x22
    5322:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    5326:	dc 01       	movw	r26, r24
    5328:	cb 01       	movw	r24, r22
    532a:	8e 01       	movw	r16, r28
    532c:	07 59       	subi	r16, 0x97	; 151
    532e:	1f 4f       	sbci	r17, 0xFF	; 255
    5330:	bc 01       	movw	r22, r24
    5332:	cd 01       	movw	r24, r26
    5334:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    5338:	dc 01       	movw	r26, r24
    533a:	cb 01       	movw	r24, r22
    533c:	f8 01       	movw	r30, r16
    533e:	91 83       	std	Z+1, r25	; 0x01
    5340:	80 83       	st	Z, r24
    5342:	24 c0       	rjmp	.+72     	; 0x538c <rotateStepper_4+0x918>
    5344:	ce 01       	movw	r24, r28
    5346:	85 59       	subi	r24, 0x95	; 149
    5348:	9f 4f       	sbci	r25, 0xFF	; 255
    534a:	20 e9       	ldi	r18, 0x90	; 144
    534c:	31 e0       	ldi	r19, 0x01	; 1
    534e:	fc 01       	movw	r30, r24
    5350:	31 83       	std	Z+1, r19	; 0x01
    5352:	20 83       	st	Z, r18
    5354:	ce 01       	movw	r24, r28
    5356:	85 59       	subi	r24, 0x95	; 149
    5358:	9f 4f       	sbci	r25, 0xFF	; 255
    535a:	fc 01       	movw	r30, r24
    535c:	80 81       	ld	r24, Z
    535e:	91 81       	ldd	r25, Z+1	; 0x01
    5360:	01 97       	sbiw	r24, 0x01	; 1
    5362:	f1 f7       	brne	.-4      	; 0x5360 <rotateStepper_4+0x8ec>
    5364:	9e 01       	movw	r18, r28
    5366:	25 59       	subi	r18, 0x95	; 149
    5368:	3f 4f       	sbci	r19, 0xFF	; 255
    536a:	f9 01       	movw	r30, r18
    536c:	91 83       	std	Z+1, r25	; 0x01
    536e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5370:	ce 01       	movw	r24, r28
    5372:	87 59       	subi	r24, 0x97	; 151
    5374:	9f 4f       	sbci	r25, 0xFF	; 255
    5376:	9e 01       	movw	r18, r28
    5378:	27 59       	subi	r18, 0x97	; 151
    537a:	3f 4f       	sbci	r19, 0xFF	; 255
    537c:	f9 01       	movw	r30, r18
    537e:	20 81       	ld	r18, Z
    5380:	31 81       	ldd	r19, Z+1	; 0x01
    5382:	21 50       	subi	r18, 0x01	; 1
    5384:	31 09       	sbc	r19, r1
    5386:	fc 01       	movw	r30, r24
    5388:	31 83       	std	Z+1, r19	; 0x01
    538a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    538c:	ce 01       	movw	r24, r28
    538e:	87 59       	subi	r24, 0x97	; 151
    5390:	9f 4f       	sbci	r25, 0xFF	; 255
    5392:	fc 01       	movw	r30, r24
    5394:	80 81       	ld	r24, Z
    5396:	91 81       	ldd	r25, Z+1	; 0x01
    5398:	89 2b       	or	r24, r25
    539a:	a1 f6       	brne	.-88     	; 0x5344 <rotateStepper_4+0x8d0>
    539c:	2c c0       	rjmp	.+88     	; 0x53f6 <rotateStepper_4+0x982>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    539e:	8e 01       	movw	r16, r28
    53a0:	07 59       	subi	r16, 0x97	; 151
    53a2:	1f 4f       	sbci	r17, 0xFF	; 255
    53a4:	ce 01       	movw	r24, r28
    53a6:	8b 59       	subi	r24, 0x9B	; 155
    53a8:	9f 4f       	sbci	r25, 0xFF	; 255
    53aa:	fc 01       	movw	r30, r24
    53ac:	60 81       	ld	r22, Z
    53ae:	71 81       	ldd	r23, Z+1	; 0x01
    53b0:	82 81       	ldd	r24, Z+2	; 0x02
    53b2:	93 81       	ldd	r25, Z+3	; 0x03
    53b4:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    53b8:	dc 01       	movw	r26, r24
    53ba:	cb 01       	movw	r24, r22
    53bc:	f8 01       	movw	r30, r16
    53be:	91 83       	std	Z+1, r25	; 0x01
    53c0:	80 83       	st	Z, r24
    53c2:	ce 01       	movw	r24, r28
    53c4:	83 59       	subi	r24, 0x93	; 147
    53c6:	9f 4f       	sbci	r25, 0xFF	; 255
    53c8:	9e 01       	movw	r18, r28
    53ca:	27 59       	subi	r18, 0x97	; 151
    53cc:	3f 4f       	sbci	r19, 0xFF	; 255
    53ce:	f9 01       	movw	r30, r18
    53d0:	20 81       	ld	r18, Z
    53d2:	31 81       	ldd	r19, Z+1	; 0x01
    53d4:	fc 01       	movw	r30, r24
    53d6:	31 83       	std	Z+1, r19	; 0x01
    53d8:	20 83       	st	Z, r18
    53da:	ce 01       	movw	r24, r28
    53dc:	83 59       	subi	r24, 0x93	; 147
    53de:	9f 4f       	sbci	r25, 0xFF	; 255
    53e0:	fc 01       	movw	r30, r24
    53e2:	80 81       	ld	r24, Z
    53e4:	91 81       	ldd	r25, Z+1	; 0x01
    53e6:	01 97       	sbiw	r24, 0x01	; 1
    53e8:	f1 f7       	brne	.-4      	; 0x53e6 <rotateStepper_4+0x972>
    53ea:	9e 01       	movw	r18, r28
    53ec:	23 59       	subi	r18, 0x93	; 147
    53ee:	3f 4f       	sbci	r19, 0xFF	; 255
    53f0:	f9 01       	movw	r30, r18
    53f2:	91 83       	std	Z+1, r25	; 0x01
    53f4:	80 83       	st	Z, r24
			PORTC = 0x90;
    53f6:	85 e3       	ldi	r24, 0x35	; 53
    53f8:	90 e0       	ldi	r25, 0x00	; 0
    53fa:	20 e9       	ldi	r18, 0x90	; 144
    53fc:	fc 01       	movw	r30, r24
    53fe:	20 83       	st	Z, r18
			_delay_ms(period);
    5400:	8d 81       	ldd	r24, Y+5	; 0x05
    5402:	9e 81       	ldd	r25, Y+6	; 0x06
    5404:	09 2e       	mov	r0, r25
    5406:	00 0c       	add	r0, r0
    5408:	aa 0b       	sbc	r26, r26
    540a:	bb 0b       	sbc	r27, r27
    540c:	bc 01       	movw	r22, r24
    540e:	cd 01       	movw	r24, r26
    5410:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    5414:	dc 01       	movw	r26, r24
    5416:	cb 01       	movw	r24, r22
    5418:	8b a3       	std	Y+35, r24	; 0x23
    541a:	9c a3       	std	Y+36, r25	; 0x24
    541c:	ad a3       	std	Y+37, r26	; 0x25
    541e:	be a3       	std	Y+38, r27	; 0x26

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5420:	8e 01       	movw	r16, r28
    5422:	05 5a       	subi	r16, 0xA5	; 165
    5424:	1f 4f       	sbci	r17, 0xFF	; 255
    5426:	20 e0       	ldi	r18, 0x00	; 0
    5428:	30 e0       	ldi	r19, 0x00	; 0
    542a:	4a e7       	ldi	r20, 0x7A	; 122
    542c:	55 e4       	ldi	r21, 0x45	; 69
    542e:	6b a1       	ldd	r22, Y+35	; 0x23
    5430:	7c a1       	ldd	r23, Y+36	; 0x24
    5432:	8d a1       	ldd	r24, Y+37	; 0x25
    5434:	9e a1       	ldd	r25, Y+38	; 0x26
    5436:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    543a:	dc 01       	movw	r26, r24
    543c:	cb 01       	movw	r24, r22
    543e:	f8 01       	movw	r30, r16
    5440:	80 83       	st	Z, r24
    5442:	91 83       	std	Z+1, r25	; 0x01
    5444:	a2 83       	std	Z+2, r26	; 0x02
    5446:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5448:	ce 01       	movw	r24, r28
    544a:	85 5a       	subi	r24, 0xA5	; 165
    544c:	9f 4f       	sbci	r25, 0xFF	; 255
    544e:	20 e0       	ldi	r18, 0x00	; 0
    5450:	30 e0       	ldi	r19, 0x00	; 0
    5452:	40 e8       	ldi	r20, 0x80	; 128
    5454:	5f e3       	ldi	r21, 0x3F	; 63
    5456:	fc 01       	movw	r30, r24
    5458:	60 81       	ld	r22, Z
    545a:	71 81       	ldd	r23, Z+1	; 0x01
    545c:	82 81       	ldd	r24, Z+2	; 0x02
    545e:	93 81       	ldd	r25, Z+3	; 0x03
    5460:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    5464:	88 23       	and	r24, r24
    5466:	4c f4       	brge	.+18     	; 0x547a <rotateStepper_4+0xa06>
		__ticks = 1;
    5468:	ce 01       	movw	r24, r28
    546a:	81 5a       	subi	r24, 0xA1	; 161
    546c:	9f 4f       	sbci	r25, 0xFF	; 255
    546e:	21 e0       	ldi	r18, 0x01	; 1
    5470:	30 e0       	ldi	r19, 0x00	; 0
    5472:	fc 01       	movw	r30, r24
    5474:	31 83       	std	Z+1, r19	; 0x01
    5476:	20 83       	st	Z, r18
    5478:	69 c0       	rjmp	.+210    	; 0x554c <rotateStepper_4+0xad8>
	else if (__tmp > 65535)
    547a:	ce 01       	movw	r24, r28
    547c:	85 5a       	subi	r24, 0xA5	; 165
    547e:	9f 4f       	sbci	r25, 0xFF	; 255
    5480:	20 e0       	ldi	r18, 0x00	; 0
    5482:	3f ef       	ldi	r19, 0xFF	; 255
    5484:	4f e7       	ldi	r20, 0x7F	; 127
    5486:	57 e4       	ldi	r21, 0x47	; 71
    5488:	fc 01       	movw	r30, r24
    548a:	60 81       	ld	r22, Z
    548c:	71 81       	ldd	r23, Z+1	; 0x01
    548e:	82 81       	ldd	r24, Z+2	; 0x02
    5490:	93 81       	ldd	r25, Z+3	; 0x03
    5492:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    5496:	18 16       	cp	r1, r24
    5498:	0c f0       	brlt	.+2      	; 0x549c <rotateStepper_4+0xa28>
    549a:	46 c0       	rjmp	.+140    	; 0x5528 <rotateStepper_4+0xab4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    549c:	20 e0       	ldi	r18, 0x00	; 0
    549e:	30 e0       	ldi	r19, 0x00	; 0
    54a0:	40 e2       	ldi	r20, 0x20	; 32
    54a2:	51 e4       	ldi	r21, 0x41	; 65
    54a4:	6b a1       	ldd	r22, Y+35	; 0x23
    54a6:	7c a1       	ldd	r23, Y+36	; 0x24
    54a8:	8d a1       	ldd	r24, Y+37	; 0x25
    54aa:	9e a1       	ldd	r25, Y+38	; 0x26
    54ac:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    54b0:	dc 01       	movw	r26, r24
    54b2:	cb 01       	movw	r24, r22
    54b4:	8e 01       	movw	r16, r28
    54b6:	01 5a       	subi	r16, 0xA1	; 161
    54b8:	1f 4f       	sbci	r17, 0xFF	; 255
    54ba:	bc 01       	movw	r22, r24
    54bc:	cd 01       	movw	r24, r26
    54be:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    54c2:	dc 01       	movw	r26, r24
    54c4:	cb 01       	movw	r24, r22
    54c6:	f8 01       	movw	r30, r16
    54c8:	91 83       	std	Z+1, r25	; 0x01
    54ca:	80 83       	st	Z, r24
    54cc:	24 c0       	rjmp	.+72     	; 0x5516 <rotateStepper_4+0xaa2>
    54ce:	ce 01       	movw	r24, r28
    54d0:	8f 59       	subi	r24, 0x9F	; 159
    54d2:	9f 4f       	sbci	r25, 0xFF	; 255
    54d4:	20 e9       	ldi	r18, 0x90	; 144
    54d6:	31 e0       	ldi	r19, 0x01	; 1
    54d8:	fc 01       	movw	r30, r24
    54da:	31 83       	std	Z+1, r19	; 0x01
    54dc:	20 83       	st	Z, r18
    54de:	ce 01       	movw	r24, r28
    54e0:	8f 59       	subi	r24, 0x9F	; 159
    54e2:	9f 4f       	sbci	r25, 0xFF	; 255
    54e4:	fc 01       	movw	r30, r24
    54e6:	80 81       	ld	r24, Z
    54e8:	91 81       	ldd	r25, Z+1	; 0x01
    54ea:	01 97       	sbiw	r24, 0x01	; 1
    54ec:	f1 f7       	brne	.-4      	; 0x54ea <rotateStepper_4+0xa76>
    54ee:	9e 01       	movw	r18, r28
    54f0:	2f 59       	subi	r18, 0x9F	; 159
    54f2:	3f 4f       	sbci	r19, 0xFF	; 255
    54f4:	f9 01       	movw	r30, r18
    54f6:	91 83       	std	Z+1, r25	; 0x01
    54f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54fa:	ce 01       	movw	r24, r28
    54fc:	81 5a       	subi	r24, 0xA1	; 161
    54fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5500:	9e 01       	movw	r18, r28
    5502:	21 5a       	subi	r18, 0xA1	; 161
    5504:	3f 4f       	sbci	r19, 0xFF	; 255
    5506:	f9 01       	movw	r30, r18
    5508:	20 81       	ld	r18, Z
    550a:	31 81       	ldd	r19, Z+1	; 0x01
    550c:	21 50       	subi	r18, 0x01	; 1
    550e:	31 09       	sbc	r19, r1
    5510:	fc 01       	movw	r30, r24
    5512:	31 83       	std	Z+1, r19	; 0x01
    5514:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5516:	ce 01       	movw	r24, r28
    5518:	81 5a       	subi	r24, 0xA1	; 161
    551a:	9f 4f       	sbci	r25, 0xFF	; 255
    551c:	fc 01       	movw	r30, r24
    551e:	80 81       	ld	r24, Z
    5520:	91 81       	ldd	r25, Z+1	; 0x01
    5522:	89 2b       	or	r24, r25
    5524:	a1 f6       	brne	.-88     	; 0x54ce <rotateStepper_4+0xa5a>
    5526:	2c c0       	rjmp	.+88     	; 0x5580 <rotateStepper_4+0xb0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5528:	8e 01       	movw	r16, r28
    552a:	01 5a       	subi	r16, 0xA1	; 161
    552c:	1f 4f       	sbci	r17, 0xFF	; 255
    552e:	ce 01       	movw	r24, r28
    5530:	85 5a       	subi	r24, 0xA5	; 165
    5532:	9f 4f       	sbci	r25, 0xFF	; 255
    5534:	fc 01       	movw	r30, r24
    5536:	60 81       	ld	r22, Z
    5538:	71 81       	ldd	r23, Z+1	; 0x01
    553a:	82 81       	ldd	r24, Z+2	; 0x02
    553c:	93 81       	ldd	r25, Z+3	; 0x03
    553e:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    5542:	dc 01       	movw	r26, r24
    5544:	cb 01       	movw	r24, r22
    5546:	f8 01       	movw	r30, r16
    5548:	91 83       	std	Z+1, r25	; 0x01
    554a:	80 83       	st	Z, r24
    554c:	ce 01       	movw	r24, r28
    554e:	8d 59       	subi	r24, 0x9D	; 157
    5550:	9f 4f       	sbci	r25, 0xFF	; 255
    5552:	9e 01       	movw	r18, r28
    5554:	21 5a       	subi	r18, 0xA1	; 161
    5556:	3f 4f       	sbci	r19, 0xFF	; 255
    5558:	f9 01       	movw	r30, r18
    555a:	20 81       	ld	r18, Z
    555c:	31 81       	ldd	r19, Z+1	; 0x01
    555e:	fc 01       	movw	r30, r24
    5560:	31 83       	std	Z+1, r19	; 0x01
    5562:	20 83       	st	Z, r18
    5564:	ce 01       	movw	r24, r28
    5566:	8d 59       	subi	r24, 0x9D	; 157
    5568:	9f 4f       	sbci	r25, 0xFF	; 255
    556a:	fc 01       	movw	r30, r24
    556c:	80 81       	ld	r24, Z
    556e:	91 81       	ldd	r25, Z+1	; 0x01
    5570:	01 97       	sbiw	r24, 0x01	; 1
    5572:	f1 f7       	brne	.-4      	; 0x5570 <rotateStepper_4+0xafc>
    5574:	9e 01       	movw	r18, r28
    5576:	2d 59       	subi	r18, 0x9D	; 157
    5578:	3f 4f       	sbci	r19, 0xFF	; 255
    557a:	f9 01       	movw	r30, r18
    557c:	91 83       	std	Z+1, r25	; 0x01
    557e:	80 83       	st	Z, r24
			PORTC = 0x10;
    5580:	85 e3       	ldi	r24, 0x35	; 53
    5582:	90 e0       	ldi	r25, 0x00	; 0
    5584:	20 e1       	ldi	r18, 0x10	; 16
    5586:	fc 01       	movw	r30, r24
    5588:	20 83       	st	Z, r18
			_delay_ms(period);
    558a:	8d 81       	ldd	r24, Y+5	; 0x05
    558c:	9e 81       	ldd	r25, Y+6	; 0x06
    558e:	09 2e       	mov	r0, r25
    5590:	00 0c       	add	r0, r0
    5592:	aa 0b       	sbc	r26, r26
    5594:	bb 0b       	sbc	r27, r27
    5596:	bc 01       	movw	r22, r24
    5598:	cd 01       	movw	r24, r26
    559a:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    559e:	dc 01       	movw	r26, r24
    55a0:	cb 01       	movw	r24, r22
    55a2:	8f a3       	std	Y+39, r24	; 0x27
    55a4:	98 a7       	std	Y+40, r25	; 0x28
    55a6:	a9 a7       	std	Y+41, r26	; 0x29
    55a8:	ba a7       	std	Y+42, r27	; 0x2a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    55aa:	8e 01       	movw	r16, r28
    55ac:	0f 5a       	subi	r16, 0xAF	; 175
    55ae:	1f 4f       	sbci	r17, 0xFF	; 255
    55b0:	20 e0       	ldi	r18, 0x00	; 0
    55b2:	30 e0       	ldi	r19, 0x00	; 0
    55b4:	4a e7       	ldi	r20, 0x7A	; 122
    55b6:	55 e4       	ldi	r21, 0x45	; 69
    55b8:	6f a1       	ldd	r22, Y+39	; 0x27
    55ba:	78 a5       	ldd	r23, Y+40	; 0x28
    55bc:	89 a5       	ldd	r24, Y+41	; 0x29
    55be:	9a a5       	ldd	r25, Y+42	; 0x2a
    55c0:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    55c4:	dc 01       	movw	r26, r24
    55c6:	cb 01       	movw	r24, r22
    55c8:	f8 01       	movw	r30, r16
    55ca:	80 83       	st	Z, r24
    55cc:	91 83       	std	Z+1, r25	; 0x01
    55ce:	a2 83       	std	Z+2, r26	; 0x02
    55d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55d2:	ce 01       	movw	r24, r28
    55d4:	8f 5a       	subi	r24, 0xAF	; 175
    55d6:	9f 4f       	sbci	r25, 0xFF	; 255
    55d8:	20 e0       	ldi	r18, 0x00	; 0
    55da:	30 e0       	ldi	r19, 0x00	; 0
    55dc:	40 e8       	ldi	r20, 0x80	; 128
    55de:	5f e3       	ldi	r21, 0x3F	; 63
    55e0:	fc 01       	movw	r30, r24
    55e2:	60 81       	ld	r22, Z
    55e4:	71 81       	ldd	r23, Z+1	; 0x01
    55e6:	82 81       	ldd	r24, Z+2	; 0x02
    55e8:	93 81       	ldd	r25, Z+3	; 0x03
    55ea:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    55ee:	88 23       	and	r24, r24
    55f0:	4c f4       	brge	.+18     	; 0x5604 <rotateStepper_4+0xb90>
		__ticks = 1;
    55f2:	ce 01       	movw	r24, r28
    55f4:	8b 5a       	subi	r24, 0xAB	; 171
    55f6:	9f 4f       	sbci	r25, 0xFF	; 255
    55f8:	21 e0       	ldi	r18, 0x01	; 1
    55fa:	30 e0       	ldi	r19, 0x00	; 0
    55fc:	fc 01       	movw	r30, r24
    55fe:	31 83       	std	Z+1, r19	; 0x01
    5600:	20 83       	st	Z, r18
    5602:	69 c0       	rjmp	.+210    	; 0x56d6 <rotateStepper_4+0xc62>
	else if (__tmp > 65535)
    5604:	ce 01       	movw	r24, r28
    5606:	8f 5a       	subi	r24, 0xAF	; 175
    5608:	9f 4f       	sbci	r25, 0xFF	; 255
    560a:	20 e0       	ldi	r18, 0x00	; 0
    560c:	3f ef       	ldi	r19, 0xFF	; 255
    560e:	4f e7       	ldi	r20, 0x7F	; 127
    5610:	57 e4       	ldi	r21, 0x47	; 71
    5612:	fc 01       	movw	r30, r24
    5614:	60 81       	ld	r22, Z
    5616:	71 81       	ldd	r23, Z+1	; 0x01
    5618:	82 81       	ldd	r24, Z+2	; 0x02
    561a:	93 81       	ldd	r25, Z+3	; 0x03
    561c:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    5620:	18 16       	cp	r1, r24
    5622:	0c f0       	brlt	.+2      	; 0x5626 <rotateStepper_4+0xbb2>
    5624:	46 c0       	rjmp	.+140    	; 0x56b2 <rotateStepper_4+0xc3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5626:	20 e0       	ldi	r18, 0x00	; 0
    5628:	30 e0       	ldi	r19, 0x00	; 0
    562a:	40 e2       	ldi	r20, 0x20	; 32
    562c:	51 e4       	ldi	r21, 0x41	; 65
    562e:	6f a1       	ldd	r22, Y+39	; 0x27
    5630:	78 a5       	ldd	r23, Y+40	; 0x28
    5632:	89 a5       	ldd	r24, Y+41	; 0x29
    5634:	9a a5       	ldd	r25, Y+42	; 0x2a
    5636:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    563a:	dc 01       	movw	r26, r24
    563c:	cb 01       	movw	r24, r22
    563e:	8e 01       	movw	r16, r28
    5640:	0b 5a       	subi	r16, 0xAB	; 171
    5642:	1f 4f       	sbci	r17, 0xFF	; 255
    5644:	bc 01       	movw	r22, r24
    5646:	cd 01       	movw	r24, r26
    5648:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    564c:	dc 01       	movw	r26, r24
    564e:	cb 01       	movw	r24, r22
    5650:	f8 01       	movw	r30, r16
    5652:	91 83       	std	Z+1, r25	; 0x01
    5654:	80 83       	st	Z, r24
    5656:	24 c0       	rjmp	.+72     	; 0x56a0 <rotateStepper_4+0xc2c>
    5658:	ce 01       	movw	r24, r28
    565a:	89 5a       	subi	r24, 0xA9	; 169
    565c:	9f 4f       	sbci	r25, 0xFF	; 255
    565e:	20 e9       	ldi	r18, 0x90	; 144
    5660:	31 e0       	ldi	r19, 0x01	; 1
    5662:	fc 01       	movw	r30, r24
    5664:	31 83       	std	Z+1, r19	; 0x01
    5666:	20 83       	st	Z, r18
    5668:	ce 01       	movw	r24, r28
    566a:	89 5a       	subi	r24, 0xA9	; 169
    566c:	9f 4f       	sbci	r25, 0xFF	; 255
    566e:	fc 01       	movw	r30, r24
    5670:	80 81       	ld	r24, Z
    5672:	91 81       	ldd	r25, Z+1	; 0x01
    5674:	01 97       	sbiw	r24, 0x01	; 1
    5676:	f1 f7       	brne	.-4      	; 0x5674 <rotateStepper_4+0xc00>
    5678:	9e 01       	movw	r18, r28
    567a:	29 5a       	subi	r18, 0xA9	; 169
    567c:	3f 4f       	sbci	r19, 0xFF	; 255
    567e:	f9 01       	movw	r30, r18
    5680:	91 83       	std	Z+1, r25	; 0x01
    5682:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5684:	ce 01       	movw	r24, r28
    5686:	8b 5a       	subi	r24, 0xAB	; 171
    5688:	9f 4f       	sbci	r25, 0xFF	; 255
    568a:	9e 01       	movw	r18, r28
    568c:	2b 5a       	subi	r18, 0xAB	; 171
    568e:	3f 4f       	sbci	r19, 0xFF	; 255
    5690:	f9 01       	movw	r30, r18
    5692:	20 81       	ld	r18, Z
    5694:	31 81       	ldd	r19, Z+1	; 0x01
    5696:	21 50       	subi	r18, 0x01	; 1
    5698:	31 09       	sbc	r19, r1
    569a:	fc 01       	movw	r30, r24
    569c:	31 83       	std	Z+1, r19	; 0x01
    569e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56a0:	ce 01       	movw	r24, r28
    56a2:	8b 5a       	subi	r24, 0xAB	; 171
    56a4:	9f 4f       	sbci	r25, 0xFF	; 255
    56a6:	fc 01       	movw	r30, r24
    56a8:	80 81       	ld	r24, Z
    56aa:	91 81       	ldd	r25, Z+1	; 0x01
    56ac:	89 2b       	or	r24, r25
    56ae:	a1 f6       	brne	.-88     	; 0x5658 <rotateStepper_4+0xbe4>
    56b0:	2c c0       	rjmp	.+88     	; 0x570a <rotateStepper_4+0xc96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56b2:	8e 01       	movw	r16, r28
    56b4:	0b 5a       	subi	r16, 0xAB	; 171
    56b6:	1f 4f       	sbci	r17, 0xFF	; 255
    56b8:	ce 01       	movw	r24, r28
    56ba:	8f 5a       	subi	r24, 0xAF	; 175
    56bc:	9f 4f       	sbci	r25, 0xFF	; 255
    56be:	fc 01       	movw	r30, r24
    56c0:	60 81       	ld	r22, Z
    56c2:	71 81       	ldd	r23, Z+1	; 0x01
    56c4:	82 81       	ldd	r24, Z+2	; 0x02
    56c6:	93 81       	ldd	r25, Z+3	; 0x03
    56c8:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    56cc:	dc 01       	movw	r26, r24
    56ce:	cb 01       	movw	r24, r22
    56d0:	f8 01       	movw	r30, r16
    56d2:	91 83       	std	Z+1, r25	; 0x01
    56d4:	80 83       	st	Z, r24
    56d6:	ce 01       	movw	r24, r28
    56d8:	87 5a       	subi	r24, 0xA7	; 167
    56da:	9f 4f       	sbci	r25, 0xFF	; 255
    56dc:	9e 01       	movw	r18, r28
    56de:	2b 5a       	subi	r18, 0xAB	; 171
    56e0:	3f 4f       	sbci	r19, 0xFF	; 255
    56e2:	f9 01       	movw	r30, r18
    56e4:	20 81       	ld	r18, Z
    56e6:	31 81       	ldd	r19, Z+1	; 0x01
    56e8:	fc 01       	movw	r30, r24
    56ea:	31 83       	std	Z+1, r19	; 0x01
    56ec:	20 83       	st	Z, r18
    56ee:	ce 01       	movw	r24, r28
    56f0:	87 5a       	subi	r24, 0xA7	; 167
    56f2:	9f 4f       	sbci	r25, 0xFF	; 255
    56f4:	fc 01       	movw	r30, r24
    56f6:	80 81       	ld	r24, Z
    56f8:	91 81       	ldd	r25, Z+1	; 0x01
    56fa:	01 97       	sbiw	r24, 0x01	; 1
    56fc:	f1 f7       	brne	.-4      	; 0x56fa <rotateStepper_4+0xc86>
    56fe:	9e 01       	movw	r18, r28
    5700:	27 5a       	subi	r18, 0xA7	; 167
    5702:	3f 4f       	sbci	r19, 0xFF	; 255
    5704:	f9 01       	movw	r30, r18
    5706:	91 83       	std	Z+1, r25	; 0x01
    5708:	80 83       	st	Z, r24
			PORTC = 0x30;
    570a:	85 e3       	ldi	r24, 0x35	; 53
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	20 e3       	ldi	r18, 0x30	; 48
    5710:	fc 01       	movw	r30, r24
    5712:	20 83       	st	Z, r18
			_delay_ms(period);
    5714:	8d 81       	ldd	r24, Y+5	; 0x05
    5716:	9e 81       	ldd	r25, Y+6	; 0x06
    5718:	09 2e       	mov	r0, r25
    571a:	00 0c       	add	r0, r0
    571c:	aa 0b       	sbc	r26, r26
    571e:	bb 0b       	sbc	r27, r27
    5720:	bc 01       	movw	r22, r24
    5722:	cd 01       	movw	r24, r26
    5724:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    5728:	dc 01       	movw	r26, r24
    572a:	cb 01       	movw	r24, r22
    572c:	9e 01       	movw	r18, r28
    572e:	2d 5b       	subi	r18, 0xBD	; 189
    5730:	3f 4f       	sbci	r19, 0xFF	; 255
    5732:	f9 01       	movw	r30, r18
    5734:	80 83       	st	Z, r24
    5736:	91 83       	std	Z+1, r25	; 0x01
    5738:	a2 83       	std	Z+2, r26	; 0x02
    573a:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    573c:	8e 01       	movw	r16, r28
    573e:	09 5b       	subi	r16, 0xB9	; 185
    5740:	1f 4f       	sbci	r17, 0xFF	; 255
    5742:	ce 01       	movw	r24, r28
    5744:	8d 5b       	subi	r24, 0xBD	; 189
    5746:	9f 4f       	sbci	r25, 0xFF	; 255
    5748:	20 e0       	ldi	r18, 0x00	; 0
    574a:	30 e0       	ldi	r19, 0x00	; 0
    574c:	4a e7       	ldi	r20, 0x7A	; 122
    574e:	55 e4       	ldi	r21, 0x45	; 69
    5750:	fc 01       	movw	r30, r24
    5752:	60 81       	ld	r22, Z
    5754:	71 81       	ldd	r23, Z+1	; 0x01
    5756:	82 81       	ldd	r24, Z+2	; 0x02
    5758:	93 81       	ldd	r25, Z+3	; 0x03
    575a:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    575e:	dc 01       	movw	r26, r24
    5760:	cb 01       	movw	r24, r22
    5762:	f8 01       	movw	r30, r16
    5764:	80 83       	st	Z, r24
    5766:	91 83       	std	Z+1, r25	; 0x01
    5768:	a2 83       	std	Z+2, r26	; 0x02
    576a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    576c:	ce 01       	movw	r24, r28
    576e:	89 5b       	subi	r24, 0xB9	; 185
    5770:	9f 4f       	sbci	r25, 0xFF	; 255
    5772:	20 e0       	ldi	r18, 0x00	; 0
    5774:	30 e0       	ldi	r19, 0x00	; 0
    5776:	40 e8       	ldi	r20, 0x80	; 128
    5778:	5f e3       	ldi	r21, 0x3F	; 63
    577a:	fc 01       	movw	r30, r24
    577c:	60 81       	ld	r22, Z
    577e:	71 81       	ldd	r23, Z+1	; 0x01
    5780:	82 81       	ldd	r24, Z+2	; 0x02
    5782:	93 81       	ldd	r25, Z+3	; 0x03
    5784:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    5788:	88 23       	and	r24, r24
    578a:	4c f4       	brge	.+18     	; 0x579e <rotateStepper_4+0xd2a>
		__ticks = 1;
    578c:	ce 01       	movw	r24, r28
    578e:	85 5b       	subi	r24, 0xB5	; 181
    5790:	9f 4f       	sbci	r25, 0xFF	; 255
    5792:	21 e0       	ldi	r18, 0x01	; 1
    5794:	30 e0       	ldi	r19, 0x00	; 0
    5796:	fc 01       	movw	r30, r24
    5798:	31 83       	std	Z+1, r19	; 0x01
    579a:	20 83       	st	Z, r18
    579c:	6d c0       	rjmp	.+218    	; 0x5878 <rotateStepper_4+0xe04>
	else if (__tmp > 65535)
    579e:	ce 01       	movw	r24, r28
    57a0:	89 5b       	subi	r24, 0xB9	; 185
    57a2:	9f 4f       	sbci	r25, 0xFF	; 255
    57a4:	20 e0       	ldi	r18, 0x00	; 0
    57a6:	3f ef       	ldi	r19, 0xFF	; 255
    57a8:	4f e7       	ldi	r20, 0x7F	; 127
    57aa:	57 e4       	ldi	r21, 0x47	; 71
    57ac:	fc 01       	movw	r30, r24
    57ae:	60 81       	ld	r22, Z
    57b0:	71 81       	ldd	r23, Z+1	; 0x01
    57b2:	82 81       	ldd	r24, Z+2	; 0x02
    57b4:	93 81       	ldd	r25, Z+3	; 0x03
    57b6:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    57ba:	18 16       	cp	r1, r24
    57bc:	0c f0       	brlt	.+2      	; 0x57c0 <rotateStepper_4+0xd4c>
    57be:	4a c0       	rjmp	.+148    	; 0x5854 <rotateStepper_4+0xde0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57c0:	ce 01       	movw	r24, r28
    57c2:	8d 5b       	subi	r24, 0xBD	; 189
    57c4:	9f 4f       	sbci	r25, 0xFF	; 255
    57c6:	20 e0       	ldi	r18, 0x00	; 0
    57c8:	30 e0       	ldi	r19, 0x00	; 0
    57ca:	40 e2       	ldi	r20, 0x20	; 32
    57cc:	51 e4       	ldi	r21, 0x41	; 65
    57ce:	fc 01       	movw	r30, r24
    57d0:	60 81       	ld	r22, Z
    57d2:	71 81       	ldd	r23, Z+1	; 0x01
    57d4:	82 81       	ldd	r24, Z+2	; 0x02
    57d6:	93 81       	ldd	r25, Z+3	; 0x03
    57d8:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    57dc:	dc 01       	movw	r26, r24
    57de:	cb 01       	movw	r24, r22
    57e0:	8e 01       	movw	r16, r28
    57e2:	05 5b       	subi	r16, 0xB5	; 181
    57e4:	1f 4f       	sbci	r17, 0xFF	; 255
    57e6:	bc 01       	movw	r22, r24
    57e8:	cd 01       	movw	r24, r26
    57ea:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    57ee:	dc 01       	movw	r26, r24
    57f0:	cb 01       	movw	r24, r22
    57f2:	f8 01       	movw	r30, r16
    57f4:	91 83       	std	Z+1, r25	; 0x01
    57f6:	80 83       	st	Z, r24
    57f8:	24 c0       	rjmp	.+72     	; 0x5842 <rotateStepper_4+0xdce>
    57fa:	ce 01       	movw	r24, r28
    57fc:	83 5b       	subi	r24, 0xB3	; 179
    57fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5800:	20 e9       	ldi	r18, 0x90	; 144
    5802:	31 e0       	ldi	r19, 0x01	; 1
    5804:	fc 01       	movw	r30, r24
    5806:	31 83       	std	Z+1, r19	; 0x01
    5808:	20 83       	st	Z, r18
    580a:	ce 01       	movw	r24, r28
    580c:	83 5b       	subi	r24, 0xB3	; 179
    580e:	9f 4f       	sbci	r25, 0xFF	; 255
    5810:	fc 01       	movw	r30, r24
    5812:	80 81       	ld	r24, Z
    5814:	91 81       	ldd	r25, Z+1	; 0x01
    5816:	01 97       	sbiw	r24, 0x01	; 1
    5818:	f1 f7       	brne	.-4      	; 0x5816 <rotateStepper_4+0xda2>
    581a:	9e 01       	movw	r18, r28
    581c:	23 5b       	subi	r18, 0xB3	; 179
    581e:	3f 4f       	sbci	r19, 0xFF	; 255
    5820:	f9 01       	movw	r30, r18
    5822:	91 83       	std	Z+1, r25	; 0x01
    5824:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5826:	ce 01       	movw	r24, r28
    5828:	85 5b       	subi	r24, 0xB5	; 181
    582a:	9f 4f       	sbci	r25, 0xFF	; 255
    582c:	9e 01       	movw	r18, r28
    582e:	25 5b       	subi	r18, 0xB5	; 181
    5830:	3f 4f       	sbci	r19, 0xFF	; 255
    5832:	f9 01       	movw	r30, r18
    5834:	20 81       	ld	r18, Z
    5836:	31 81       	ldd	r19, Z+1	; 0x01
    5838:	21 50       	subi	r18, 0x01	; 1
    583a:	31 09       	sbc	r19, r1
    583c:	fc 01       	movw	r30, r24
    583e:	31 83       	std	Z+1, r19	; 0x01
    5840:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5842:	ce 01       	movw	r24, r28
    5844:	85 5b       	subi	r24, 0xB5	; 181
    5846:	9f 4f       	sbci	r25, 0xFF	; 255
    5848:	fc 01       	movw	r30, r24
    584a:	80 81       	ld	r24, Z
    584c:	91 81       	ldd	r25, Z+1	; 0x01
    584e:	89 2b       	or	r24, r25
    5850:	a1 f6       	brne	.-88     	; 0x57fa <rotateStepper_4+0xd86>
    5852:	2c c0       	rjmp	.+88     	; 0x58ac <rotateStepper_4+0xe38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5854:	8e 01       	movw	r16, r28
    5856:	05 5b       	subi	r16, 0xB5	; 181
    5858:	1f 4f       	sbci	r17, 0xFF	; 255
    585a:	ce 01       	movw	r24, r28
    585c:	89 5b       	subi	r24, 0xB9	; 185
    585e:	9f 4f       	sbci	r25, 0xFF	; 255
    5860:	fc 01       	movw	r30, r24
    5862:	60 81       	ld	r22, Z
    5864:	71 81       	ldd	r23, Z+1	; 0x01
    5866:	82 81       	ldd	r24, Z+2	; 0x02
    5868:	93 81       	ldd	r25, Z+3	; 0x03
    586a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    586e:	dc 01       	movw	r26, r24
    5870:	cb 01       	movw	r24, r22
    5872:	f8 01       	movw	r30, r16
    5874:	91 83       	std	Z+1, r25	; 0x01
    5876:	80 83       	st	Z, r24
    5878:	ce 01       	movw	r24, r28
    587a:	81 5b       	subi	r24, 0xB1	; 177
    587c:	9f 4f       	sbci	r25, 0xFF	; 255
    587e:	9e 01       	movw	r18, r28
    5880:	25 5b       	subi	r18, 0xB5	; 181
    5882:	3f 4f       	sbci	r19, 0xFF	; 255
    5884:	f9 01       	movw	r30, r18
    5886:	20 81       	ld	r18, Z
    5888:	31 81       	ldd	r19, Z+1	; 0x01
    588a:	fc 01       	movw	r30, r24
    588c:	31 83       	std	Z+1, r19	; 0x01
    588e:	20 83       	st	Z, r18
    5890:	ce 01       	movw	r24, r28
    5892:	81 5b       	subi	r24, 0xB1	; 177
    5894:	9f 4f       	sbci	r25, 0xFF	; 255
    5896:	fc 01       	movw	r30, r24
    5898:	80 81       	ld	r24, Z
    589a:	91 81       	ldd	r25, Z+1	; 0x01
    589c:	01 97       	sbiw	r24, 0x01	; 1
    589e:	f1 f7       	brne	.-4      	; 0x589c <rotateStepper_4+0xe28>
    58a0:	9e 01       	movw	r18, r28
    58a2:	21 5b       	subi	r18, 0xB1	; 177
    58a4:	3f 4f       	sbci	r19, 0xFF	; 255
    58a6:	f9 01       	movw	r30, r18
    58a8:	91 83       	std	Z+1, r25	; 0x01
    58aa:	80 83       	st	Z, r24
	int period;
	period = 10;
	if (direction == 1)
	{
		/* Rotate  clockwise */
		for (int i = 0; i < 15; i++) // 108 degree cutting arm
    58ac:	89 81       	ldd	r24, Y+1	; 0x01
    58ae:	9a 81       	ldd	r25, Y+2	; 0x02
    58b0:	01 96       	adiw	r24, 0x01	; 1
    58b2:	9a 83       	std	Y+2, r25	; 0x02
    58b4:	89 83       	std	Y+1, r24	; 0x01
    58b6:	89 81       	ldd	r24, Y+1	; 0x01
    58b8:	9a 81       	ldd	r25, Y+2	; 0x02
    58ba:	0f 97       	sbiw	r24, 0x0f	; 15
    58bc:	0c f4       	brge	.+2      	; 0x58c0 <rotateStepper_4+0xe4c>
    58be:	fd c8       	rjmp	.-3590   	; 0x4aba <rotateStepper_4+0x46>
    58c0:	80 e0       	ldi	r24, 0x00	; 0
    58c2:	90 e0       	ldi	r25, 0x00	; 0
    58c4:	a0 e2       	ldi	r26, 0x20	; 32
    58c6:	b1 e4       	ldi	r27, 0x41	; 65
    58c8:	8f 83       	std	Y+7, r24	; 0x07
    58ca:	98 87       	std	Y+8, r25	; 0x08
    58cc:	a9 87       	std	Y+9, r26	; 0x09
    58ce:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    58d0:	8e 01       	movw	r16, r28
    58d2:	0f 55       	subi	r16, 0x5F	; 95
    58d4:	1f 4f       	sbci	r17, 0xFF	; 255
    58d6:	20 e0       	ldi	r18, 0x00	; 0
    58d8:	30 e0       	ldi	r19, 0x00	; 0
    58da:	4a e7       	ldi	r20, 0x7A	; 122
    58dc:	55 e4       	ldi	r21, 0x45	; 69
    58de:	6f 81       	ldd	r22, Y+7	; 0x07
    58e0:	78 85       	ldd	r23, Y+8	; 0x08
    58e2:	89 85       	ldd	r24, Y+9	; 0x09
    58e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    58e6:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    58ea:	dc 01       	movw	r26, r24
    58ec:	cb 01       	movw	r24, r22
    58ee:	f8 01       	movw	r30, r16
    58f0:	80 83       	st	Z, r24
    58f2:	91 83       	std	Z+1, r25	; 0x01
    58f4:	a2 83       	std	Z+2, r26	; 0x02
    58f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    58f8:	ce 01       	movw	r24, r28
    58fa:	8f 55       	subi	r24, 0x5F	; 95
    58fc:	9f 4f       	sbci	r25, 0xFF	; 255
    58fe:	20 e0       	ldi	r18, 0x00	; 0
    5900:	30 e0       	ldi	r19, 0x00	; 0
    5902:	40 e8       	ldi	r20, 0x80	; 128
    5904:	5f e3       	ldi	r21, 0x3F	; 63
    5906:	fc 01       	movw	r30, r24
    5908:	60 81       	ld	r22, Z
    590a:	71 81       	ldd	r23, Z+1	; 0x01
    590c:	82 81       	ldd	r24, Z+2	; 0x02
    590e:	93 81       	ldd	r25, Z+3	; 0x03
    5910:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    5914:	88 23       	and	r24, r24
    5916:	4c f4       	brge	.+18     	; 0x592a <rotateStepper_4+0xeb6>
		__ticks = 1;
    5918:	ce 01       	movw	r24, r28
    591a:	8b 55       	subi	r24, 0x5B	; 91
    591c:	9f 4f       	sbci	r25, 0xFF	; 255
    591e:	21 e0       	ldi	r18, 0x01	; 1
    5920:	30 e0       	ldi	r19, 0x00	; 0
    5922:	fc 01       	movw	r30, r24
    5924:	31 83       	std	Z+1, r19	; 0x01
    5926:	20 83       	st	Z, r18
    5928:	69 c0       	rjmp	.+210    	; 0x59fc <rotateStepper_4+0xf88>
	else if (__tmp > 65535)
    592a:	ce 01       	movw	r24, r28
    592c:	8f 55       	subi	r24, 0x5F	; 95
    592e:	9f 4f       	sbci	r25, 0xFF	; 255
    5930:	20 e0       	ldi	r18, 0x00	; 0
    5932:	3f ef       	ldi	r19, 0xFF	; 255
    5934:	4f e7       	ldi	r20, 0x7F	; 127
    5936:	57 e4       	ldi	r21, 0x47	; 71
    5938:	fc 01       	movw	r30, r24
    593a:	60 81       	ld	r22, Z
    593c:	71 81       	ldd	r23, Z+1	; 0x01
    593e:	82 81       	ldd	r24, Z+2	; 0x02
    5940:	93 81       	ldd	r25, Z+3	; 0x03
    5942:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    5946:	18 16       	cp	r1, r24
    5948:	0c f0       	brlt	.+2      	; 0x594c <rotateStepper_4+0xed8>
    594a:	46 c0       	rjmp	.+140    	; 0x59d8 <rotateStepper_4+0xf64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    594c:	20 e0       	ldi	r18, 0x00	; 0
    594e:	30 e0       	ldi	r19, 0x00	; 0
    5950:	40 e2       	ldi	r20, 0x20	; 32
    5952:	51 e4       	ldi	r21, 0x41	; 65
    5954:	6f 81       	ldd	r22, Y+7	; 0x07
    5956:	78 85       	ldd	r23, Y+8	; 0x08
    5958:	89 85       	ldd	r24, Y+9	; 0x09
    595a:	9a 85       	ldd	r25, Y+10	; 0x0a
    595c:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    5960:	dc 01       	movw	r26, r24
    5962:	cb 01       	movw	r24, r22
    5964:	8e 01       	movw	r16, r28
    5966:	0b 55       	subi	r16, 0x5B	; 91
    5968:	1f 4f       	sbci	r17, 0xFF	; 255
    596a:	bc 01       	movw	r22, r24
    596c:	cd 01       	movw	r24, r26
    596e:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    5972:	dc 01       	movw	r26, r24
    5974:	cb 01       	movw	r24, r22
    5976:	f8 01       	movw	r30, r16
    5978:	91 83       	std	Z+1, r25	; 0x01
    597a:	80 83       	st	Z, r24
    597c:	24 c0       	rjmp	.+72     	; 0x59c6 <rotateStepper_4+0xf52>
    597e:	ce 01       	movw	r24, r28
    5980:	89 55       	subi	r24, 0x59	; 89
    5982:	9f 4f       	sbci	r25, 0xFF	; 255
    5984:	20 e9       	ldi	r18, 0x90	; 144
    5986:	31 e0       	ldi	r19, 0x01	; 1
    5988:	fc 01       	movw	r30, r24
    598a:	31 83       	std	Z+1, r19	; 0x01
    598c:	20 83       	st	Z, r18
    598e:	ce 01       	movw	r24, r28
    5990:	89 55       	subi	r24, 0x59	; 89
    5992:	9f 4f       	sbci	r25, 0xFF	; 255
    5994:	fc 01       	movw	r30, r24
    5996:	80 81       	ld	r24, Z
    5998:	91 81       	ldd	r25, Z+1	; 0x01
    599a:	01 97       	sbiw	r24, 0x01	; 1
    599c:	f1 f7       	brne	.-4      	; 0x599a <rotateStepper_4+0xf26>
    599e:	9e 01       	movw	r18, r28
    59a0:	29 55       	subi	r18, 0x59	; 89
    59a2:	3f 4f       	sbci	r19, 0xFF	; 255
    59a4:	f9 01       	movw	r30, r18
    59a6:	91 83       	std	Z+1, r25	; 0x01
    59a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59aa:	ce 01       	movw	r24, r28
    59ac:	8b 55       	subi	r24, 0x5B	; 91
    59ae:	9f 4f       	sbci	r25, 0xFF	; 255
    59b0:	9e 01       	movw	r18, r28
    59b2:	2b 55       	subi	r18, 0x5B	; 91
    59b4:	3f 4f       	sbci	r19, 0xFF	; 255
    59b6:	f9 01       	movw	r30, r18
    59b8:	20 81       	ld	r18, Z
    59ba:	31 81       	ldd	r19, Z+1	; 0x01
    59bc:	21 50       	subi	r18, 0x01	; 1
    59be:	31 09       	sbc	r19, r1
    59c0:	fc 01       	movw	r30, r24
    59c2:	31 83       	std	Z+1, r19	; 0x01
    59c4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59c6:	ce 01       	movw	r24, r28
    59c8:	8b 55       	subi	r24, 0x5B	; 91
    59ca:	9f 4f       	sbci	r25, 0xFF	; 255
    59cc:	fc 01       	movw	r30, r24
    59ce:	80 81       	ld	r24, Z
    59d0:	91 81       	ldd	r25, Z+1	; 0x01
    59d2:	89 2b       	or	r24, r25
    59d4:	a1 f6       	brne	.-88     	; 0x597e <rotateStepper_4+0xf0a>
			_delay_ms(period);
		}

		_delay_ms(10);
	}
    59d6:	d5 c4       	rjmp	.+2474   	; 0x6382 <rotateStepper_4+0x190e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59d8:	8e 01       	movw	r16, r28
    59da:	0b 55       	subi	r16, 0x5B	; 91
    59dc:	1f 4f       	sbci	r17, 0xFF	; 255
    59de:	ce 01       	movw	r24, r28
    59e0:	8f 55       	subi	r24, 0x5F	; 95
    59e2:	9f 4f       	sbci	r25, 0xFF	; 255
    59e4:	fc 01       	movw	r30, r24
    59e6:	60 81       	ld	r22, Z
    59e8:	71 81       	ldd	r23, Z+1	; 0x01
    59ea:	82 81       	ldd	r24, Z+2	; 0x02
    59ec:	93 81       	ldd	r25, Z+3	; 0x03
    59ee:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    59f2:	dc 01       	movw	r26, r24
    59f4:	cb 01       	movw	r24, r22
    59f6:	f8 01       	movw	r30, r16
    59f8:	91 83       	std	Z+1, r25	; 0x01
    59fa:	80 83       	st	Z, r24
    59fc:	ce 01       	movw	r24, r28
    59fe:	87 55       	subi	r24, 0x57	; 87
    5a00:	9f 4f       	sbci	r25, 0xFF	; 255
    5a02:	9e 01       	movw	r18, r28
    5a04:	2b 55       	subi	r18, 0x5B	; 91
    5a06:	3f 4f       	sbci	r19, 0xFF	; 255
    5a08:	f9 01       	movw	r30, r18
    5a0a:	20 81       	ld	r18, Z
    5a0c:	31 81       	ldd	r19, Z+1	; 0x01
    5a0e:	fc 01       	movw	r30, r24
    5a10:	31 83       	std	Z+1, r19	; 0x01
    5a12:	20 83       	st	Z, r18
    5a14:	ce 01       	movw	r24, r28
    5a16:	87 55       	subi	r24, 0x57	; 87
    5a18:	9f 4f       	sbci	r25, 0xFF	; 255
    5a1a:	fc 01       	movw	r30, r24
    5a1c:	80 81       	ld	r24, Z
    5a1e:	91 81       	ldd	r25, Z+1	; 0x01
    5a20:	01 97       	sbiw	r24, 0x01	; 1
    5a22:	f1 f7       	brne	.-4      	; 0x5a20 <rotateStepper_4+0xfac>
    5a24:	9e 01       	movw	r18, r28
    5a26:	27 55       	subi	r18, 0x57	; 87
    5a28:	3f 4f       	sbci	r19, 0xFF	; 255
    5a2a:	f9 01       	movw	r30, r18
    5a2c:	91 83       	std	Z+1, r25	; 0x01
    5a2e:	80 83       	st	Z, r24
    5a30:	a8 c4       	rjmp	.+2384   	; 0x6382 <rotateStepper_4+0x190e>
		_delay_ms(10);
	}
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < 15; i++)
    5a32:	1c 82       	std	Y+4, r1	; 0x04
    5a34:	1b 82       	std	Y+3, r1	; 0x03
    5a36:	e8 c3       	rjmp	.+2000   	; 0x6208 <rotateStepper_4+0x1794>
		{
			PORTC = 0x30;
    5a38:	85 e3       	ldi	r24, 0x35	; 53
    5a3a:	90 e0       	ldi	r25, 0x00	; 0
    5a3c:	20 e3       	ldi	r18, 0x30	; 48
    5a3e:	fc 01       	movw	r30, r24
    5a40:	20 83       	st	Z, r18
			_delay_ms(period);
    5a42:	8d 81       	ldd	r24, Y+5	; 0x05
    5a44:	9e 81       	ldd	r25, Y+6	; 0x06
    5a46:	09 2e       	mov	r0, r25
    5a48:	00 0c       	add	r0, r0
    5a4a:	aa 0b       	sbc	r26, r26
    5a4c:	bb 0b       	sbc	r27, r27
    5a4e:	bc 01       	movw	r22, r24
    5a50:	cd 01       	movw	r24, r26
    5a52:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    5a56:	dc 01       	movw	r26, r24
    5a58:	cb 01       	movw	r24, r22
    5a5a:	8b ab       	std	Y+51, r24	; 0x33
    5a5c:	9c ab       	std	Y+52, r25	; 0x34
    5a5e:	ad ab       	std	Y+53, r26	; 0x35
    5a60:	be ab       	std	Y+54, r27	; 0x36

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5a62:	8e 01       	movw	r16, r28
    5a64:	0d 52       	subi	r16, 0x2D	; 45
    5a66:	1f 4f       	sbci	r17, 0xFF	; 255
    5a68:	20 e0       	ldi	r18, 0x00	; 0
    5a6a:	30 e0       	ldi	r19, 0x00	; 0
    5a6c:	4a e7       	ldi	r20, 0x7A	; 122
    5a6e:	55 e4       	ldi	r21, 0x45	; 69
    5a70:	6b a9       	ldd	r22, Y+51	; 0x33
    5a72:	7c a9       	ldd	r23, Y+52	; 0x34
    5a74:	8d a9       	ldd	r24, Y+53	; 0x35
    5a76:	9e a9       	ldd	r25, Y+54	; 0x36
    5a78:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    5a7c:	dc 01       	movw	r26, r24
    5a7e:	cb 01       	movw	r24, r22
    5a80:	f8 01       	movw	r30, r16
    5a82:	80 83       	st	Z, r24
    5a84:	91 83       	std	Z+1, r25	; 0x01
    5a86:	a2 83       	std	Z+2, r26	; 0x02
    5a88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a8a:	ce 01       	movw	r24, r28
    5a8c:	8d 52       	subi	r24, 0x2D	; 45
    5a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a90:	20 e0       	ldi	r18, 0x00	; 0
    5a92:	30 e0       	ldi	r19, 0x00	; 0
    5a94:	40 e8       	ldi	r20, 0x80	; 128
    5a96:	5f e3       	ldi	r21, 0x3F	; 63
    5a98:	fc 01       	movw	r30, r24
    5a9a:	60 81       	ld	r22, Z
    5a9c:	71 81       	ldd	r23, Z+1	; 0x01
    5a9e:	82 81       	ldd	r24, Z+2	; 0x02
    5aa0:	93 81       	ldd	r25, Z+3	; 0x03
    5aa2:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    5aa6:	88 23       	and	r24, r24
    5aa8:	4c f4       	brge	.+18     	; 0x5abc <rotateStepper_4+0x1048>
		__ticks = 1;
    5aaa:	ce 01       	movw	r24, r28
    5aac:	89 52       	subi	r24, 0x29	; 41
    5aae:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab0:	21 e0       	ldi	r18, 0x01	; 1
    5ab2:	30 e0       	ldi	r19, 0x00	; 0
    5ab4:	fc 01       	movw	r30, r24
    5ab6:	31 83       	std	Z+1, r19	; 0x01
    5ab8:	20 83       	st	Z, r18
    5aba:	69 c0       	rjmp	.+210    	; 0x5b8e <rotateStepper_4+0x111a>
	else if (__tmp > 65535)
    5abc:	ce 01       	movw	r24, r28
    5abe:	8d 52       	subi	r24, 0x2D	; 45
    5ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac2:	20 e0       	ldi	r18, 0x00	; 0
    5ac4:	3f ef       	ldi	r19, 0xFF	; 255
    5ac6:	4f e7       	ldi	r20, 0x7F	; 127
    5ac8:	57 e4       	ldi	r21, 0x47	; 71
    5aca:	fc 01       	movw	r30, r24
    5acc:	60 81       	ld	r22, Z
    5ace:	71 81       	ldd	r23, Z+1	; 0x01
    5ad0:	82 81       	ldd	r24, Z+2	; 0x02
    5ad2:	93 81       	ldd	r25, Z+3	; 0x03
    5ad4:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    5ad8:	18 16       	cp	r1, r24
    5ada:	0c f0       	brlt	.+2      	; 0x5ade <rotateStepper_4+0x106a>
    5adc:	46 c0       	rjmp	.+140    	; 0x5b6a <rotateStepper_4+0x10f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ade:	20 e0       	ldi	r18, 0x00	; 0
    5ae0:	30 e0       	ldi	r19, 0x00	; 0
    5ae2:	40 e2       	ldi	r20, 0x20	; 32
    5ae4:	51 e4       	ldi	r21, 0x41	; 65
    5ae6:	6b a9       	ldd	r22, Y+51	; 0x33
    5ae8:	7c a9       	ldd	r23, Y+52	; 0x34
    5aea:	8d a9       	ldd	r24, Y+53	; 0x35
    5aec:	9e a9       	ldd	r25, Y+54	; 0x36
    5aee:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    5af2:	dc 01       	movw	r26, r24
    5af4:	cb 01       	movw	r24, r22
    5af6:	8e 01       	movw	r16, r28
    5af8:	09 52       	subi	r16, 0x29	; 41
    5afa:	1f 4f       	sbci	r17, 0xFF	; 255
    5afc:	bc 01       	movw	r22, r24
    5afe:	cd 01       	movw	r24, r26
    5b00:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    5b04:	dc 01       	movw	r26, r24
    5b06:	cb 01       	movw	r24, r22
    5b08:	f8 01       	movw	r30, r16
    5b0a:	91 83       	std	Z+1, r25	; 0x01
    5b0c:	80 83       	st	Z, r24
    5b0e:	24 c0       	rjmp	.+72     	; 0x5b58 <rotateStepper_4+0x10e4>
    5b10:	ce 01       	movw	r24, r28
    5b12:	87 52       	subi	r24, 0x27	; 39
    5b14:	9f 4f       	sbci	r25, 0xFF	; 255
    5b16:	20 e9       	ldi	r18, 0x90	; 144
    5b18:	31 e0       	ldi	r19, 0x01	; 1
    5b1a:	fc 01       	movw	r30, r24
    5b1c:	31 83       	std	Z+1, r19	; 0x01
    5b1e:	20 83       	st	Z, r18
    5b20:	ce 01       	movw	r24, r28
    5b22:	87 52       	subi	r24, 0x27	; 39
    5b24:	9f 4f       	sbci	r25, 0xFF	; 255
    5b26:	fc 01       	movw	r30, r24
    5b28:	80 81       	ld	r24, Z
    5b2a:	91 81       	ldd	r25, Z+1	; 0x01
    5b2c:	01 97       	sbiw	r24, 0x01	; 1
    5b2e:	f1 f7       	brne	.-4      	; 0x5b2c <rotateStepper_4+0x10b8>
    5b30:	9e 01       	movw	r18, r28
    5b32:	27 52       	subi	r18, 0x27	; 39
    5b34:	3f 4f       	sbci	r19, 0xFF	; 255
    5b36:	f9 01       	movw	r30, r18
    5b38:	91 83       	std	Z+1, r25	; 0x01
    5b3a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b3c:	ce 01       	movw	r24, r28
    5b3e:	89 52       	subi	r24, 0x29	; 41
    5b40:	9f 4f       	sbci	r25, 0xFF	; 255
    5b42:	9e 01       	movw	r18, r28
    5b44:	29 52       	subi	r18, 0x29	; 41
    5b46:	3f 4f       	sbci	r19, 0xFF	; 255
    5b48:	f9 01       	movw	r30, r18
    5b4a:	20 81       	ld	r18, Z
    5b4c:	31 81       	ldd	r19, Z+1	; 0x01
    5b4e:	21 50       	subi	r18, 0x01	; 1
    5b50:	31 09       	sbc	r19, r1
    5b52:	fc 01       	movw	r30, r24
    5b54:	31 83       	std	Z+1, r19	; 0x01
    5b56:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b58:	ce 01       	movw	r24, r28
    5b5a:	89 52       	subi	r24, 0x29	; 41
    5b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b5e:	fc 01       	movw	r30, r24
    5b60:	80 81       	ld	r24, Z
    5b62:	91 81       	ldd	r25, Z+1	; 0x01
    5b64:	89 2b       	or	r24, r25
    5b66:	a1 f6       	brne	.-88     	; 0x5b10 <rotateStepper_4+0x109c>
    5b68:	2c c0       	rjmp	.+88     	; 0x5bc2 <rotateStepper_4+0x114e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b6a:	8e 01       	movw	r16, r28
    5b6c:	09 52       	subi	r16, 0x29	; 41
    5b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    5b70:	ce 01       	movw	r24, r28
    5b72:	8d 52       	subi	r24, 0x2D	; 45
    5b74:	9f 4f       	sbci	r25, 0xFF	; 255
    5b76:	fc 01       	movw	r30, r24
    5b78:	60 81       	ld	r22, Z
    5b7a:	71 81       	ldd	r23, Z+1	; 0x01
    5b7c:	82 81       	ldd	r24, Z+2	; 0x02
    5b7e:	93 81       	ldd	r25, Z+3	; 0x03
    5b80:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    5b84:	dc 01       	movw	r26, r24
    5b86:	cb 01       	movw	r24, r22
    5b88:	f8 01       	movw	r30, r16
    5b8a:	91 83       	std	Z+1, r25	; 0x01
    5b8c:	80 83       	st	Z, r24
    5b8e:	ce 01       	movw	r24, r28
    5b90:	85 52       	subi	r24, 0x25	; 37
    5b92:	9f 4f       	sbci	r25, 0xFF	; 255
    5b94:	9e 01       	movw	r18, r28
    5b96:	29 52       	subi	r18, 0x29	; 41
    5b98:	3f 4f       	sbci	r19, 0xFF	; 255
    5b9a:	f9 01       	movw	r30, r18
    5b9c:	20 81       	ld	r18, Z
    5b9e:	31 81       	ldd	r19, Z+1	; 0x01
    5ba0:	fc 01       	movw	r30, r24
    5ba2:	31 83       	std	Z+1, r19	; 0x01
    5ba4:	20 83       	st	Z, r18
    5ba6:	ce 01       	movw	r24, r28
    5ba8:	85 52       	subi	r24, 0x25	; 37
    5baa:	9f 4f       	sbci	r25, 0xFF	; 255
    5bac:	fc 01       	movw	r30, r24
    5bae:	80 81       	ld	r24, Z
    5bb0:	91 81       	ldd	r25, Z+1	; 0x01
    5bb2:	01 97       	sbiw	r24, 0x01	; 1
    5bb4:	f1 f7       	brne	.-4      	; 0x5bb2 <rotateStepper_4+0x113e>
    5bb6:	9e 01       	movw	r18, r28
    5bb8:	25 52       	subi	r18, 0x25	; 37
    5bba:	3f 4f       	sbci	r19, 0xFF	; 255
    5bbc:	f9 01       	movw	r30, r18
    5bbe:	91 83       	std	Z+1, r25	; 0x01
    5bc0:	80 83       	st	Z, r24
			PORTC = 0x90;
    5bc2:	85 e3       	ldi	r24, 0x35	; 53
    5bc4:	90 e0       	ldi	r25, 0x00	; 0
    5bc6:	20 e9       	ldi	r18, 0x90	; 144
    5bc8:	fc 01       	movw	r30, r24
    5bca:	20 83       	st	Z, r18
			_delay_ms(period);
    5bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    5bce:	9e 81       	ldd	r25, Y+6	; 0x06
    5bd0:	09 2e       	mov	r0, r25
    5bd2:	00 0c       	add	r0, r0
    5bd4:	aa 0b       	sbc	r26, r26
    5bd6:	bb 0b       	sbc	r27, r27
    5bd8:	bc 01       	movw	r22, r24
    5bda:	cd 01       	movw	r24, r26
    5bdc:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    5be0:	dc 01       	movw	r26, r24
    5be2:	cb 01       	movw	r24, r22
    5be4:	8f ab       	std	Y+55, r24	; 0x37
    5be6:	98 af       	std	Y+56, r25	; 0x38
    5be8:	a9 af       	std	Y+57, r26	; 0x39
    5bea:	ba af       	std	Y+58, r27	; 0x3a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5bec:	8e 01       	movw	r16, r28
    5bee:	07 53       	subi	r16, 0x37	; 55
    5bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    5bf2:	20 e0       	ldi	r18, 0x00	; 0
    5bf4:	30 e0       	ldi	r19, 0x00	; 0
    5bf6:	4a e7       	ldi	r20, 0x7A	; 122
    5bf8:	55 e4       	ldi	r21, 0x45	; 69
    5bfa:	6f a9       	ldd	r22, Y+55	; 0x37
    5bfc:	78 ad       	ldd	r23, Y+56	; 0x38
    5bfe:	89 ad       	ldd	r24, Y+57	; 0x39
    5c00:	9a ad       	ldd	r25, Y+58	; 0x3a
    5c02:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    5c06:	dc 01       	movw	r26, r24
    5c08:	cb 01       	movw	r24, r22
    5c0a:	f8 01       	movw	r30, r16
    5c0c:	80 83       	st	Z, r24
    5c0e:	91 83       	std	Z+1, r25	; 0x01
    5c10:	a2 83       	std	Z+2, r26	; 0x02
    5c12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c14:	ce 01       	movw	r24, r28
    5c16:	87 53       	subi	r24, 0x37	; 55
    5c18:	9f 4f       	sbci	r25, 0xFF	; 255
    5c1a:	20 e0       	ldi	r18, 0x00	; 0
    5c1c:	30 e0       	ldi	r19, 0x00	; 0
    5c1e:	40 e8       	ldi	r20, 0x80	; 128
    5c20:	5f e3       	ldi	r21, 0x3F	; 63
    5c22:	fc 01       	movw	r30, r24
    5c24:	60 81       	ld	r22, Z
    5c26:	71 81       	ldd	r23, Z+1	; 0x01
    5c28:	82 81       	ldd	r24, Z+2	; 0x02
    5c2a:	93 81       	ldd	r25, Z+3	; 0x03
    5c2c:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    5c30:	88 23       	and	r24, r24
    5c32:	4c f4       	brge	.+18     	; 0x5c46 <rotateStepper_4+0x11d2>
		__ticks = 1;
    5c34:	ce 01       	movw	r24, r28
    5c36:	83 53       	subi	r24, 0x33	; 51
    5c38:	9f 4f       	sbci	r25, 0xFF	; 255
    5c3a:	21 e0       	ldi	r18, 0x01	; 1
    5c3c:	30 e0       	ldi	r19, 0x00	; 0
    5c3e:	fc 01       	movw	r30, r24
    5c40:	31 83       	std	Z+1, r19	; 0x01
    5c42:	20 83       	st	Z, r18
    5c44:	69 c0       	rjmp	.+210    	; 0x5d18 <rotateStepper_4+0x12a4>
	else if (__tmp > 65535)
    5c46:	ce 01       	movw	r24, r28
    5c48:	87 53       	subi	r24, 0x37	; 55
    5c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c4c:	20 e0       	ldi	r18, 0x00	; 0
    5c4e:	3f ef       	ldi	r19, 0xFF	; 255
    5c50:	4f e7       	ldi	r20, 0x7F	; 127
    5c52:	57 e4       	ldi	r21, 0x47	; 71
    5c54:	fc 01       	movw	r30, r24
    5c56:	60 81       	ld	r22, Z
    5c58:	71 81       	ldd	r23, Z+1	; 0x01
    5c5a:	82 81       	ldd	r24, Z+2	; 0x02
    5c5c:	93 81       	ldd	r25, Z+3	; 0x03
    5c5e:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    5c62:	18 16       	cp	r1, r24
    5c64:	0c f0       	brlt	.+2      	; 0x5c68 <rotateStepper_4+0x11f4>
    5c66:	46 c0       	rjmp	.+140    	; 0x5cf4 <rotateStepper_4+0x1280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c68:	20 e0       	ldi	r18, 0x00	; 0
    5c6a:	30 e0       	ldi	r19, 0x00	; 0
    5c6c:	40 e2       	ldi	r20, 0x20	; 32
    5c6e:	51 e4       	ldi	r21, 0x41	; 65
    5c70:	6f a9       	ldd	r22, Y+55	; 0x37
    5c72:	78 ad       	ldd	r23, Y+56	; 0x38
    5c74:	89 ad       	ldd	r24, Y+57	; 0x39
    5c76:	9a ad       	ldd	r25, Y+58	; 0x3a
    5c78:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    5c7c:	dc 01       	movw	r26, r24
    5c7e:	cb 01       	movw	r24, r22
    5c80:	8e 01       	movw	r16, r28
    5c82:	03 53       	subi	r16, 0x33	; 51
    5c84:	1f 4f       	sbci	r17, 0xFF	; 255
    5c86:	bc 01       	movw	r22, r24
    5c88:	cd 01       	movw	r24, r26
    5c8a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    5c8e:	dc 01       	movw	r26, r24
    5c90:	cb 01       	movw	r24, r22
    5c92:	f8 01       	movw	r30, r16
    5c94:	91 83       	std	Z+1, r25	; 0x01
    5c96:	80 83       	st	Z, r24
    5c98:	24 c0       	rjmp	.+72     	; 0x5ce2 <rotateStepper_4+0x126e>
    5c9a:	ce 01       	movw	r24, r28
    5c9c:	81 53       	subi	r24, 0x31	; 49
    5c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    5ca0:	20 e9       	ldi	r18, 0x90	; 144
    5ca2:	31 e0       	ldi	r19, 0x01	; 1
    5ca4:	fc 01       	movw	r30, r24
    5ca6:	31 83       	std	Z+1, r19	; 0x01
    5ca8:	20 83       	st	Z, r18
    5caa:	ce 01       	movw	r24, r28
    5cac:	81 53       	subi	r24, 0x31	; 49
    5cae:	9f 4f       	sbci	r25, 0xFF	; 255
    5cb0:	fc 01       	movw	r30, r24
    5cb2:	80 81       	ld	r24, Z
    5cb4:	91 81       	ldd	r25, Z+1	; 0x01
    5cb6:	01 97       	sbiw	r24, 0x01	; 1
    5cb8:	f1 f7       	brne	.-4      	; 0x5cb6 <rotateStepper_4+0x1242>
    5cba:	9e 01       	movw	r18, r28
    5cbc:	21 53       	subi	r18, 0x31	; 49
    5cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    5cc0:	f9 01       	movw	r30, r18
    5cc2:	91 83       	std	Z+1, r25	; 0x01
    5cc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cc6:	ce 01       	movw	r24, r28
    5cc8:	83 53       	subi	r24, 0x33	; 51
    5cca:	9f 4f       	sbci	r25, 0xFF	; 255
    5ccc:	9e 01       	movw	r18, r28
    5cce:	23 53       	subi	r18, 0x33	; 51
    5cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    5cd2:	f9 01       	movw	r30, r18
    5cd4:	20 81       	ld	r18, Z
    5cd6:	31 81       	ldd	r19, Z+1	; 0x01
    5cd8:	21 50       	subi	r18, 0x01	; 1
    5cda:	31 09       	sbc	r19, r1
    5cdc:	fc 01       	movw	r30, r24
    5cde:	31 83       	std	Z+1, r19	; 0x01
    5ce0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ce2:	ce 01       	movw	r24, r28
    5ce4:	83 53       	subi	r24, 0x33	; 51
    5ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce8:	fc 01       	movw	r30, r24
    5cea:	80 81       	ld	r24, Z
    5cec:	91 81       	ldd	r25, Z+1	; 0x01
    5cee:	89 2b       	or	r24, r25
    5cf0:	a1 f6       	brne	.-88     	; 0x5c9a <rotateStepper_4+0x1226>
    5cf2:	2c c0       	rjmp	.+88     	; 0x5d4c <rotateStepper_4+0x12d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cf4:	8e 01       	movw	r16, r28
    5cf6:	03 53       	subi	r16, 0x33	; 51
    5cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    5cfa:	ce 01       	movw	r24, r28
    5cfc:	87 53       	subi	r24, 0x37	; 55
    5cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    5d00:	fc 01       	movw	r30, r24
    5d02:	60 81       	ld	r22, Z
    5d04:	71 81       	ldd	r23, Z+1	; 0x01
    5d06:	82 81       	ldd	r24, Z+2	; 0x02
    5d08:	93 81       	ldd	r25, Z+3	; 0x03
    5d0a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    5d0e:	dc 01       	movw	r26, r24
    5d10:	cb 01       	movw	r24, r22
    5d12:	f8 01       	movw	r30, r16
    5d14:	91 83       	std	Z+1, r25	; 0x01
    5d16:	80 83       	st	Z, r24
    5d18:	ce 01       	movw	r24, r28
    5d1a:	8f 52       	subi	r24, 0x2F	; 47
    5d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d1e:	9e 01       	movw	r18, r28
    5d20:	23 53       	subi	r18, 0x33	; 51
    5d22:	3f 4f       	sbci	r19, 0xFF	; 255
    5d24:	f9 01       	movw	r30, r18
    5d26:	20 81       	ld	r18, Z
    5d28:	31 81       	ldd	r19, Z+1	; 0x01
    5d2a:	fc 01       	movw	r30, r24
    5d2c:	31 83       	std	Z+1, r19	; 0x01
    5d2e:	20 83       	st	Z, r18
    5d30:	ce 01       	movw	r24, r28
    5d32:	8f 52       	subi	r24, 0x2F	; 47
    5d34:	9f 4f       	sbci	r25, 0xFF	; 255
    5d36:	fc 01       	movw	r30, r24
    5d38:	80 81       	ld	r24, Z
    5d3a:	91 81       	ldd	r25, Z+1	; 0x01
    5d3c:	01 97       	sbiw	r24, 0x01	; 1
    5d3e:	f1 f7       	brne	.-4      	; 0x5d3c <rotateStepper_4+0x12c8>
    5d40:	9e 01       	movw	r18, r28
    5d42:	2f 52       	subi	r18, 0x2F	; 47
    5d44:	3f 4f       	sbci	r19, 0xFF	; 255
    5d46:	f9 01       	movw	r30, r18
    5d48:	91 83       	std	Z+1, r25	; 0x01
    5d4a:	80 83       	st	Z, r24
			PORTC = 0xc0;
    5d4c:	85 e3       	ldi	r24, 0x35	; 53
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	20 ec       	ldi	r18, 0xC0	; 192
    5d52:	fc 01       	movw	r30, r24
    5d54:	20 83       	st	Z, r18
			_delay_ms(period);
    5d56:	8d 81       	ldd	r24, Y+5	; 0x05
    5d58:	9e 81       	ldd	r25, Y+6	; 0x06
    5d5a:	09 2e       	mov	r0, r25
    5d5c:	00 0c       	add	r0, r0
    5d5e:	aa 0b       	sbc	r26, r26
    5d60:	bb 0b       	sbc	r27, r27
    5d62:	bc 01       	movw	r22, r24
    5d64:	cd 01       	movw	r24, r26
    5d66:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    5d6a:	dc 01       	movw	r26, r24
    5d6c:	cb 01       	movw	r24, r22
    5d6e:	8b af       	std	Y+59, r24	; 0x3b
    5d70:	9c af       	std	Y+60, r25	; 0x3c
    5d72:	ad af       	std	Y+61, r26	; 0x3d
    5d74:	be af       	std	Y+62, r27	; 0x3e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5d76:	8e 01       	movw	r16, r28
    5d78:	01 54       	subi	r16, 0x41	; 65
    5d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d7c:	20 e0       	ldi	r18, 0x00	; 0
    5d7e:	30 e0       	ldi	r19, 0x00	; 0
    5d80:	4a e7       	ldi	r20, 0x7A	; 122
    5d82:	55 e4       	ldi	r21, 0x45	; 69
    5d84:	6b ad       	ldd	r22, Y+59	; 0x3b
    5d86:	7c ad       	ldd	r23, Y+60	; 0x3c
    5d88:	8d ad       	ldd	r24, Y+61	; 0x3d
    5d8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    5d8c:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    5d90:	dc 01       	movw	r26, r24
    5d92:	cb 01       	movw	r24, r22
    5d94:	f8 01       	movw	r30, r16
    5d96:	80 83       	st	Z, r24
    5d98:	91 83       	std	Z+1, r25	; 0x01
    5d9a:	a2 83       	std	Z+2, r26	; 0x02
    5d9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5d9e:	ce 01       	movw	r24, r28
    5da0:	81 54       	subi	r24, 0x41	; 65
    5da2:	9f 4f       	sbci	r25, 0xFF	; 255
    5da4:	20 e0       	ldi	r18, 0x00	; 0
    5da6:	30 e0       	ldi	r19, 0x00	; 0
    5da8:	40 e8       	ldi	r20, 0x80	; 128
    5daa:	5f e3       	ldi	r21, 0x3F	; 63
    5dac:	fc 01       	movw	r30, r24
    5dae:	60 81       	ld	r22, Z
    5db0:	71 81       	ldd	r23, Z+1	; 0x01
    5db2:	82 81       	ldd	r24, Z+2	; 0x02
    5db4:	93 81       	ldd	r25, Z+3	; 0x03
    5db6:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    5dba:	88 23       	and	r24, r24
    5dbc:	4c f4       	brge	.+18     	; 0x5dd0 <rotateStepper_4+0x135c>
		__ticks = 1;
    5dbe:	ce 01       	movw	r24, r28
    5dc0:	8d 53       	subi	r24, 0x3D	; 61
    5dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    5dc4:	21 e0       	ldi	r18, 0x01	; 1
    5dc6:	30 e0       	ldi	r19, 0x00	; 0
    5dc8:	fc 01       	movw	r30, r24
    5dca:	31 83       	std	Z+1, r19	; 0x01
    5dcc:	20 83       	st	Z, r18
    5dce:	69 c0       	rjmp	.+210    	; 0x5ea2 <rotateStepper_4+0x142e>
	else if (__tmp > 65535)
    5dd0:	ce 01       	movw	r24, r28
    5dd2:	81 54       	subi	r24, 0x41	; 65
    5dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    5dd6:	20 e0       	ldi	r18, 0x00	; 0
    5dd8:	3f ef       	ldi	r19, 0xFF	; 255
    5dda:	4f e7       	ldi	r20, 0x7F	; 127
    5ddc:	57 e4       	ldi	r21, 0x47	; 71
    5dde:	fc 01       	movw	r30, r24
    5de0:	60 81       	ld	r22, Z
    5de2:	71 81       	ldd	r23, Z+1	; 0x01
    5de4:	82 81       	ldd	r24, Z+2	; 0x02
    5de6:	93 81       	ldd	r25, Z+3	; 0x03
    5de8:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    5dec:	18 16       	cp	r1, r24
    5dee:	0c f0       	brlt	.+2      	; 0x5df2 <rotateStepper_4+0x137e>
    5df0:	46 c0       	rjmp	.+140    	; 0x5e7e <rotateStepper_4+0x140a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5df2:	20 e0       	ldi	r18, 0x00	; 0
    5df4:	30 e0       	ldi	r19, 0x00	; 0
    5df6:	40 e2       	ldi	r20, 0x20	; 32
    5df8:	51 e4       	ldi	r21, 0x41	; 65
    5dfa:	6b ad       	ldd	r22, Y+59	; 0x3b
    5dfc:	7c ad       	ldd	r23, Y+60	; 0x3c
    5dfe:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e00:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e02:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    5e06:	dc 01       	movw	r26, r24
    5e08:	cb 01       	movw	r24, r22
    5e0a:	8e 01       	movw	r16, r28
    5e0c:	0d 53       	subi	r16, 0x3D	; 61
    5e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    5e10:	bc 01       	movw	r22, r24
    5e12:	cd 01       	movw	r24, r26
    5e14:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    5e18:	dc 01       	movw	r26, r24
    5e1a:	cb 01       	movw	r24, r22
    5e1c:	f8 01       	movw	r30, r16
    5e1e:	91 83       	std	Z+1, r25	; 0x01
    5e20:	80 83       	st	Z, r24
    5e22:	24 c0       	rjmp	.+72     	; 0x5e6c <rotateStepper_4+0x13f8>
    5e24:	ce 01       	movw	r24, r28
    5e26:	8b 53       	subi	r24, 0x3B	; 59
    5e28:	9f 4f       	sbci	r25, 0xFF	; 255
    5e2a:	20 e9       	ldi	r18, 0x90	; 144
    5e2c:	31 e0       	ldi	r19, 0x01	; 1
    5e2e:	fc 01       	movw	r30, r24
    5e30:	31 83       	std	Z+1, r19	; 0x01
    5e32:	20 83       	st	Z, r18
    5e34:	ce 01       	movw	r24, r28
    5e36:	8b 53       	subi	r24, 0x3B	; 59
    5e38:	9f 4f       	sbci	r25, 0xFF	; 255
    5e3a:	fc 01       	movw	r30, r24
    5e3c:	80 81       	ld	r24, Z
    5e3e:	91 81       	ldd	r25, Z+1	; 0x01
    5e40:	01 97       	sbiw	r24, 0x01	; 1
    5e42:	f1 f7       	brne	.-4      	; 0x5e40 <rotateStepper_4+0x13cc>
    5e44:	9e 01       	movw	r18, r28
    5e46:	2b 53       	subi	r18, 0x3B	; 59
    5e48:	3f 4f       	sbci	r19, 0xFF	; 255
    5e4a:	f9 01       	movw	r30, r18
    5e4c:	91 83       	std	Z+1, r25	; 0x01
    5e4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e50:	ce 01       	movw	r24, r28
    5e52:	8d 53       	subi	r24, 0x3D	; 61
    5e54:	9f 4f       	sbci	r25, 0xFF	; 255
    5e56:	9e 01       	movw	r18, r28
    5e58:	2d 53       	subi	r18, 0x3D	; 61
    5e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    5e5c:	f9 01       	movw	r30, r18
    5e5e:	20 81       	ld	r18, Z
    5e60:	31 81       	ldd	r19, Z+1	; 0x01
    5e62:	21 50       	subi	r18, 0x01	; 1
    5e64:	31 09       	sbc	r19, r1
    5e66:	fc 01       	movw	r30, r24
    5e68:	31 83       	std	Z+1, r19	; 0x01
    5e6a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e6c:	ce 01       	movw	r24, r28
    5e6e:	8d 53       	subi	r24, 0x3D	; 61
    5e70:	9f 4f       	sbci	r25, 0xFF	; 255
    5e72:	fc 01       	movw	r30, r24
    5e74:	80 81       	ld	r24, Z
    5e76:	91 81       	ldd	r25, Z+1	; 0x01
    5e78:	89 2b       	or	r24, r25
    5e7a:	a1 f6       	brne	.-88     	; 0x5e24 <rotateStepper_4+0x13b0>
    5e7c:	2c c0       	rjmp	.+88     	; 0x5ed6 <rotateStepper_4+0x1462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e7e:	8e 01       	movw	r16, r28
    5e80:	0d 53       	subi	r16, 0x3D	; 61
    5e82:	1f 4f       	sbci	r17, 0xFF	; 255
    5e84:	ce 01       	movw	r24, r28
    5e86:	81 54       	subi	r24, 0x41	; 65
    5e88:	9f 4f       	sbci	r25, 0xFF	; 255
    5e8a:	fc 01       	movw	r30, r24
    5e8c:	60 81       	ld	r22, Z
    5e8e:	71 81       	ldd	r23, Z+1	; 0x01
    5e90:	82 81       	ldd	r24, Z+2	; 0x02
    5e92:	93 81       	ldd	r25, Z+3	; 0x03
    5e94:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    5e98:	dc 01       	movw	r26, r24
    5e9a:	cb 01       	movw	r24, r22
    5e9c:	f8 01       	movw	r30, r16
    5e9e:	91 83       	std	Z+1, r25	; 0x01
    5ea0:	80 83       	st	Z, r24
    5ea2:	ce 01       	movw	r24, r28
    5ea4:	89 53       	subi	r24, 0x39	; 57
    5ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ea8:	9e 01       	movw	r18, r28
    5eaa:	2d 53       	subi	r18, 0x3D	; 61
    5eac:	3f 4f       	sbci	r19, 0xFF	; 255
    5eae:	f9 01       	movw	r30, r18
    5eb0:	20 81       	ld	r18, Z
    5eb2:	31 81       	ldd	r19, Z+1	; 0x01
    5eb4:	fc 01       	movw	r30, r24
    5eb6:	31 83       	std	Z+1, r19	; 0x01
    5eb8:	20 83       	st	Z, r18
    5eba:	ce 01       	movw	r24, r28
    5ebc:	89 53       	subi	r24, 0x39	; 57
    5ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    5ec0:	fc 01       	movw	r30, r24
    5ec2:	80 81       	ld	r24, Z
    5ec4:	91 81       	ldd	r25, Z+1	; 0x01
    5ec6:	01 97       	sbiw	r24, 0x01	; 1
    5ec8:	f1 f7       	brne	.-4      	; 0x5ec6 <rotateStepper_4+0x1452>
    5eca:	9e 01       	movw	r18, r28
    5ecc:	29 53       	subi	r18, 0x39	; 57
    5ece:	3f 4f       	sbci	r19, 0xFF	; 255
    5ed0:	f9 01       	movw	r30, r18
    5ed2:	91 83       	std	Z+1, r25	; 0x01
    5ed4:	80 83       	st	Z, r24
			PORTC = 0x60;
    5ed6:	85 e3       	ldi	r24, 0x35	; 53
    5ed8:	90 e0       	ldi	r25, 0x00	; 0
    5eda:	20 e6       	ldi	r18, 0x60	; 96
    5edc:	fc 01       	movw	r30, r24
    5ede:	20 83       	st	Z, r18
			_delay_ms(period);
    5ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    5ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    5ee4:	09 2e       	mov	r0, r25
    5ee6:	00 0c       	add	r0, r0
    5ee8:	aa 0b       	sbc	r26, r26
    5eea:	bb 0b       	sbc	r27, r27
    5eec:	bc 01       	movw	r22, r24
    5eee:	cd 01       	movw	r24, r26
    5ef0:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    5ef4:	dc 01       	movw	r26, r24
    5ef6:	cb 01       	movw	r24, r22
    5ef8:	9e 01       	movw	r18, r28
    5efa:	21 5c       	subi	r18, 0xC1	; 193
    5efc:	3f 4f       	sbci	r19, 0xFF	; 255
    5efe:	f9 01       	movw	r30, r18
    5f00:	80 83       	st	Z, r24
    5f02:	91 83       	std	Z+1, r25	; 0x01
    5f04:	a2 83       	std	Z+2, r26	; 0x02
    5f06:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5f08:	8e 01       	movw	r16, r28
    5f0a:	0b 54       	subi	r16, 0x4B	; 75
    5f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    5f0e:	ce 01       	movw	r24, r28
    5f10:	cf 96       	adiw	r24, 0x3f	; 63
    5f12:	20 e0       	ldi	r18, 0x00	; 0
    5f14:	30 e0       	ldi	r19, 0x00	; 0
    5f16:	4a e7       	ldi	r20, 0x7A	; 122
    5f18:	55 e4       	ldi	r21, 0x45	; 69
    5f1a:	fc 01       	movw	r30, r24
    5f1c:	60 81       	ld	r22, Z
    5f1e:	71 81       	ldd	r23, Z+1	; 0x01
    5f20:	82 81       	ldd	r24, Z+2	; 0x02
    5f22:	93 81       	ldd	r25, Z+3	; 0x03
    5f24:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    5f28:	dc 01       	movw	r26, r24
    5f2a:	cb 01       	movw	r24, r22
    5f2c:	f8 01       	movw	r30, r16
    5f2e:	80 83       	st	Z, r24
    5f30:	91 83       	std	Z+1, r25	; 0x01
    5f32:	a2 83       	std	Z+2, r26	; 0x02
    5f34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5f36:	ce 01       	movw	r24, r28
    5f38:	8b 54       	subi	r24, 0x4B	; 75
    5f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f3c:	20 e0       	ldi	r18, 0x00	; 0
    5f3e:	30 e0       	ldi	r19, 0x00	; 0
    5f40:	40 e8       	ldi	r20, 0x80	; 128
    5f42:	5f e3       	ldi	r21, 0x3F	; 63
    5f44:	fc 01       	movw	r30, r24
    5f46:	60 81       	ld	r22, Z
    5f48:	71 81       	ldd	r23, Z+1	; 0x01
    5f4a:	82 81       	ldd	r24, Z+2	; 0x02
    5f4c:	93 81       	ldd	r25, Z+3	; 0x03
    5f4e:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    5f52:	88 23       	and	r24, r24
    5f54:	4c f4       	brge	.+18     	; 0x5f68 <rotateStepper_4+0x14f4>
		__ticks = 1;
    5f56:	ce 01       	movw	r24, r28
    5f58:	87 54       	subi	r24, 0x47	; 71
    5f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f5c:	21 e0       	ldi	r18, 0x01	; 1
    5f5e:	30 e0       	ldi	r19, 0x00	; 0
    5f60:	fc 01       	movw	r30, r24
    5f62:	31 83       	std	Z+1, r19	; 0x01
    5f64:	20 83       	st	Z, r18
    5f66:	6c c0       	rjmp	.+216    	; 0x6040 <rotateStepper_4+0x15cc>
	else if (__tmp > 65535)
    5f68:	ce 01       	movw	r24, r28
    5f6a:	8b 54       	subi	r24, 0x4B	; 75
    5f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    5f6e:	20 e0       	ldi	r18, 0x00	; 0
    5f70:	3f ef       	ldi	r19, 0xFF	; 255
    5f72:	4f e7       	ldi	r20, 0x7F	; 127
    5f74:	57 e4       	ldi	r21, 0x47	; 71
    5f76:	fc 01       	movw	r30, r24
    5f78:	60 81       	ld	r22, Z
    5f7a:	71 81       	ldd	r23, Z+1	; 0x01
    5f7c:	82 81       	ldd	r24, Z+2	; 0x02
    5f7e:	93 81       	ldd	r25, Z+3	; 0x03
    5f80:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    5f84:	18 16       	cp	r1, r24
    5f86:	0c f0       	brlt	.+2      	; 0x5f8a <rotateStepper_4+0x1516>
    5f88:	49 c0       	rjmp	.+146    	; 0x601c <rotateStepper_4+0x15a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f8a:	ce 01       	movw	r24, r28
    5f8c:	cf 96       	adiw	r24, 0x3f	; 63
    5f8e:	20 e0       	ldi	r18, 0x00	; 0
    5f90:	30 e0       	ldi	r19, 0x00	; 0
    5f92:	40 e2       	ldi	r20, 0x20	; 32
    5f94:	51 e4       	ldi	r21, 0x41	; 65
    5f96:	fc 01       	movw	r30, r24
    5f98:	60 81       	ld	r22, Z
    5f9a:	71 81       	ldd	r23, Z+1	; 0x01
    5f9c:	82 81       	ldd	r24, Z+2	; 0x02
    5f9e:	93 81       	ldd	r25, Z+3	; 0x03
    5fa0:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    5fa4:	dc 01       	movw	r26, r24
    5fa6:	cb 01       	movw	r24, r22
    5fa8:	8e 01       	movw	r16, r28
    5faa:	07 54       	subi	r16, 0x47	; 71
    5fac:	1f 4f       	sbci	r17, 0xFF	; 255
    5fae:	bc 01       	movw	r22, r24
    5fb0:	cd 01       	movw	r24, r26
    5fb2:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    5fb6:	dc 01       	movw	r26, r24
    5fb8:	cb 01       	movw	r24, r22
    5fba:	f8 01       	movw	r30, r16
    5fbc:	91 83       	std	Z+1, r25	; 0x01
    5fbe:	80 83       	st	Z, r24
    5fc0:	24 c0       	rjmp	.+72     	; 0x600a <rotateStepper_4+0x1596>
    5fc2:	ce 01       	movw	r24, r28
    5fc4:	85 54       	subi	r24, 0x45	; 69
    5fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    5fc8:	20 e9       	ldi	r18, 0x90	; 144
    5fca:	31 e0       	ldi	r19, 0x01	; 1
    5fcc:	fc 01       	movw	r30, r24
    5fce:	31 83       	std	Z+1, r19	; 0x01
    5fd0:	20 83       	st	Z, r18
    5fd2:	ce 01       	movw	r24, r28
    5fd4:	85 54       	subi	r24, 0x45	; 69
    5fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    5fd8:	fc 01       	movw	r30, r24
    5fda:	80 81       	ld	r24, Z
    5fdc:	91 81       	ldd	r25, Z+1	; 0x01
    5fde:	01 97       	sbiw	r24, 0x01	; 1
    5fe0:	f1 f7       	brne	.-4      	; 0x5fde <rotateStepper_4+0x156a>
    5fe2:	9e 01       	movw	r18, r28
    5fe4:	25 54       	subi	r18, 0x45	; 69
    5fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    5fe8:	f9 01       	movw	r30, r18
    5fea:	91 83       	std	Z+1, r25	; 0x01
    5fec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fee:	ce 01       	movw	r24, r28
    5ff0:	87 54       	subi	r24, 0x47	; 71
    5ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ff4:	9e 01       	movw	r18, r28
    5ff6:	27 54       	subi	r18, 0x47	; 71
    5ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    5ffa:	f9 01       	movw	r30, r18
    5ffc:	20 81       	ld	r18, Z
    5ffe:	31 81       	ldd	r19, Z+1	; 0x01
    6000:	21 50       	subi	r18, 0x01	; 1
    6002:	31 09       	sbc	r19, r1
    6004:	fc 01       	movw	r30, r24
    6006:	31 83       	std	Z+1, r19	; 0x01
    6008:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    600a:	ce 01       	movw	r24, r28
    600c:	87 54       	subi	r24, 0x47	; 71
    600e:	9f 4f       	sbci	r25, 0xFF	; 255
    6010:	fc 01       	movw	r30, r24
    6012:	80 81       	ld	r24, Z
    6014:	91 81       	ldd	r25, Z+1	; 0x01
    6016:	89 2b       	or	r24, r25
    6018:	a1 f6       	brne	.-88     	; 0x5fc2 <rotateStepper_4+0x154e>
    601a:	2c c0       	rjmp	.+88     	; 0x6074 <rotateStepper_4+0x1600>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    601c:	8e 01       	movw	r16, r28
    601e:	07 54       	subi	r16, 0x47	; 71
    6020:	1f 4f       	sbci	r17, 0xFF	; 255
    6022:	ce 01       	movw	r24, r28
    6024:	8b 54       	subi	r24, 0x4B	; 75
    6026:	9f 4f       	sbci	r25, 0xFF	; 255
    6028:	fc 01       	movw	r30, r24
    602a:	60 81       	ld	r22, Z
    602c:	71 81       	ldd	r23, Z+1	; 0x01
    602e:	82 81       	ldd	r24, Z+2	; 0x02
    6030:	93 81       	ldd	r25, Z+3	; 0x03
    6032:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6036:	dc 01       	movw	r26, r24
    6038:	cb 01       	movw	r24, r22
    603a:	f8 01       	movw	r30, r16
    603c:	91 83       	std	Z+1, r25	; 0x01
    603e:	80 83       	st	Z, r24
    6040:	ce 01       	movw	r24, r28
    6042:	83 54       	subi	r24, 0x43	; 67
    6044:	9f 4f       	sbci	r25, 0xFF	; 255
    6046:	9e 01       	movw	r18, r28
    6048:	27 54       	subi	r18, 0x47	; 71
    604a:	3f 4f       	sbci	r19, 0xFF	; 255
    604c:	f9 01       	movw	r30, r18
    604e:	20 81       	ld	r18, Z
    6050:	31 81       	ldd	r19, Z+1	; 0x01
    6052:	fc 01       	movw	r30, r24
    6054:	31 83       	std	Z+1, r19	; 0x01
    6056:	20 83       	st	Z, r18
    6058:	ce 01       	movw	r24, r28
    605a:	83 54       	subi	r24, 0x43	; 67
    605c:	9f 4f       	sbci	r25, 0xFF	; 255
    605e:	fc 01       	movw	r30, r24
    6060:	80 81       	ld	r24, Z
    6062:	91 81       	ldd	r25, Z+1	; 0x01
    6064:	01 97       	sbiw	r24, 0x01	; 1
    6066:	f1 f7       	brne	.-4      	; 0x6064 <rotateStepper_4+0x15f0>
    6068:	9e 01       	movw	r18, r28
    606a:	23 54       	subi	r18, 0x43	; 67
    606c:	3f 4f       	sbci	r19, 0xFF	; 255
    606e:	f9 01       	movw	r30, r18
    6070:	91 83       	std	Z+1, r25	; 0x01
    6072:	80 83       	st	Z, r24
			PORTC = 0x30;
    6074:	85 e3       	ldi	r24, 0x35	; 53
    6076:	90 e0       	ldi	r25, 0x00	; 0
    6078:	20 e3       	ldi	r18, 0x30	; 48
    607a:	fc 01       	movw	r30, r24
    607c:	20 83       	st	Z, r18
			_delay_ms(period);
    607e:	8d 81       	ldd	r24, Y+5	; 0x05
    6080:	9e 81       	ldd	r25, Y+6	; 0x06
    6082:	09 2e       	mov	r0, r25
    6084:	00 0c       	add	r0, r0
    6086:	aa 0b       	sbc	r26, r26
    6088:	bb 0b       	sbc	r27, r27
    608a:	bc 01       	movw	r22, r24
    608c:	cd 01       	movw	r24, r26
    608e:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    6092:	dc 01       	movw	r26, r24
    6094:	cb 01       	movw	r24, r22
    6096:	8b a7       	std	Y+43, r24	; 0x2b
    6098:	9c a7       	std	Y+44, r25	; 0x2c
    609a:	ad a7       	std	Y+45, r26	; 0x2d
    609c:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    609e:	8e 01       	movw	r16, r28
    60a0:	05 55       	subi	r16, 0x55	; 85
    60a2:	1f 4f       	sbci	r17, 0xFF	; 255
    60a4:	20 e0       	ldi	r18, 0x00	; 0
    60a6:	30 e0       	ldi	r19, 0x00	; 0
    60a8:	4a e7       	ldi	r20, 0x7A	; 122
    60aa:	55 e4       	ldi	r21, 0x45	; 69
    60ac:	6b a5       	ldd	r22, Y+43	; 0x2b
    60ae:	7c a5       	ldd	r23, Y+44	; 0x2c
    60b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    60b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    60b4:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    60b8:	dc 01       	movw	r26, r24
    60ba:	cb 01       	movw	r24, r22
    60bc:	f8 01       	movw	r30, r16
    60be:	80 83       	st	Z, r24
    60c0:	91 83       	std	Z+1, r25	; 0x01
    60c2:	a2 83       	std	Z+2, r26	; 0x02
    60c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    60c6:	ce 01       	movw	r24, r28
    60c8:	85 55       	subi	r24, 0x55	; 85
    60ca:	9f 4f       	sbci	r25, 0xFF	; 255
    60cc:	20 e0       	ldi	r18, 0x00	; 0
    60ce:	30 e0       	ldi	r19, 0x00	; 0
    60d0:	40 e8       	ldi	r20, 0x80	; 128
    60d2:	5f e3       	ldi	r21, 0x3F	; 63
    60d4:	fc 01       	movw	r30, r24
    60d6:	60 81       	ld	r22, Z
    60d8:	71 81       	ldd	r23, Z+1	; 0x01
    60da:	82 81       	ldd	r24, Z+2	; 0x02
    60dc:	93 81       	ldd	r25, Z+3	; 0x03
    60de:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    60e2:	88 23       	and	r24, r24
    60e4:	4c f4       	brge	.+18     	; 0x60f8 <rotateStepper_4+0x1684>
		__ticks = 1;
    60e6:	ce 01       	movw	r24, r28
    60e8:	81 55       	subi	r24, 0x51	; 81
    60ea:	9f 4f       	sbci	r25, 0xFF	; 255
    60ec:	21 e0       	ldi	r18, 0x01	; 1
    60ee:	30 e0       	ldi	r19, 0x00	; 0
    60f0:	fc 01       	movw	r30, r24
    60f2:	31 83       	std	Z+1, r19	; 0x01
    60f4:	20 83       	st	Z, r18
    60f6:	69 c0       	rjmp	.+210    	; 0x61ca <rotateStepper_4+0x1756>
	else if (__tmp > 65535)
    60f8:	ce 01       	movw	r24, r28
    60fa:	85 55       	subi	r24, 0x55	; 85
    60fc:	9f 4f       	sbci	r25, 0xFF	; 255
    60fe:	20 e0       	ldi	r18, 0x00	; 0
    6100:	3f ef       	ldi	r19, 0xFF	; 255
    6102:	4f e7       	ldi	r20, 0x7F	; 127
    6104:	57 e4       	ldi	r21, 0x47	; 71
    6106:	fc 01       	movw	r30, r24
    6108:	60 81       	ld	r22, Z
    610a:	71 81       	ldd	r23, Z+1	; 0x01
    610c:	82 81       	ldd	r24, Z+2	; 0x02
    610e:	93 81       	ldd	r25, Z+3	; 0x03
    6110:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    6114:	18 16       	cp	r1, r24
    6116:	0c f0       	brlt	.+2      	; 0x611a <rotateStepper_4+0x16a6>
    6118:	46 c0       	rjmp	.+140    	; 0x61a6 <rotateStepper_4+0x1732>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    611a:	20 e0       	ldi	r18, 0x00	; 0
    611c:	30 e0       	ldi	r19, 0x00	; 0
    611e:	40 e2       	ldi	r20, 0x20	; 32
    6120:	51 e4       	ldi	r21, 0x41	; 65
    6122:	6b a5       	ldd	r22, Y+43	; 0x2b
    6124:	7c a5       	ldd	r23, Y+44	; 0x2c
    6126:	8d a5       	ldd	r24, Y+45	; 0x2d
    6128:	9e a5       	ldd	r25, Y+46	; 0x2e
    612a:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    612e:	dc 01       	movw	r26, r24
    6130:	cb 01       	movw	r24, r22
    6132:	8e 01       	movw	r16, r28
    6134:	01 55       	subi	r16, 0x51	; 81
    6136:	1f 4f       	sbci	r17, 0xFF	; 255
    6138:	bc 01       	movw	r22, r24
    613a:	cd 01       	movw	r24, r26
    613c:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6140:	dc 01       	movw	r26, r24
    6142:	cb 01       	movw	r24, r22
    6144:	f8 01       	movw	r30, r16
    6146:	91 83       	std	Z+1, r25	; 0x01
    6148:	80 83       	st	Z, r24
    614a:	24 c0       	rjmp	.+72     	; 0x6194 <rotateStepper_4+0x1720>
    614c:	ce 01       	movw	r24, r28
    614e:	8f 54       	subi	r24, 0x4F	; 79
    6150:	9f 4f       	sbci	r25, 0xFF	; 255
    6152:	20 e9       	ldi	r18, 0x90	; 144
    6154:	31 e0       	ldi	r19, 0x01	; 1
    6156:	fc 01       	movw	r30, r24
    6158:	31 83       	std	Z+1, r19	; 0x01
    615a:	20 83       	st	Z, r18
    615c:	ce 01       	movw	r24, r28
    615e:	8f 54       	subi	r24, 0x4F	; 79
    6160:	9f 4f       	sbci	r25, 0xFF	; 255
    6162:	fc 01       	movw	r30, r24
    6164:	80 81       	ld	r24, Z
    6166:	91 81       	ldd	r25, Z+1	; 0x01
    6168:	01 97       	sbiw	r24, 0x01	; 1
    616a:	f1 f7       	brne	.-4      	; 0x6168 <rotateStepper_4+0x16f4>
    616c:	9e 01       	movw	r18, r28
    616e:	2f 54       	subi	r18, 0x4F	; 79
    6170:	3f 4f       	sbci	r19, 0xFF	; 255
    6172:	f9 01       	movw	r30, r18
    6174:	91 83       	std	Z+1, r25	; 0x01
    6176:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6178:	ce 01       	movw	r24, r28
    617a:	81 55       	subi	r24, 0x51	; 81
    617c:	9f 4f       	sbci	r25, 0xFF	; 255
    617e:	9e 01       	movw	r18, r28
    6180:	21 55       	subi	r18, 0x51	; 81
    6182:	3f 4f       	sbci	r19, 0xFF	; 255
    6184:	f9 01       	movw	r30, r18
    6186:	20 81       	ld	r18, Z
    6188:	31 81       	ldd	r19, Z+1	; 0x01
    618a:	21 50       	subi	r18, 0x01	; 1
    618c:	31 09       	sbc	r19, r1
    618e:	fc 01       	movw	r30, r24
    6190:	31 83       	std	Z+1, r19	; 0x01
    6192:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6194:	ce 01       	movw	r24, r28
    6196:	81 55       	subi	r24, 0x51	; 81
    6198:	9f 4f       	sbci	r25, 0xFF	; 255
    619a:	fc 01       	movw	r30, r24
    619c:	80 81       	ld	r24, Z
    619e:	91 81       	ldd	r25, Z+1	; 0x01
    61a0:	89 2b       	or	r24, r25
    61a2:	a1 f6       	brne	.-88     	; 0x614c <rotateStepper_4+0x16d8>
    61a4:	2c c0       	rjmp	.+88     	; 0x61fe <rotateStepper_4+0x178a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61a6:	8e 01       	movw	r16, r28
    61a8:	01 55       	subi	r16, 0x51	; 81
    61aa:	1f 4f       	sbci	r17, 0xFF	; 255
    61ac:	ce 01       	movw	r24, r28
    61ae:	85 55       	subi	r24, 0x55	; 85
    61b0:	9f 4f       	sbci	r25, 0xFF	; 255
    61b2:	fc 01       	movw	r30, r24
    61b4:	60 81       	ld	r22, Z
    61b6:	71 81       	ldd	r23, Z+1	; 0x01
    61b8:	82 81       	ldd	r24, Z+2	; 0x02
    61ba:	93 81       	ldd	r25, Z+3	; 0x03
    61bc:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    61c0:	dc 01       	movw	r26, r24
    61c2:	cb 01       	movw	r24, r22
    61c4:	f8 01       	movw	r30, r16
    61c6:	91 83       	std	Z+1, r25	; 0x01
    61c8:	80 83       	st	Z, r24
    61ca:	ce 01       	movw	r24, r28
    61cc:	8d 54       	subi	r24, 0x4D	; 77
    61ce:	9f 4f       	sbci	r25, 0xFF	; 255
    61d0:	9e 01       	movw	r18, r28
    61d2:	21 55       	subi	r18, 0x51	; 81
    61d4:	3f 4f       	sbci	r19, 0xFF	; 255
    61d6:	f9 01       	movw	r30, r18
    61d8:	20 81       	ld	r18, Z
    61da:	31 81       	ldd	r19, Z+1	; 0x01
    61dc:	fc 01       	movw	r30, r24
    61de:	31 83       	std	Z+1, r19	; 0x01
    61e0:	20 83       	st	Z, r18
    61e2:	ce 01       	movw	r24, r28
    61e4:	8d 54       	subi	r24, 0x4D	; 77
    61e6:	9f 4f       	sbci	r25, 0xFF	; 255
    61e8:	fc 01       	movw	r30, r24
    61ea:	80 81       	ld	r24, Z
    61ec:	91 81       	ldd	r25, Z+1	; 0x01
    61ee:	01 97       	sbiw	r24, 0x01	; 1
    61f0:	f1 f7       	brne	.-4      	; 0x61ee <rotateStepper_4+0x177a>
    61f2:	9e 01       	movw	r18, r28
    61f4:	2d 54       	subi	r18, 0x4D	; 77
    61f6:	3f 4f       	sbci	r19, 0xFF	; 255
    61f8:	f9 01       	movw	r30, r18
    61fa:	91 83       	std	Z+1, r25	; 0x01
    61fc:	80 83       	st	Z, r24
		_delay_ms(10);
	}
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < 15; i++)
    61fe:	8b 81       	ldd	r24, Y+3	; 0x03
    6200:	9c 81       	ldd	r25, Y+4	; 0x04
    6202:	01 96       	adiw	r24, 0x01	; 1
    6204:	9c 83       	std	Y+4, r25	; 0x04
    6206:	8b 83       	std	Y+3, r24	; 0x03
    6208:	8b 81       	ldd	r24, Y+3	; 0x03
    620a:	9c 81       	ldd	r25, Y+4	; 0x04
    620c:	0f 97       	sbiw	r24, 0x0f	; 15
    620e:	0c f4       	brge	.+2      	; 0x6212 <rotateStepper_4+0x179e>
    6210:	13 cc       	rjmp	.-2010   	; 0x5a38 <rotateStepper_4+0xfc4>
    6212:	80 e0       	ldi	r24, 0x00	; 0
    6214:	90 e0       	ldi	r25, 0x00	; 0
    6216:	a0 e2       	ldi	r26, 0x20	; 32
    6218:	b1 e4       	ldi	r27, 0x41	; 65
    621a:	8f a7       	std	Y+47, r24	; 0x2f
    621c:	98 ab       	std	Y+48, r25	; 0x30
    621e:	a9 ab       	std	Y+49, r26	; 0x31
    6220:	ba ab       	std	Y+50, r27	; 0x32

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6222:	8e 01       	movw	r16, r28
    6224:	03 52       	subi	r16, 0x23	; 35
    6226:	1f 4f       	sbci	r17, 0xFF	; 255
    6228:	20 e0       	ldi	r18, 0x00	; 0
    622a:	30 e0       	ldi	r19, 0x00	; 0
    622c:	4a e7       	ldi	r20, 0x7A	; 122
    622e:	55 e4       	ldi	r21, 0x45	; 69
    6230:	6f a5       	ldd	r22, Y+47	; 0x2f
    6232:	78 a9       	ldd	r23, Y+48	; 0x30
    6234:	89 a9       	ldd	r24, Y+49	; 0x31
    6236:	9a a9       	ldd	r25, Y+50	; 0x32
    6238:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    623c:	dc 01       	movw	r26, r24
    623e:	cb 01       	movw	r24, r22
    6240:	f8 01       	movw	r30, r16
    6242:	80 83       	st	Z, r24
    6244:	91 83       	std	Z+1, r25	; 0x01
    6246:	a2 83       	std	Z+2, r26	; 0x02
    6248:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    624a:	ce 01       	movw	r24, r28
    624c:	83 52       	subi	r24, 0x23	; 35
    624e:	9f 4f       	sbci	r25, 0xFF	; 255
    6250:	20 e0       	ldi	r18, 0x00	; 0
    6252:	30 e0       	ldi	r19, 0x00	; 0
    6254:	40 e8       	ldi	r20, 0x80	; 128
    6256:	5f e3       	ldi	r21, 0x3F	; 63
    6258:	fc 01       	movw	r30, r24
    625a:	60 81       	ld	r22, Z
    625c:	71 81       	ldd	r23, Z+1	; 0x01
    625e:	82 81       	ldd	r24, Z+2	; 0x02
    6260:	93 81       	ldd	r25, Z+3	; 0x03
    6262:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    6266:	88 23       	and	r24, r24
    6268:	4c f4       	brge	.+18     	; 0x627c <rotateStepper_4+0x1808>
		__ticks = 1;
    626a:	ce 01       	movw	r24, r28
    626c:	8f 51       	subi	r24, 0x1F	; 31
    626e:	9f 4f       	sbci	r25, 0xFF	; 255
    6270:	21 e0       	ldi	r18, 0x01	; 1
    6272:	30 e0       	ldi	r19, 0x00	; 0
    6274:	fc 01       	movw	r30, r24
    6276:	31 83       	std	Z+1, r19	; 0x01
    6278:	20 83       	st	Z, r18
    627a:	69 c0       	rjmp	.+210    	; 0x634e <rotateStepper_4+0x18da>
	else if (__tmp > 65535)
    627c:	ce 01       	movw	r24, r28
    627e:	83 52       	subi	r24, 0x23	; 35
    6280:	9f 4f       	sbci	r25, 0xFF	; 255
    6282:	20 e0       	ldi	r18, 0x00	; 0
    6284:	3f ef       	ldi	r19, 0xFF	; 255
    6286:	4f e7       	ldi	r20, 0x7F	; 127
    6288:	57 e4       	ldi	r21, 0x47	; 71
    628a:	fc 01       	movw	r30, r24
    628c:	60 81       	ld	r22, Z
    628e:	71 81       	ldd	r23, Z+1	; 0x01
    6290:	82 81       	ldd	r24, Z+2	; 0x02
    6292:	93 81       	ldd	r25, Z+3	; 0x03
    6294:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    6298:	18 16       	cp	r1, r24
    629a:	0c f0       	brlt	.+2      	; 0x629e <rotateStepper_4+0x182a>
    629c:	46 c0       	rjmp	.+140    	; 0x632a <rotateStepper_4+0x18b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    629e:	20 e0       	ldi	r18, 0x00	; 0
    62a0:	30 e0       	ldi	r19, 0x00	; 0
    62a2:	40 e2       	ldi	r20, 0x20	; 32
    62a4:	51 e4       	ldi	r21, 0x41	; 65
    62a6:	6f a5       	ldd	r22, Y+47	; 0x2f
    62a8:	78 a9       	ldd	r23, Y+48	; 0x30
    62aa:	89 a9       	ldd	r24, Y+49	; 0x31
    62ac:	9a a9       	ldd	r25, Y+50	; 0x32
    62ae:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    62b2:	dc 01       	movw	r26, r24
    62b4:	cb 01       	movw	r24, r22
    62b6:	8e 01       	movw	r16, r28
    62b8:	0f 51       	subi	r16, 0x1F	; 31
    62ba:	1f 4f       	sbci	r17, 0xFF	; 255
    62bc:	bc 01       	movw	r22, r24
    62be:	cd 01       	movw	r24, r26
    62c0:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    62c4:	dc 01       	movw	r26, r24
    62c6:	cb 01       	movw	r24, r22
    62c8:	f8 01       	movw	r30, r16
    62ca:	91 83       	std	Z+1, r25	; 0x01
    62cc:	80 83       	st	Z, r24
    62ce:	24 c0       	rjmp	.+72     	; 0x6318 <rotateStepper_4+0x18a4>
    62d0:	ce 01       	movw	r24, r28
    62d2:	8d 51       	subi	r24, 0x1D	; 29
    62d4:	9f 4f       	sbci	r25, 0xFF	; 255
    62d6:	20 e9       	ldi	r18, 0x90	; 144
    62d8:	31 e0       	ldi	r19, 0x01	; 1
    62da:	fc 01       	movw	r30, r24
    62dc:	31 83       	std	Z+1, r19	; 0x01
    62de:	20 83       	st	Z, r18
    62e0:	ce 01       	movw	r24, r28
    62e2:	8d 51       	subi	r24, 0x1D	; 29
    62e4:	9f 4f       	sbci	r25, 0xFF	; 255
    62e6:	fc 01       	movw	r30, r24
    62e8:	80 81       	ld	r24, Z
    62ea:	91 81       	ldd	r25, Z+1	; 0x01
    62ec:	01 97       	sbiw	r24, 0x01	; 1
    62ee:	f1 f7       	brne	.-4      	; 0x62ec <rotateStepper_4+0x1878>
    62f0:	9e 01       	movw	r18, r28
    62f2:	2d 51       	subi	r18, 0x1D	; 29
    62f4:	3f 4f       	sbci	r19, 0xFF	; 255
    62f6:	f9 01       	movw	r30, r18
    62f8:	91 83       	std	Z+1, r25	; 0x01
    62fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62fc:	ce 01       	movw	r24, r28
    62fe:	8f 51       	subi	r24, 0x1F	; 31
    6300:	9f 4f       	sbci	r25, 0xFF	; 255
    6302:	9e 01       	movw	r18, r28
    6304:	2f 51       	subi	r18, 0x1F	; 31
    6306:	3f 4f       	sbci	r19, 0xFF	; 255
    6308:	f9 01       	movw	r30, r18
    630a:	20 81       	ld	r18, Z
    630c:	31 81       	ldd	r19, Z+1	; 0x01
    630e:	21 50       	subi	r18, 0x01	; 1
    6310:	31 09       	sbc	r19, r1
    6312:	fc 01       	movw	r30, r24
    6314:	31 83       	std	Z+1, r19	; 0x01
    6316:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6318:	ce 01       	movw	r24, r28
    631a:	8f 51       	subi	r24, 0x1F	; 31
    631c:	9f 4f       	sbci	r25, 0xFF	; 255
    631e:	fc 01       	movw	r30, r24
    6320:	80 81       	ld	r24, Z
    6322:	91 81       	ldd	r25, Z+1	; 0x01
    6324:	89 2b       	or	r24, r25
    6326:	a1 f6       	brne	.-88     	; 0x62d0 <rotateStepper_4+0x185c>
			_delay_ms(period);
		}

		_delay_ms(10);
	}
    6328:	2c c0       	rjmp	.+88     	; 0x6382 <rotateStepper_4+0x190e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    632a:	8e 01       	movw	r16, r28
    632c:	0f 51       	subi	r16, 0x1F	; 31
    632e:	1f 4f       	sbci	r17, 0xFF	; 255
    6330:	ce 01       	movw	r24, r28
    6332:	83 52       	subi	r24, 0x23	; 35
    6334:	9f 4f       	sbci	r25, 0xFF	; 255
    6336:	fc 01       	movw	r30, r24
    6338:	60 81       	ld	r22, Z
    633a:	71 81       	ldd	r23, Z+1	; 0x01
    633c:	82 81       	ldd	r24, Z+2	; 0x02
    633e:	93 81       	ldd	r25, Z+3	; 0x03
    6340:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6344:	dc 01       	movw	r26, r24
    6346:	cb 01       	movw	r24, r22
    6348:	f8 01       	movw	r30, r16
    634a:	91 83       	std	Z+1, r25	; 0x01
    634c:	80 83       	st	Z, r24
    634e:	ce 01       	movw	r24, r28
    6350:	8b 51       	subi	r24, 0x1B	; 27
    6352:	9f 4f       	sbci	r25, 0xFF	; 255
    6354:	9e 01       	movw	r18, r28
    6356:	2f 51       	subi	r18, 0x1F	; 31
    6358:	3f 4f       	sbci	r19, 0xFF	; 255
    635a:	f9 01       	movw	r30, r18
    635c:	20 81       	ld	r18, Z
    635e:	31 81       	ldd	r19, Z+1	; 0x01
    6360:	fc 01       	movw	r30, r24
    6362:	31 83       	std	Z+1, r19	; 0x01
    6364:	20 83       	st	Z, r18
    6366:	ce 01       	movw	r24, r28
    6368:	8b 51       	subi	r24, 0x1B	; 27
    636a:	9f 4f       	sbci	r25, 0xFF	; 255
    636c:	fc 01       	movw	r30, r24
    636e:	80 81       	ld	r24, Z
    6370:	91 81       	ldd	r25, Z+1	; 0x01
    6372:	01 97       	sbiw	r24, 0x01	; 1
    6374:	f1 f7       	brne	.-4      	; 0x6372 <rotateStepper_4+0x18fe>
    6376:	9e 01       	movw	r18, r28
    6378:	2b 51       	subi	r18, 0x1B	; 27
    637a:	3f 4f       	sbci	r19, 0xFF	; 255
    637c:	f9 01       	movw	r30, r18
    637e:	91 83       	std	Z+1, r25	; 0x01
    6380:	80 83       	st	Z, r24
    6382:	00 00       	nop
    6384:	c8 51       	subi	r28, 0x18	; 24
    6386:	df 4f       	sbci	r29, 0xFF	; 255
    6388:	0f b6       	in	r0, 0x3f	; 63
    638a:	f8 94       	cli
    638c:	de bf       	out	0x3e, r29	; 62
    638e:	0f be       	out	0x3f, r0	; 63
    6390:	cd bf       	out	0x3d, r28	; 61
    6392:	df 91       	pop	r29
    6394:	cf 91       	pop	r28
    6396:	1f 91       	pop	r17
    6398:	0f 91       	pop	r16
    639a:	08 95       	ret

0000639c <initUSART>:
 *  Author: Dasith
 */ 

#include "usart.h"

void initUSART(){
    639c:	cf 93       	push	r28
    639e:	df 93       	push	r29
    63a0:	00 d0       	rcall	.+0      	; 0x63a2 <initUSART+0x6>
    63a2:	cd b7       	in	r28, 0x3d	; 61
    63a4:	de b7       	in	r29, 0x3e	; 62
	
	DDRD |= 1 << PIND1;//pin1 of portD as OUTPUT
    63a6:	81 e3       	ldi	r24, 0x31	; 49
    63a8:	90 e0       	ldi	r25, 0x00	; 0
    63aa:	21 e3       	ldi	r18, 0x31	; 49
    63ac:	30 e0       	ldi	r19, 0x00	; 0
    63ae:	f9 01       	movw	r30, r18
    63b0:	20 81       	ld	r18, Z
    63b2:	22 60       	ori	r18, 0x02	; 2
    63b4:	fc 01       	movw	r30, r24
    63b6:	20 83       	st	Z, r18

	DDRD &= ~(1 << PIND0);//pin0 of portD as INPUT
    63b8:	81 e3       	ldi	r24, 0x31	; 49
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	21 e3       	ldi	r18, 0x31	; 49
    63be:	30 e0       	ldi	r19, 0x00	; 0
    63c0:	f9 01       	movw	r30, r18
    63c2:	20 81       	ld	r18, Z
    63c4:	2e 7f       	andi	r18, 0xFE	; 254
    63c6:	fc 01       	movw	r30, r24
    63c8:	20 83       	st	Z, r18
	
	int UBBRValue = 25;//AS described before setting baud rate
    63ca:	89 e1       	ldi	r24, 0x19	; 25
    63cc:	90 e0       	ldi	r25, 0x00	; 0
    63ce:	9a 83       	std	Y+2, r25	; 0x02
    63d0:	89 83       	std	Y+1, r24	; 0x01

	//Put the upper part of the baud number here (bits 8 to 11)

	UBRRH = (unsigned char) (UBBRValue >> 8);
    63d2:	80 e4       	ldi	r24, 0x40	; 64
    63d4:	90 e0       	ldi	r25, 0x00	; 0
    63d6:	29 81       	ldd	r18, Y+1	; 0x01
    63d8:	3a 81       	ldd	r19, Y+2	; 0x02
    63da:	23 2f       	mov	r18, r19
    63dc:	33 0f       	add	r19, r19
    63de:	33 0b       	sbc	r19, r19
    63e0:	fc 01       	movw	r30, r24
    63e2:	20 83       	st	Z, r18

	//Put the remaining part of the baud number here

	UBRRL = (unsigned char) UBBRValue;
    63e4:	89 e2       	ldi	r24, 0x29	; 41
    63e6:	90 e0       	ldi	r25, 0x00	; 0
    63e8:	29 81       	ldd	r18, Y+1	; 0x01
    63ea:	fc 01       	movw	r30, r24
    63ec:	20 83       	st	Z, r18

	//Enable the receiver, transmitter and receiver interrupt
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    63ee:	8a e2       	ldi	r24, 0x2A	; 42
    63f0:	90 e0       	ldi	r25, 0x00	; 0
    63f2:	28 e9       	ldi	r18, 0x98	; 152
    63f4:	fc 01       	movw	r30, r24
    63f6:	20 83       	st	Z, r18

	//Set 2 stop bits and data bit length is 8-bit

	UCSRC = (1 << USBS) | (3 << UCSZ0);
    63f8:	80 e4       	ldi	r24, 0x40	; 64
    63fa:	90 e0       	ldi	r25, 0x00	; 0
    63fc:	2e e0       	ldi	r18, 0x0E	; 14
    63fe:	fc 01       	movw	r30, r24
    6400:	20 83       	st	Z, r18
	
}
    6402:	00 00       	nop
    6404:	0f 90       	pop	r0
    6406:	0f 90       	pop	r0
    6408:	df 91       	pop	r29
    640a:	cf 91       	pop	r28
    640c:	08 95       	ret

0000640e <sendData>:

void sendData(uint8_t byte){
    640e:	cf 93       	push	r28
    6410:	df 93       	push	r29
    6412:	cd b7       	in	r28, 0x3d	; 61
    6414:	de b7       	in	r29, 0x3e	; 62
    6416:	2f 97       	sbiw	r28, 0x0f	; 15
    6418:	0f b6       	in	r0, 0x3f	; 63
    641a:	f8 94       	cli
    641c:	de bf       	out	0x3e, r29	; 62
    641e:	0f be       	out	0x3f, r0	; 63
    6420:	cd bf       	out	0x3d, r28	; 61
    6422:	8f 87       	std	Y+15, r24	; 0x0f
	while (! (UCSRA & (1 << UDRE)) );
    6424:	00 00       	nop
    6426:	8b e2       	ldi	r24, 0x2B	; 43
    6428:	90 e0       	ldi	r25, 0x00	; 0
    642a:	fc 01       	movw	r30, r24
    642c:	80 81       	ld	r24, Z
    642e:	88 2f       	mov	r24, r24
    6430:	90 e0       	ldi	r25, 0x00	; 0
    6432:	80 72       	andi	r24, 0x20	; 32
    6434:	99 27       	eor	r25, r25
    6436:	89 2b       	or	r24, r25
    6438:	b1 f3       	breq	.-20     	; 0x6426 <sendData+0x18>

	{
		UDR = byte;//once transmitter is ready sent eight bit data
    643a:	8c e2       	ldi	r24, 0x2C	; 44
    643c:	90 e0       	ldi	r25, 0x00	; 0
    643e:	2f 85       	ldd	r18, Y+15	; 0x0f
    6440:	fc 01       	movw	r30, r24
    6442:	20 83       	st	Z, r18
    6444:	80 e0       	ldi	r24, 0x00	; 0
    6446:	90 e0       	ldi	r25, 0x00	; 0
    6448:	a0 ea       	ldi	r26, 0xA0	; 160
    644a:	b0 e4       	ldi	r27, 0x40	; 64
    644c:	89 83       	std	Y+1, r24	; 0x01
    644e:	9a 83       	std	Y+2, r25	; 0x02
    6450:	ab 83       	std	Y+3, r26	; 0x03
    6452:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6454:	20 e0       	ldi	r18, 0x00	; 0
    6456:	30 e0       	ldi	r19, 0x00	; 0
    6458:	4a e7       	ldi	r20, 0x7A	; 122
    645a:	55 e4       	ldi	r21, 0x45	; 69
    645c:	69 81       	ldd	r22, Y+1	; 0x01
    645e:	7a 81       	ldd	r23, Y+2	; 0x02
    6460:	8b 81       	ldd	r24, Y+3	; 0x03
    6462:	9c 81       	ldd	r25, Y+4	; 0x04
    6464:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    6468:	dc 01       	movw	r26, r24
    646a:	cb 01       	movw	r24, r22
    646c:	8d 83       	std	Y+5, r24	; 0x05
    646e:	9e 83       	std	Y+6, r25	; 0x06
    6470:	af 83       	std	Y+7, r26	; 0x07
    6472:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6474:	20 e0       	ldi	r18, 0x00	; 0
    6476:	30 e0       	ldi	r19, 0x00	; 0
    6478:	40 e8       	ldi	r20, 0x80	; 128
    647a:	5f e3       	ldi	r21, 0x3F	; 63
    647c:	6d 81       	ldd	r22, Y+5	; 0x05
    647e:	7e 81       	ldd	r23, Y+6	; 0x06
    6480:	8f 81       	ldd	r24, Y+7	; 0x07
    6482:	98 85       	ldd	r25, Y+8	; 0x08
    6484:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    6488:	88 23       	and	r24, r24
    648a:	2c f4       	brge	.+10     	; 0x6496 <sendData+0x88>
		__ticks = 1;
    648c:	81 e0       	ldi	r24, 0x01	; 1
    648e:	90 e0       	ldi	r25, 0x00	; 0
    6490:	9a 87       	std	Y+10, r25	; 0x0a
    6492:	89 87       	std	Y+9, r24	; 0x09
    6494:	3f c0       	rjmp	.+126    	; 0x6514 <sendData+0x106>
	else if (__tmp > 65535)
    6496:	20 e0       	ldi	r18, 0x00	; 0
    6498:	3f ef       	ldi	r19, 0xFF	; 255
    649a:	4f e7       	ldi	r20, 0x7F	; 127
    649c:	57 e4       	ldi	r21, 0x47	; 71
    649e:	6d 81       	ldd	r22, Y+5	; 0x05
    64a0:	7e 81       	ldd	r23, Y+6	; 0x06
    64a2:	8f 81       	ldd	r24, Y+7	; 0x07
    64a4:	98 85       	ldd	r25, Y+8	; 0x08
    64a6:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    64aa:	18 16       	cp	r1, r24
    64ac:	4c f5       	brge	.+82     	; 0x6500 <sendData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64ae:	20 e0       	ldi	r18, 0x00	; 0
    64b0:	30 e0       	ldi	r19, 0x00	; 0
    64b2:	40 e2       	ldi	r20, 0x20	; 32
    64b4:	51 e4       	ldi	r21, 0x41	; 65
    64b6:	69 81       	ldd	r22, Y+1	; 0x01
    64b8:	7a 81       	ldd	r23, Y+2	; 0x02
    64ba:	8b 81       	ldd	r24, Y+3	; 0x03
    64bc:	9c 81       	ldd	r25, Y+4	; 0x04
    64be:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    64c2:	dc 01       	movw	r26, r24
    64c4:	cb 01       	movw	r24, r22
    64c6:	bc 01       	movw	r22, r24
    64c8:	cd 01       	movw	r24, r26
    64ca:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    64ce:	dc 01       	movw	r26, r24
    64d0:	cb 01       	movw	r24, r22
    64d2:	9a 87       	std	Y+10, r25	; 0x0a
    64d4:	89 87       	std	Y+9, r24	; 0x09
    64d6:	0f c0       	rjmp	.+30     	; 0x64f6 <sendData+0xe8>
    64d8:	80 e9       	ldi	r24, 0x90	; 144
    64da:	91 e0       	ldi	r25, 0x01	; 1
    64dc:	9c 87       	std	Y+12, r25	; 0x0c
    64de:	8b 87       	std	Y+11, r24	; 0x0b
    64e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    64e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    64e4:	01 97       	sbiw	r24, 0x01	; 1
    64e6:	f1 f7       	brne	.-4      	; 0x64e4 <sendData+0xd6>
    64e8:	9c 87       	std	Y+12, r25	; 0x0c
    64ea:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64ec:	89 85       	ldd	r24, Y+9	; 0x09
    64ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    64f0:	01 97       	sbiw	r24, 0x01	; 1
    64f2:	9a 87       	std	Y+10, r25	; 0x0a
    64f4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64f6:	89 85       	ldd	r24, Y+9	; 0x09
    64f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    64fa:	89 2b       	or	r24, r25
    64fc:	69 f7       	brne	.-38     	; 0x64d8 <sendData+0xca>
	}
	// Get that data out here!
	_delay_ms(5);
    64fe:	14 c0       	rjmp	.+40     	; 0x6528 <sendData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6500:	6d 81       	ldd	r22, Y+5	; 0x05
    6502:	7e 81       	ldd	r23, Y+6	; 0x06
    6504:	8f 81       	ldd	r24, Y+7	; 0x07
    6506:	98 85       	ldd	r25, Y+8	; 0x08
    6508:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    650c:	dc 01       	movw	r26, r24
    650e:	cb 01       	movw	r24, r22
    6510:	9a 87       	std	Y+10, r25	; 0x0a
    6512:	89 87       	std	Y+9, r24	; 0x09
    6514:	89 85       	ldd	r24, Y+9	; 0x09
    6516:	9a 85       	ldd	r25, Y+10	; 0x0a
    6518:	9e 87       	std	Y+14, r25	; 0x0e
    651a:	8d 87       	std	Y+13, r24	; 0x0d
    651c:	8d 85       	ldd	r24, Y+13	; 0x0d
    651e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6520:	01 97       	sbiw	r24, 0x01	; 1
    6522:	f1 f7       	brne	.-4      	; 0x6520 <sendData+0x112>
    6524:	9e 87       	std	Y+14, r25	; 0x0e
    6526:	8d 87       	std	Y+13, r24	; 0x0d
    6528:	00 00       	nop
    652a:	2f 96       	adiw	r28, 0x0f	; 15
    652c:	0f b6       	in	r0, 0x3f	; 63
    652e:	f8 94       	cli
    6530:	de bf       	out	0x3e, r29	; 62
    6532:	0f be       	out	0x3f, r0	; 63
    6534:	cd bf       	out	0x3d, r28	; 61
    6536:	df 91       	pop	r29
    6538:	cf 91       	pop	r28
    653a:	08 95       	ret

0000653c <initUltrasonic>:
static volatile int ult1_count = 0;
static volatile int ult2_count = 0;
static volatile int ult3_count = 0;

void initUltrasonic()
{
    653c:	cf 93       	push	r28
    653e:	df 93       	push	r29
    6540:	cd b7       	in	r28, 0x3d	; 61
    6542:	de b7       	in	r29, 0x3e	; 62
	//Initialize Ultrasonic-1
	DDRD |= 1 << PIND7;	 // set PD7 output
    6544:	81 e3       	ldi	r24, 0x31	; 49
    6546:	90 e0       	ldi	r25, 0x00	; 0
    6548:	21 e3       	ldi	r18, 0x31	; 49
    654a:	30 e0       	ldi	r19, 0x00	; 0
    654c:	f9 01       	movw	r30, r18
    654e:	20 81       	ld	r18, Z
    6550:	20 68       	ori	r18, 0x80	; 128
    6552:	fc 01       	movw	r30, r24
    6554:	20 83       	st	Z, r18
	DDRD &= ~(1 << PD2); // set PD2 Input
    6556:	81 e3       	ldi	r24, 0x31	; 49
    6558:	90 e0       	ldi	r25, 0x00	; 0
    655a:	21 e3       	ldi	r18, 0x31	; 49
    655c:	30 e0       	ldi	r19, 0x00	; 0
    655e:	f9 01       	movw	r30, r18
    6560:	20 81       	ld	r18, Z
    6562:	2b 7f       	andi	r18, 0xFB	; 251
    6564:	fc 01       	movw	r30, r24
    6566:	20 83       	st	Z, r18
	GICR |= (1 << INT0); // enabling interupt 0
    6568:	8b e5       	ldi	r24, 0x5B	; 91
    656a:	90 e0       	ldi	r25, 0x00	; 0
    656c:	2b e5       	ldi	r18, 0x5B	; 91
    656e:	30 e0       	ldi	r19, 0x00	; 0
    6570:	f9 01       	movw	r30, r18
    6572:	20 81       	ld	r18, Z
    6574:	20 64       	ori	r18, 0x40	; 64
    6576:	fc 01       	movw	r30, r24
    6578:	20 83       	st	Z, r18
	// General Interrupt Control Register
	MCUCR |= (1 << ISC00); // setting interrupt triggering logic change
    657a:	85 e5       	ldi	r24, 0x55	; 85
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	25 e5       	ldi	r18, 0x55	; 85
    6580:	30 e0       	ldi	r19, 0x00	; 0
    6582:	f9 01       	movw	r30, r18
    6584:	20 81       	ld	r18, Z
    6586:	21 60       	ori	r18, 0x01	; 1
    6588:	fc 01       	movw	r30, r24
    658a:	20 83       	st	Z, r18
	// MCU control Register
	TCCR1A = 0;
    658c:	8f e4       	ldi	r24, 0x4F	; 79
    658e:	90 e0       	ldi	r25, 0x00	; 0
    6590:	fc 01       	movw	r30, r24
    6592:	10 82       	st	Z, r1
	
	//Initialize Ultrasonic-1
	DDRB |= 1 << PB6;	 // set PB6 output
    6594:	87 e3       	ldi	r24, 0x37	; 55
    6596:	90 e0       	ldi	r25, 0x00	; 0
    6598:	27 e3       	ldi	r18, 0x37	; 55
    659a:	30 e0       	ldi	r19, 0x00	; 0
    659c:	f9 01       	movw	r30, r18
    659e:	20 81       	ld	r18, Z
    65a0:	20 64       	ori	r18, 0x40	; 64
    65a2:	fc 01       	movw	r30, r24
    65a4:	20 83       	st	Z, r18
	DDRB &= ~(1 << PB3); // set PB3 Input
    65a6:	87 e3       	ldi	r24, 0x37	; 55
    65a8:	90 e0       	ldi	r25, 0x00	; 0
    65aa:	27 e3       	ldi	r18, 0x37	; 55
    65ac:	30 e0       	ldi	r19, 0x00	; 0
    65ae:	f9 01       	movw	r30, r18
    65b0:	20 81       	ld	r18, Z
    65b2:	27 7f       	andi	r18, 0xF7	; 247
    65b4:	fc 01       	movw	r30, r24
    65b6:	20 83       	st	Z, r18
	GICR |= (1 << INT1); // enabling interupt 1
    65b8:	8b e5       	ldi	r24, 0x5B	; 91
    65ba:	90 e0       	ldi	r25, 0x00	; 0
    65bc:	2b e5       	ldi	r18, 0x5B	; 91
    65be:	30 e0       	ldi	r19, 0x00	; 0
    65c0:	f9 01       	movw	r30, r18
    65c2:	20 81       	ld	r18, Z
    65c4:	20 68       	ori	r18, 0x80	; 128
    65c6:	fc 01       	movw	r30, r24
    65c8:	20 83       	st	Z, r18
	// General Interrupt Control Register
	MCUCR |= (1 << ISC10); // setting interrupt triggering logic change
    65ca:	85 e5       	ldi	r24, 0x55	; 85
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	25 e5       	ldi	r18, 0x55	; 85
    65d0:	30 e0       	ldi	r19, 0x00	; 0
    65d2:	f9 01       	movw	r30, r18
    65d4:	20 81       	ld	r18, Z
    65d6:	24 60       	ori	r18, 0x04	; 4
    65d8:	fc 01       	movw	r30, r24
    65da:	20 83       	st	Z, r18
	// MCU control Register
	TCCR0 = 0;
    65dc:	83 e5       	ldi	r24, 0x53	; 83
    65de:	90 e0       	ldi	r25, 0x00	; 0
    65e0:	fc 01       	movw	r30, r24
    65e2:	10 82       	st	Z, r1
	
	//Initialize Ultrasonic-1
	DDRB |= 1 << PB7;	 // set PB7 output
    65e4:	87 e3       	ldi	r24, 0x37	; 55
    65e6:	90 e0       	ldi	r25, 0x00	; 0
    65e8:	27 e3       	ldi	r18, 0x37	; 55
    65ea:	30 e0       	ldi	r19, 0x00	; 0
    65ec:	f9 01       	movw	r30, r18
    65ee:	20 81       	ld	r18, Z
    65f0:	20 68       	ori	r18, 0x80	; 128
    65f2:	fc 01       	movw	r30, r24
    65f4:	20 83       	st	Z, r18
	DDRB &= ~(1 << PB2); // set PB2 Input
    65f6:	87 e3       	ldi	r24, 0x37	; 55
    65f8:	90 e0       	ldi	r25, 0x00	; 0
    65fa:	27 e3       	ldi	r18, 0x37	; 55
    65fc:	30 e0       	ldi	r19, 0x00	; 0
    65fe:	f9 01       	movw	r30, r18
    6600:	20 81       	ld	r18, Z
    6602:	2b 7f       	andi	r18, 0xFB	; 251
    6604:	fc 01       	movw	r30, r24
    6606:	20 83       	st	Z, r18
	GICR |= (1 << INT2); // enabling interupt 2
    6608:	8b e5       	ldi	r24, 0x5B	; 91
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	2b e5       	ldi	r18, 0x5B	; 91
    660e:	30 e0       	ldi	r19, 0x00	; 0
    6610:	f9 01       	movw	r30, r18
    6612:	20 81       	ld	r18, Z
    6614:	20 62       	ori	r18, 0x20	; 32
    6616:	fc 01       	movw	r30, r24
    6618:	20 83       	st	Z, r18
	// General Interrupt Control Register
	MCUCSR |= (1 << ISC2); // setting interrupt triggering logic LOW to HIGH
    661a:	84 e5       	ldi	r24, 0x54	; 84
    661c:	90 e0       	ldi	r25, 0x00	; 0
    661e:	24 e5       	ldi	r18, 0x54	; 84
    6620:	30 e0       	ldi	r19, 0x00	; 0
    6622:	f9 01       	movw	r30, r18
    6624:	20 81       	ld	r18, Z
    6626:	20 64       	ori	r18, 0x40	; 64
    6628:	fc 01       	movw	r30, r24
    662a:	20 83       	st	Z, r18
	// MCU control Register
	TCCR2 = 0;
    662c:	85 e4       	ldi	r24, 0x45	; 69
    662e:	90 e0       	ldi	r25, 0x00	; 0
    6630:	fc 01       	movw	r30, r24
    6632:	10 82       	st	Z, r1
}
    6634:	00 00       	nop
    6636:	df 91       	pop	r29
    6638:	cf 91       	pop	r28
    663a:	08 95       	ret

0000663c <getUltrasonic_1_Distance>:

int getUltrasonic_1_Distance()
{
    663c:	cf 93       	push	r28
    663e:	df 93       	push	r29
    6640:	cd b7       	in	r28, 0x3d	; 61
    6642:	de b7       	in	r29, 0x3e	; 62
    6644:	ae 97       	sbiw	r28, 0x2e	; 46
    6646:	0f b6       	in	r0, 0x3f	; 63
    6648:	f8 94       	cli
    664a:	de bf       	out	0x3e, r29	; 62
    664c:	0f be       	out	0x3f, r0	; 63
    664e:	cd bf       	out	0x3d, r28	; 61
	PORTD |= (1 << PIND7);
    6650:	82 e3       	ldi	r24, 0x32	; 50
    6652:	90 e0       	ldi	r25, 0x00	; 0
    6654:	22 e3       	ldi	r18, 0x32	; 50
    6656:	30 e0       	ldi	r19, 0x00	; 0
    6658:	f9 01       	movw	r30, r18
    665a:	20 81       	ld	r18, Z
    665c:	20 68       	ori	r18, 0x80	; 128
    665e:	fc 01       	movw	r30, r24
    6660:	20 83       	st	Z, r18
    6662:	80 e0       	ldi	r24, 0x00	; 0
    6664:	90 e0       	ldi	r25, 0x00	; 0
    6666:	a0 e7       	ldi	r26, 0x70	; 112
    6668:	b1 e4       	ldi	r27, 0x41	; 65
    666a:	89 83       	std	Y+1, r24	; 0x01
    666c:	9a 83       	std	Y+2, r25	; 0x02
    666e:	ab 83       	std	Y+3, r26	; 0x03
    6670:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    6672:	2b ea       	ldi	r18, 0xAB	; 171
    6674:	3a ea       	ldi	r19, 0xAA	; 170
    6676:	4a ea       	ldi	r20, 0xAA	; 170
    6678:	50 e4       	ldi	r21, 0x40	; 64
    667a:	69 81       	ldd	r22, Y+1	; 0x01
    667c:	7a 81       	ldd	r23, Y+2	; 0x02
    667e:	8b 81       	ldd	r24, Y+3	; 0x03
    6680:	9c 81       	ldd	r25, Y+4	; 0x04
    6682:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    6686:	dc 01       	movw	r26, r24
    6688:	cb 01       	movw	r24, r22
    668a:	8b 8b       	std	Y+19, r24	; 0x13
    668c:	9c 8b       	std	Y+20, r25	; 0x14
    668e:	ad 8b       	std	Y+21, r26	; 0x15
    6690:	be 8b       	std	Y+22, r27	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
    6692:	20 e0       	ldi	r18, 0x00	; 0
    6694:	30 e0       	ldi	r19, 0x00	; 0
    6696:	40 e8       	ldi	r20, 0x80	; 128
    6698:	50 e4       	ldi	r21, 0x40	; 64
    669a:	69 81       	ldd	r22, Y+1	; 0x01
    669c:	7a 81       	ldd	r23, Y+2	; 0x02
    669e:	8b 81       	ldd	r24, Y+3	; 0x03
    66a0:	9c 81       	ldd	r25, Y+4	; 0x04
    66a2:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    66a6:	dc 01       	movw	r26, r24
    66a8:	cb 01       	movw	r24, r22
    66aa:	8f 8b       	std	Y+23, r24	; 0x17
    66ac:	98 8f       	std	Y+24, r25	; 0x18
    66ae:	a9 8f       	std	Y+25, r26	; 0x19
    66b0:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    66b2:	20 e0       	ldi	r18, 0x00	; 0
    66b4:	30 e0       	ldi	r19, 0x00	; 0
    66b6:	40 e8       	ldi	r20, 0x80	; 128
    66b8:	5f e3       	ldi	r21, 0x3F	; 63
    66ba:	6b 89       	ldd	r22, Y+19	; 0x13
    66bc:	7c 89       	ldd	r23, Y+20	; 0x14
    66be:	8d 89       	ldd	r24, Y+21	; 0x15
    66c0:	9e 89       	ldd	r25, Y+22	; 0x16
    66c2:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    66c6:	88 23       	and	r24, r24
    66c8:	1c f4       	brge	.+6      	; 0x66d0 <getUltrasonic_1_Distance+0x94>
		__ticks = 1;
    66ca:	81 e0       	ldi	r24, 0x01	; 1
    66cc:	8b 8f       	std	Y+27, r24	; 0x1b
    66ce:	b2 c0       	rjmp	.+356    	; 0x6834 <getUltrasonic_1_Distance+0x1f8>
	else if (__tmp2 > 65535)
    66d0:	20 e0       	ldi	r18, 0x00	; 0
    66d2:	3f ef       	ldi	r19, 0xFF	; 255
    66d4:	4f e7       	ldi	r20, 0x7F	; 127
    66d6:	57 e4       	ldi	r21, 0x47	; 71
    66d8:	6f 89       	ldd	r22, Y+23	; 0x17
    66da:	78 8d       	ldd	r23, Y+24	; 0x18
    66dc:	89 8d       	ldd	r24, Y+25	; 0x19
    66de:	9a 8d       	ldd	r25, Y+26	; 0x1a
    66e0:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    66e4:	18 16       	cp	r1, r24
    66e6:	0c f0       	brlt	.+2      	; 0x66ea <getUltrasonic_1_Distance+0xae>
    66e8:	7b c0       	rjmp	.+246    	; 0x67e0 <getUltrasonic_1_Distance+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    66ea:	20 e0       	ldi	r18, 0x00	; 0
    66ec:	30 e0       	ldi	r19, 0x00	; 0
    66ee:	4a e7       	ldi	r20, 0x7A	; 122
    66f0:	54 e4       	ldi	r21, 0x44	; 68
    66f2:	69 81       	ldd	r22, Y+1	; 0x01
    66f4:	7a 81       	ldd	r23, Y+2	; 0x02
    66f6:	8b 81       	ldd	r24, Y+3	; 0x03
    66f8:	9c 81       	ldd	r25, Y+4	; 0x04
    66fa:	0e 94 8c 3c 	call	0x7918	; 0x7918 <__divsf3>
    66fe:	dc 01       	movw	r26, r24
    6700:	cb 01       	movw	r24, r22
    6702:	8c 8f       	std	Y+28, r24	; 0x1c
    6704:	9d 8f       	std	Y+29, r25	; 0x1d
    6706:	ae 8f       	std	Y+30, r26	; 0x1e
    6708:	bf 8f       	std	Y+31, r27	; 0x1f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    670a:	20 e0       	ldi	r18, 0x00	; 0
    670c:	30 e0       	ldi	r19, 0x00	; 0
    670e:	4a e7       	ldi	r20, 0x7A	; 122
    6710:	55 e4       	ldi	r21, 0x45	; 69
    6712:	6c 8d       	ldd	r22, Y+28	; 0x1c
    6714:	7d 8d       	ldd	r23, Y+29	; 0x1d
    6716:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6718:	9f 8d       	ldd	r25, Y+31	; 0x1f
    671a:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    671e:	dc 01       	movw	r26, r24
    6720:	cb 01       	movw	r24, r22
    6722:	88 a3       	std	Y+32, r24	; 0x20
    6724:	99 a3       	std	Y+33, r25	; 0x21
    6726:	aa a3       	std	Y+34, r26	; 0x22
    6728:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    672a:	20 e0       	ldi	r18, 0x00	; 0
    672c:	30 e0       	ldi	r19, 0x00	; 0
    672e:	40 e8       	ldi	r20, 0x80	; 128
    6730:	5f e3       	ldi	r21, 0x3F	; 63
    6732:	68 a1       	ldd	r22, Y+32	; 0x20
    6734:	79 a1       	ldd	r23, Y+33	; 0x21
    6736:	8a a1       	ldd	r24, Y+34	; 0x22
    6738:	9b a1       	ldd	r25, Y+35	; 0x23
    673a:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    673e:	88 23       	and	r24, r24
    6740:	2c f4       	brge	.+10     	; 0x674c <getUltrasonic_1_Distance+0x110>
		__ticks = 1;
    6742:	81 e0       	ldi	r24, 0x01	; 1
    6744:	90 e0       	ldi	r25, 0x00	; 0
    6746:	9d a3       	std	Y+37, r25	; 0x25
    6748:	8c a3       	std	Y+36, r24	; 0x24
    674a:	3f c0       	rjmp	.+126    	; 0x67ca <getUltrasonic_1_Distance+0x18e>
	else if (__tmp > 65535)
    674c:	20 e0       	ldi	r18, 0x00	; 0
    674e:	3f ef       	ldi	r19, 0xFF	; 255
    6750:	4f e7       	ldi	r20, 0x7F	; 127
    6752:	57 e4       	ldi	r21, 0x47	; 71
    6754:	68 a1       	ldd	r22, Y+32	; 0x20
    6756:	79 a1       	ldd	r23, Y+33	; 0x21
    6758:	8a a1       	ldd	r24, Y+34	; 0x22
    675a:	9b a1       	ldd	r25, Y+35	; 0x23
    675c:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    6760:	18 16       	cp	r1, r24
    6762:	4c f5       	brge	.+82     	; 0x67b6 <getUltrasonic_1_Distance+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6764:	20 e0       	ldi	r18, 0x00	; 0
    6766:	30 e0       	ldi	r19, 0x00	; 0
    6768:	40 e2       	ldi	r20, 0x20	; 32
    676a:	51 e4       	ldi	r21, 0x41	; 65
    676c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    676e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    6770:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6772:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6774:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    6778:	dc 01       	movw	r26, r24
    677a:	cb 01       	movw	r24, r22
    677c:	bc 01       	movw	r22, r24
    677e:	cd 01       	movw	r24, r26
    6780:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6784:	dc 01       	movw	r26, r24
    6786:	cb 01       	movw	r24, r22
    6788:	9d a3       	std	Y+37, r25	; 0x25
    678a:	8c a3       	std	Y+36, r24	; 0x24
    678c:	0f c0       	rjmp	.+30     	; 0x67ac <getUltrasonic_1_Distance+0x170>
    678e:	80 e9       	ldi	r24, 0x90	; 144
    6790:	91 e0       	ldi	r25, 0x01	; 1
    6792:	9f a3       	std	Y+39, r25	; 0x27
    6794:	8e a3       	std	Y+38, r24	; 0x26
    6796:	8e a1       	ldd	r24, Y+38	; 0x26
    6798:	9f a1       	ldd	r25, Y+39	; 0x27
    679a:	01 97       	sbiw	r24, 0x01	; 1
    679c:	f1 f7       	brne	.-4      	; 0x679a <getUltrasonic_1_Distance+0x15e>
    679e:	9f a3       	std	Y+39, r25	; 0x27
    67a0:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67a2:	8c a1       	ldd	r24, Y+36	; 0x24
    67a4:	9d a1       	ldd	r25, Y+37	; 0x25
    67a6:	01 97       	sbiw	r24, 0x01	; 1
    67a8:	9d a3       	std	Y+37, r25	; 0x25
    67aa:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67ac:	8c a1       	ldd	r24, Y+36	; 0x24
    67ae:	9d a1       	ldd	r25, Y+37	; 0x25
    67b0:	89 2b       	or	r24, r25
    67b2:	69 f7       	brne	.-38     	; 0x678e <getUltrasonic_1_Distance+0x152>
    67b4:	3f c0       	rjmp	.+126    	; 0x6834 <getUltrasonic_1_Distance+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67b6:	68 a1       	ldd	r22, Y+32	; 0x20
    67b8:	79 a1       	ldd	r23, Y+33	; 0x21
    67ba:	8a a1       	ldd	r24, Y+34	; 0x22
    67bc:	9b a1       	ldd	r25, Y+35	; 0x23
    67be:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    67c2:	dc 01       	movw	r26, r24
    67c4:	cb 01       	movw	r24, r22
    67c6:	9d a3       	std	Y+37, r25	; 0x25
    67c8:	8c a3       	std	Y+36, r24	; 0x24
    67ca:	8c a1       	ldd	r24, Y+36	; 0x24
    67cc:	9d a1       	ldd	r25, Y+37	; 0x25
    67ce:	99 a7       	std	Y+41, r25	; 0x29
    67d0:	88 a7       	std	Y+40, r24	; 0x28
    67d2:	88 a5       	ldd	r24, Y+40	; 0x28
    67d4:	99 a5       	ldd	r25, Y+41	; 0x29
    67d6:	01 97       	sbiw	r24, 0x01	; 1
    67d8:	f1 f7       	brne	.-4      	; 0x67d6 <getUltrasonic_1_Distance+0x19a>
    67da:	99 a7       	std	Y+41, r25	; 0x29
    67dc:	88 a7       	std	Y+40, r24	; 0x28
    67de:	2a c0       	rjmp	.+84     	; 0x6834 <getUltrasonic_1_Distance+0x1f8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    67e0:	20 e0       	ldi	r18, 0x00	; 0
    67e2:	30 e0       	ldi	r19, 0x00	; 0
    67e4:	4f e7       	ldi	r20, 0x7F	; 127
    67e6:	53 e4       	ldi	r21, 0x43	; 67
    67e8:	6b 89       	ldd	r22, Y+19	; 0x13
    67ea:	7c 89       	ldd	r23, Y+20	; 0x14
    67ec:	8d 89       	ldd	r24, Y+21	; 0x15
    67ee:	9e 89       	ldd	r25, Y+22	; 0x16
    67f0:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    67f4:	18 16       	cp	r1, r24
    67f6:	ac f4       	brge	.+42     	; 0x6822 <getUltrasonic_1_Distance+0x1e6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    67f8:	6f 89       	ldd	r22, Y+23	; 0x17
    67fa:	78 8d       	ldd	r23, Y+24	; 0x18
    67fc:	89 8d       	ldd	r24, Y+25	; 0x19
    67fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6800:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6804:	dc 01       	movw	r26, r24
    6806:	cb 01       	movw	r24, r22
    6808:	9b a7       	std	Y+43, r25	; 0x2b
    680a:	8a a7       	std	Y+42, r24	; 0x2a
    680c:	8a a5       	ldd	r24, Y+42	; 0x2a
    680e:	9b a5       	ldd	r25, Y+43	; 0x2b
    6810:	9d a7       	std	Y+45, r25	; 0x2d
    6812:	8c a7       	std	Y+44, r24	; 0x2c
    6814:	8c a5       	ldd	r24, Y+44	; 0x2c
    6816:	9d a5       	ldd	r25, Y+45	; 0x2d
    6818:	01 97       	sbiw	r24, 0x01	; 1
    681a:	f1 f7       	brne	.-4      	; 0x6818 <getUltrasonic_1_Distance+0x1dc>
    681c:	9d a7       	std	Y+45, r25	; 0x2d
    681e:	8c a7       	std	Y+44, r24	; 0x2c
    6820:	0f c0       	rjmp	.+30     	; 0x6840 <getUltrasonic_1_Distance+0x204>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6822:	6b 89       	ldd	r22, Y+19	; 0x13
    6824:	7c 89       	ldd	r23, Y+20	; 0x14
    6826:	8d 89       	ldd	r24, Y+21	; 0x15
    6828:	9e 89       	ldd	r25, Y+22	; 0x16
    682a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    682e:	dc 01       	movw	r26, r24
    6830:	cb 01       	movw	r24, r22
    6832:	8b 8f       	std	Y+27, r24	; 0x1b
    6834:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6836:	8e a7       	std	Y+46, r24	; 0x2e
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6838:	8e a5       	ldd	r24, Y+46	; 0x2e
    683a:	8a 95       	dec	r24
    683c:	f1 f7       	brne	.-4      	; 0x683a <getUltrasonic_1_Distance+0x1fe>
    683e:	8e a7       	std	Y+46, r24	; 0x2e
	_delay_us(15); // triggering the sensor for 15usec
	PORTD &= (~(1 << PIND7));
    6840:	82 e3       	ldi	r24, 0x32	; 50
    6842:	90 e0       	ldi	r25, 0x00	; 0
    6844:	22 e3       	ldi	r18, 0x32	; 50
    6846:	30 e0       	ldi	r19, 0x00	; 0
    6848:	f9 01       	movw	r30, r18
    684a:	20 81       	ld	r18, Z
    684c:	2f 77       	andi	r18, 0x7F	; 127
    684e:	fc 01       	movw	r30, r24
    6850:	20 83       	st	Z, r18
    6852:	80 e0       	ldi	r24, 0x00	; 0
    6854:	90 e0       	ldi	r25, 0x00	; 0
    6856:	aa e7       	ldi	r26, 0x7A	; 122
    6858:	b4 e4       	ldi	r27, 0x44	; 68
    685a:	8d 83       	std	Y+5, r24	; 0x05
    685c:	9e 83       	std	Y+6, r25	; 0x06
    685e:	af 83       	std	Y+7, r26	; 0x07
    6860:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6862:	20 e0       	ldi	r18, 0x00	; 0
    6864:	30 e0       	ldi	r19, 0x00	; 0
    6866:	4a e7       	ldi	r20, 0x7A	; 122
    6868:	55 e4       	ldi	r21, 0x45	; 69
    686a:	6d 81       	ldd	r22, Y+5	; 0x05
    686c:	7e 81       	ldd	r23, Y+6	; 0x06
    686e:	8f 81       	ldd	r24, Y+7	; 0x07
    6870:	98 85       	ldd	r25, Y+8	; 0x08
    6872:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    6876:	dc 01       	movw	r26, r24
    6878:	cb 01       	movw	r24, r22
    687a:	89 87       	std	Y+9, r24	; 0x09
    687c:	9a 87       	std	Y+10, r25	; 0x0a
    687e:	ab 87       	std	Y+11, r26	; 0x0b
    6880:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    6882:	20 e0       	ldi	r18, 0x00	; 0
    6884:	30 e0       	ldi	r19, 0x00	; 0
    6886:	40 e8       	ldi	r20, 0x80	; 128
    6888:	5f e3       	ldi	r21, 0x3F	; 63
    688a:	69 85       	ldd	r22, Y+9	; 0x09
    688c:	7a 85       	ldd	r23, Y+10	; 0x0a
    688e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6890:	9c 85       	ldd	r25, Y+12	; 0x0c
    6892:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    6896:	88 23       	and	r24, r24
    6898:	2c f4       	brge	.+10     	; 0x68a4 <getUltrasonic_1_Distance+0x268>
		__ticks = 1;
    689a:	81 e0       	ldi	r24, 0x01	; 1
    689c:	90 e0       	ldi	r25, 0x00	; 0
    689e:	9e 87       	std	Y+14, r25	; 0x0e
    68a0:	8d 87       	std	Y+13, r24	; 0x0d
    68a2:	3f c0       	rjmp	.+126    	; 0x6922 <getUltrasonic_1_Distance+0x2e6>
	else if (__tmp > 65535)
    68a4:	20 e0       	ldi	r18, 0x00	; 0
    68a6:	3f ef       	ldi	r19, 0xFF	; 255
    68a8:	4f e7       	ldi	r20, 0x7F	; 127
    68aa:	57 e4       	ldi	r21, 0x47	; 71
    68ac:	69 85       	ldd	r22, Y+9	; 0x09
    68ae:	7a 85       	ldd	r23, Y+10	; 0x0a
    68b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    68b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    68b4:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    68b8:	18 16       	cp	r1, r24
    68ba:	4c f5       	brge	.+82     	; 0x690e <getUltrasonic_1_Distance+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68bc:	20 e0       	ldi	r18, 0x00	; 0
    68be:	30 e0       	ldi	r19, 0x00	; 0
    68c0:	40 e2       	ldi	r20, 0x20	; 32
    68c2:	51 e4       	ldi	r21, 0x41	; 65
    68c4:	6d 81       	ldd	r22, Y+5	; 0x05
    68c6:	7e 81       	ldd	r23, Y+6	; 0x06
    68c8:	8f 81       	ldd	r24, Y+7	; 0x07
    68ca:	98 85       	ldd	r25, Y+8	; 0x08
    68cc:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    68d0:	dc 01       	movw	r26, r24
    68d2:	cb 01       	movw	r24, r22
    68d4:	bc 01       	movw	r22, r24
    68d6:	cd 01       	movw	r24, r26
    68d8:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    68dc:	dc 01       	movw	r26, r24
    68de:	cb 01       	movw	r24, r22
    68e0:	9e 87       	std	Y+14, r25	; 0x0e
    68e2:	8d 87       	std	Y+13, r24	; 0x0d
    68e4:	0f c0       	rjmp	.+30     	; 0x6904 <getUltrasonic_1_Distance+0x2c8>
    68e6:	80 e9       	ldi	r24, 0x90	; 144
    68e8:	91 e0       	ldi	r25, 0x01	; 1
    68ea:	98 8b       	std	Y+16, r25	; 0x10
    68ec:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    68ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    68f0:	98 89       	ldd	r25, Y+16	; 0x10
    68f2:	01 97       	sbiw	r24, 0x01	; 1
    68f4:	f1 f7       	brne	.-4      	; 0x68f2 <getUltrasonic_1_Distance+0x2b6>
    68f6:	98 8b       	std	Y+16, r25	; 0x10
    68f8:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    68fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    68fe:	01 97       	sbiw	r24, 0x01	; 1
    6900:	9e 87       	std	Y+14, r25	; 0x0e
    6902:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6904:	8d 85       	ldd	r24, Y+13	; 0x0d
    6906:	9e 85       	ldd	r25, Y+14	; 0x0e
    6908:	89 2b       	or	r24, r25
    690a:	69 f7       	brne	.-38     	; 0x68e6 <getUltrasonic_1_Distance+0x2aa>
    690c:	14 c0       	rjmp	.+40     	; 0x6936 <getUltrasonic_1_Distance+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    690e:	69 85       	ldd	r22, Y+9	; 0x09
    6910:	7a 85       	ldd	r23, Y+10	; 0x0a
    6912:	8b 85       	ldd	r24, Y+11	; 0x0b
    6914:	9c 85       	ldd	r25, Y+12	; 0x0c
    6916:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    691a:	dc 01       	movw	r26, r24
    691c:	cb 01       	movw	r24, r22
    691e:	9e 87       	std	Y+14, r25	; 0x0e
    6920:	8d 87       	std	Y+13, r24	; 0x0d
    6922:	8d 85       	ldd	r24, Y+13	; 0x0d
    6924:	9e 85       	ldd	r25, Y+14	; 0x0e
    6926:	9a 8b       	std	Y+18, r25	; 0x12
    6928:	89 8b       	std	Y+17, r24	; 0x11
    692a:	89 89       	ldd	r24, Y+17	; 0x11
    692c:	9a 89       	ldd	r25, Y+18	; 0x12
    692e:	01 97       	sbiw	r24, 0x01	; 1
    6930:	f1 f7       	brne	.-4      	; 0x692e <getUltrasonic_1_Distance+0x2f2>
    6932:	9a 8b       	std	Y+18, r25	; 0x12
    6934:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(1000);
	return ult1_count;
    6936:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <ult1_count>
    693a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <ult1_count+0x1>
}
    693e:	ae 96       	adiw	r28, 0x2e	; 46
    6940:	0f b6       	in	r0, 0x3f	; 63
    6942:	f8 94       	cli
    6944:	de bf       	out	0x3e, r29	; 62
    6946:	0f be       	out	0x3f, r0	; 63
    6948:	cd bf       	out	0x3d, r28	; 61
    694a:	df 91       	pop	r29
    694c:	cf 91       	pop	r28
    694e:	08 95       	ret

00006950 <getUltrasonic_2_Distance>:

int getUltrasonic_2_Distance()
{
    6950:	cf 93       	push	r28
    6952:	df 93       	push	r29
    6954:	cd b7       	in	r28, 0x3d	; 61
    6956:	de b7       	in	r29, 0x3e	; 62
    6958:	ae 97       	sbiw	r28, 0x2e	; 46
    695a:	0f b6       	in	r0, 0x3f	; 63
    695c:	f8 94       	cli
    695e:	de bf       	out	0x3e, r29	; 62
    6960:	0f be       	out	0x3f, r0	; 63
    6962:	cd bf       	out	0x3d, r28	; 61
	PORTB |= (1 << PB6);
    6964:	88 e3       	ldi	r24, 0x38	; 56
    6966:	90 e0       	ldi	r25, 0x00	; 0
    6968:	28 e3       	ldi	r18, 0x38	; 56
    696a:	30 e0       	ldi	r19, 0x00	; 0
    696c:	f9 01       	movw	r30, r18
    696e:	20 81       	ld	r18, Z
    6970:	20 64       	ori	r18, 0x40	; 64
    6972:	fc 01       	movw	r30, r24
    6974:	20 83       	st	Z, r18
    6976:	80 e0       	ldi	r24, 0x00	; 0
    6978:	90 e0       	ldi	r25, 0x00	; 0
    697a:	a0 e7       	ldi	r26, 0x70	; 112
    697c:	b1 e4       	ldi	r27, 0x41	; 65
    697e:	89 83       	std	Y+1, r24	; 0x01
    6980:	9a 83       	std	Y+2, r25	; 0x02
    6982:	ab 83       	std	Y+3, r26	; 0x03
    6984:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    6986:	2b ea       	ldi	r18, 0xAB	; 171
    6988:	3a ea       	ldi	r19, 0xAA	; 170
    698a:	4a ea       	ldi	r20, 0xAA	; 170
    698c:	50 e4       	ldi	r21, 0x40	; 64
    698e:	69 81       	ldd	r22, Y+1	; 0x01
    6990:	7a 81       	ldd	r23, Y+2	; 0x02
    6992:	8b 81       	ldd	r24, Y+3	; 0x03
    6994:	9c 81       	ldd	r25, Y+4	; 0x04
    6996:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    699a:	dc 01       	movw	r26, r24
    699c:	cb 01       	movw	r24, r22
    699e:	8b 8b       	std	Y+19, r24	; 0x13
    69a0:	9c 8b       	std	Y+20, r25	; 0x14
    69a2:	ad 8b       	std	Y+21, r26	; 0x15
    69a4:	be 8b       	std	Y+22, r27	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
    69a6:	20 e0       	ldi	r18, 0x00	; 0
    69a8:	30 e0       	ldi	r19, 0x00	; 0
    69aa:	40 e8       	ldi	r20, 0x80	; 128
    69ac:	50 e4       	ldi	r21, 0x40	; 64
    69ae:	69 81       	ldd	r22, Y+1	; 0x01
    69b0:	7a 81       	ldd	r23, Y+2	; 0x02
    69b2:	8b 81       	ldd	r24, Y+3	; 0x03
    69b4:	9c 81       	ldd	r25, Y+4	; 0x04
    69b6:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    69ba:	dc 01       	movw	r26, r24
    69bc:	cb 01       	movw	r24, r22
    69be:	8f 8b       	std	Y+23, r24	; 0x17
    69c0:	98 8f       	std	Y+24, r25	; 0x18
    69c2:	a9 8f       	std	Y+25, r26	; 0x19
    69c4:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    69c6:	20 e0       	ldi	r18, 0x00	; 0
    69c8:	30 e0       	ldi	r19, 0x00	; 0
    69ca:	40 e8       	ldi	r20, 0x80	; 128
    69cc:	5f e3       	ldi	r21, 0x3F	; 63
    69ce:	6b 89       	ldd	r22, Y+19	; 0x13
    69d0:	7c 89       	ldd	r23, Y+20	; 0x14
    69d2:	8d 89       	ldd	r24, Y+21	; 0x15
    69d4:	9e 89       	ldd	r25, Y+22	; 0x16
    69d6:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    69da:	88 23       	and	r24, r24
    69dc:	1c f4       	brge	.+6      	; 0x69e4 <getUltrasonic_2_Distance+0x94>
		__ticks = 1;
    69de:	81 e0       	ldi	r24, 0x01	; 1
    69e0:	8b 8f       	std	Y+27, r24	; 0x1b
    69e2:	b2 c0       	rjmp	.+356    	; 0x6b48 <getUltrasonic_2_Distance+0x1f8>
	else if (__tmp2 > 65535)
    69e4:	20 e0       	ldi	r18, 0x00	; 0
    69e6:	3f ef       	ldi	r19, 0xFF	; 255
    69e8:	4f e7       	ldi	r20, 0x7F	; 127
    69ea:	57 e4       	ldi	r21, 0x47	; 71
    69ec:	6f 89       	ldd	r22, Y+23	; 0x17
    69ee:	78 8d       	ldd	r23, Y+24	; 0x18
    69f0:	89 8d       	ldd	r24, Y+25	; 0x19
    69f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    69f4:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    69f8:	18 16       	cp	r1, r24
    69fa:	0c f0       	brlt	.+2      	; 0x69fe <getUltrasonic_2_Distance+0xae>
    69fc:	7b c0       	rjmp	.+246    	; 0x6af4 <getUltrasonic_2_Distance+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    69fe:	20 e0       	ldi	r18, 0x00	; 0
    6a00:	30 e0       	ldi	r19, 0x00	; 0
    6a02:	4a e7       	ldi	r20, 0x7A	; 122
    6a04:	54 e4       	ldi	r21, 0x44	; 68
    6a06:	69 81       	ldd	r22, Y+1	; 0x01
    6a08:	7a 81       	ldd	r23, Y+2	; 0x02
    6a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    6a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    6a0e:	0e 94 8c 3c 	call	0x7918	; 0x7918 <__divsf3>
    6a12:	dc 01       	movw	r26, r24
    6a14:	cb 01       	movw	r24, r22
    6a16:	8c 8f       	std	Y+28, r24	; 0x1c
    6a18:	9d 8f       	std	Y+29, r25	; 0x1d
    6a1a:	ae 8f       	std	Y+30, r26	; 0x1e
    6a1c:	bf 8f       	std	Y+31, r27	; 0x1f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6a1e:	20 e0       	ldi	r18, 0x00	; 0
    6a20:	30 e0       	ldi	r19, 0x00	; 0
    6a22:	4a e7       	ldi	r20, 0x7A	; 122
    6a24:	55 e4       	ldi	r21, 0x45	; 69
    6a26:	6c 8d       	ldd	r22, Y+28	; 0x1c
    6a28:	7d 8d       	ldd	r23, Y+29	; 0x1d
    6a2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6a2c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6a2e:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    6a32:	dc 01       	movw	r26, r24
    6a34:	cb 01       	movw	r24, r22
    6a36:	88 a3       	std	Y+32, r24	; 0x20
    6a38:	99 a3       	std	Y+33, r25	; 0x21
    6a3a:	aa a3       	std	Y+34, r26	; 0x22
    6a3c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    6a3e:	20 e0       	ldi	r18, 0x00	; 0
    6a40:	30 e0       	ldi	r19, 0x00	; 0
    6a42:	40 e8       	ldi	r20, 0x80	; 128
    6a44:	5f e3       	ldi	r21, 0x3F	; 63
    6a46:	68 a1       	ldd	r22, Y+32	; 0x20
    6a48:	79 a1       	ldd	r23, Y+33	; 0x21
    6a4a:	8a a1       	ldd	r24, Y+34	; 0x22
    6a4c:	9b a1       	ldd	r25, Y+35	; 0x23
    6a4e:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    6a52:	88 23       	and	r24, r24
    6a54:	2c f4       	brge	.+10     	; 0x6a60 <getUltrasonic_2_Distance+0x110>
		__ticks = 1;
    6a56:	81 e0       	ldi	r24, 0x01	; 1
    6a58:	90 e0       	ldi	r25, 0x00	; 0
    6a5a:	9d a3       	std	Y+37, r25	; 0x25
    6a5c:	8c a3       	std	Y+36, r24	; 0x24
    6a5e:	3f c0       	rjmp	.+126    	; 0x6ade <getUltrasonic_2_Distance+0x18e>
	else if (__tmp > 65535)
    6a60:	20 e0       	ldi	r18, 0x00	; 0
    6a62:	3f ef       	ldi	r19, 0xFF	; 255
    6a64:	4f e7       	ldi	r20, 0x7F	; 127
    6a66:	57 e4       	ldi	r21, 0x47	; 71
    6a68:	68 a1       	ldd	r22, Y+32	; 0x20
    6a6a:	79 a1       	ldd	r23, Y+33	; 0x21
    6a6c:	8a a1       	ldd	r24, Y+34	; 0x22
    6a6e:	9b a1       	ldd	r25, Y+35	; 0x23
    6a70:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    6a74:	18 16       	cp	r1, r24
    6a76:	4c f5       	brge	.+82     	; 0x6aca <getUltrasonic_2_Distance+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a78:	20 e0       	ldi	r18, 0x00	; 0
    6a7a:	30 e0       	ldi	r19, 0x00	; 0
    6a7c:	40 e2       	ldi	r20, 0x20	; 32
    6a7e:	51 e4       	ldi	r21, 0x41	; 65
    6a80:	6c 8d       	ldd	r22, Y+28	; 0x1c
    6a82:	7d 8d       	ldd	r23, Y+29	; 0x1d
    6a84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6a86:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6a88:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    6a8c:	dc 01       	movw	r26, r24
    6a8e:	cb 01       	movw	r24, r22
    6a90:	bc 01       	movw	r22, r24
    6a92:	cd 01       	movw	r24, r26
    6a94:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6a98:	dc 01       	movw	r26, r24
    6a9a:	cb 01       	movw	r24, r22
    6a9c:	9d a3       	std	Y+37, r25	; 0x25
    6a9e:	8c a3       	std	Y+36, r24	; 0x24
    6aa0:	0f c0       	rjmp	.+30     	; 0x6ac0 <getUltrasonic_2_Distance+0x170>
    6aa2:	80 e9       	ldi	r24, 0x90	; 144
    6aa4:	91 e0       	ldi	r25, 0x01	; 1
    6aa6:	9f a3       	std	Y+39, r25	; 0x27
    6aa8:	8e a3       	std	Y+38, r24	; 0x26
    6aaa:	8e a1       	ldd	r24, Y+38	; 0x26
    6aac:	9f a1       	ldd	r25, Y+39	; 0x27
    6aae:	01 97       	sbiw	r24, 0x01	; 1
    6ab0:	f1 f7       	brne	.-4      	; 0x6aae <getUltrasonic_2_Distance+0x15e>
    6ab2:	9f a3       	std	Y+39, r25	; 0x27
    6ab4:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ab6:	8c a1       	ldd	r24, Y+36	; 0x24
    6ab8:	9d a1       	ldd	r25, Y+37	; 0x25
    6aba:	01 97       	sbiw	r24, 0x01	; 1
    6abc:	9d a3       	std	Y+37, r25	; 0x25
    6abe:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ac0:	8c a1       	ldd	r24, Y+36	; 0x24
    6ac2:	9d a1       	ldd	r25, Y+37	; 0x25
    6ac4:	89 2b       	or	r24, r25
    6ac6:	69 f7       	brne	.-38     	; 0x6aa2 <getUltrasonic_2_Distance+0x152>
    6ac8:	3f c0       	rjmp	.+126    	; 0x6b48 <getUltrasonic_2_Distance+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6aca:	68 a1       	ldd	r22, Y+32	; 0x20
    6acc:	79 a1       	ldd	r23, Y+33	; 0x21
    6ace:	8a a1       	ldd	r24, Y+34	; 0x22
    6ad0:	9b a1       	ldd	r25, Y+35	; 0x23
    6ad2:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6ad6:	dc 01       	movw	r26, r24
    6ad8:	cb 01       	movw	r24, r22
    6ada:	9d a3       	std	Y+37, r25	; 0x25
    6adc:	8c a3       	std	Y+36, r24	; 0x24
    6ade:	8c a1       	ldd	r24, Y+36	; 0x24
    6ae0:	9d a1       	ldd	r25, Y+37	; 0x25
    6ae2:	99 a7       	std	Y+41, r25	; 0x29
    6ae4:	88 a7       	std	Y+40, r24	; 0x28
    6ae6:	88 a5       	ldd	r24, Y+40	; 0x28
    6ae8:	99 a5       	ldd	r25, Y+41	; 0x29
    6aea:	01 97       	sbiw	r24, 0x01	; 1
    6aec:	f1 f7       	brne	.-4      	; 0x6aea <getUltrasonic_2_Distance+0x19a>
    6aee:	99 a7       	std	Y+41, r25	; 0x29
    6af0:	88 a7       	std	Y+40, r24	; 0x28
    6af2:	2a c0       	rjmp	.+84     	; 0x6b48 <getUltrasonic_2_Distance+0x1f8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    6af4:	20 e0       	ldi	r18, 0x00	; 0
    6af6:	30 e0       	ldi	r19, 0x00	; 0
    6af8:	4f e7       	ldi	r20, 0x7F	; 127
    6afa:	53 e4       	ldi	r21, 0x43	; 67
    6afc:	6b 89       	ldd	r22, Y+19	; 0x13
    6afe:	7c 89       	ldd	r23, Y+20	; 0x14
    6b00:	8d 89       	ldd	r24, Y+21	; 0x15
    6b02:	9e 89       	ldd	r25, Y+22	; 0x16
    6b04:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    6b08:	18 16       	cp	r1, r24
    6b0a:	ac f4       	brge	.+42     	; 0x6b36 <getUltrasonic_2_Distance+0x1e6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    6b0c:	6f 89       	ldd	r22, Y+23	; 0x17
    6b0e:	78 8d       	ldd	r23, Y+24	; 0x18
    6b10:	89 8d       	ldd	r24, Y+25	; 0x19
    6b12:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6b14:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6b18:	dc 01       	movw	r26, r24
    6b1a:	cb 01       	movw	r24, r22
    6b1c:	9b a7       	std	Y+43, r25	; 0x2b
    6b1e:	8a a7       	std	Y+42, r24	; 0x2a
    6b20:	8a a5       	ldd	r24, Y+42	; 0x2a
    6b22:	9b a5       	ldd	r25, Y+43	; 0x2b
    6b24:	9d a7       	std	Y+45, r25	; 0x2d
    6b26:	8c a7       	std	Y+44, r24	; 0x2c
    6b28:	8c a5       	ldd	r24, Y+44	; 0x2c
    6b2a:	9d a5       	ldd	r25, Y+45	; 0x2d
    6b2c:	01 97       	sbiw	r24, 0x01	; 1
    6b2e:	f1 f7       	brne	.-4      	; 0x6b2c <getUltrasonic_2_Distance+0x1dc>
    6b30:	9d a7       	std	Y+45, r25	; 0x2d
    6b32:	8c a7       	std	Y+44, r24	; 0x2c
    6b34:	0f c0       	rjmp	.+30     	; 0x6b54 <getUltrasonic_2_Distance+0x204>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6b36:	6b 89       	ldd	r22, Y+19	; 0x13
    6b38:	7c 89       	ldd	r23, Y+20	; 0x14
    6b3a:	8d 89       	ldd	r24, Y+21	; 0x15
    6b3c:	9e 89       	ldd	r25, Y+22	; 0x16
    6b3e:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6b42:	dc 01       	movw	r26, r24
    6b44:	cb 01       	movw	r24, r22
    6b46:	8b 8f       	std	Y+27, r24	; 0x1b
    6b48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6b4a:	8e a7       	std	Y+46, r24	; 0x2e
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6b4c:	8e a5       	ldd	r24, Y+46	; 0x2e
    6b4e:	8a 95       	dec	r24
    6b50:	f1 f7       	brne	.-4      	; 0x6b4e <getUltrasonic_2_Distance+0x1fe>
    6b52:	8e a7       	std	Y+46, r24	; 0x2e
	_delay_us(15); // triggering the sensor for 15usec
	PORTB &= (~(1 << PB6));
    6b54:	88 e3       	ldi	r24, 0x38	; 56
    6b56:	90 e0       	ldi	r25, 0x00	; 0
    6b58:	28 e3       	ldi	r18, 0x38	; 56
    6b5a:	30 e0       	ldi	r19, 0x00	; 0
    6b5c:	f9 01       	movw	r30, r18
    6b5e:	20 81       	ld	r18, Z
    6b60:	2f 7b       	andi	r18, 0xBF	; 191
    6b62:	fc 01       	movw	r30, r24
    6b64:	20 83       	st	Z, r18
    6b66:	80 e0       	ldi	r24, 0x00	; 0
    6b68:	90 e0       	ldi	r25, 0x00	; 0
    6b6a:	aa e7       	ldi	r26, 0x7A	; 122
    6b6c:	b4 e4       	ldi	r27, 0x44	; 68
    6b6e:	8d 83       	std	Y+5, r24	; 0x05
    6b70:	9e 83       	std	Y+6, r25	; 0x06
    6b72:	af 83       	std	Y+7, r26	; 0x07
    6b74:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6b76:	20 e0       	ldi	r18, 0x00	; 0
    6b78:	30 e0       	ldi	r19, 0x00	; 0
    6b7a:	4a e7       	ldi	r20, 0x7A	; 122
    6b7c:	55 e4       	ldi	r21, 0x45	; 69
    6b7e:	6d 81       	ldd	r22, Y+5	; 0x05
    6b80:	7e 81       	ldd	r23, Y+6	; 0x06
    6b82:	8f 81       	ldd	r24, Y+7	; 0x07
    6b84:	98 85       	ldd	r25, Y+8	; 0x08
    6b86:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    6b8a:	dc 01       	movw	r26, r24
    6b8c:	cb 01       	movw	r24, r22
    6b8e:	89 87       	std	Y+9, r24	; 0x09
    6b90:	9a 87       	std	Y+10, r25	; 0x0a
    6b92:	ab 87       	std	Y+11, r26	; 0x0b
    6b94:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    6b96:	20 e0       	ldi	r18, 0x00	; 0
    6b98:	30 e0       	ldi	r19, 0x00	; 0
    6b9a:	40 e8       	ldi	r20, 0x80	; 128
    6b9c:	5f e3       	ldi	r21, 0x3F	; 63
    6b9e:	69 85       	ldd	r22, Y+9	; 0x09
    6ba0:	7a 85       	ldd	r23, Y+10	; 0x0a
    6ba2:	8b 85       	ldd	r24, Y+11	; 0x0b
    6ba4:	9c 85       	ldd	r25, Y+12	; 0x0c
    6ba6:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    6baa:	88 23       	and	r24, r24
    6bac:	2c f4       	brge	.+10     	; 0x6bb8 <getUltrasonic_2_Distance+0x268>
		__ticks = 1;
    6bae:	81 e0       	ldi	r24, 0x01	; 1
    6bb0:	90 e0       	ldi	r25, 0x00	; 0
    6bb2:	9e 87       	std	Y+14, r25	; 0x0e
    6bb4:	8d 87       	std	Y+13, r24	; 0x0d
    6bb6:	3f c0       	rjmp	.+126    	; 0x6c36 <getUltrasonic_2_Distance+0x2e6>
	else if (__tmp > 65535)
    6bb8:	20 e0       	ldi	r18, 0x00	; 0
    6bba:	3f ef       	ldi	r19, 0xFF	; 255
    6bbc:	4f e7       	ldi	r20, 0x7F	; 127
    6bbe:	57 e4       	ldi	r21, 0x47	; 71
    6bc0:	69 85       	ldd	r22, Y+9	; 0x09
    6bc2:	7a 85       	ldd	r23, Y+10	; 0x0a
    6bc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    6bc6:	9c 85       	ldd	r25, Y+12	; 0x0c
    6bc8:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    6bcc:	18 16       	cp	r1, r24
    6bce:	4c f5       	brge	.+82     	; 0x6c22 <getUltrasonic_2_Distance+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6bd0:	20 e0       	ldi	r18, 0x00	; 0
    6bd2:	30 e0       	ldi	r19, 0x00	; 0
    6bd4:	40 e2       	ldi	r20, 0x20	; 32
    6bd6:	51 e4       	ldi	r21, 0x41	; 65
    6bd8:	6d 81       	ldd	r22, Y+5	; 0x05
    6bda:	7e 81       	ldd	r23, Y+6	; 0x06
    6bdc:	8f 81       	ldd	r24, Y+7	; 0x07
    6bde:	98 85       	ldd	r25, Y+8	; 0x08
    6be0:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    6be4:	dc 01       	movw	r26, r24
    6be6:	cb 01       	movw	r24, r22
    6be8:	bc 01       	movw	r22, r24
    6bea:	cd 01       	movw	r24, r26
    6bec:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6bf0:	dc 01       	movw	r26, r24
    6bf2:	cb 01       	movw	r24, r22
    6bf4:	9e 87       	std	Y+14, r25	; 0x0e
    6bf6:	8d 87       	std	Y+13, r24	; 0x0d
    6bf8:	0f c0       	rjmp	.+30     	; 0x6c18 <getUltrasonic_2_Distance+0x2c8>
    6bfa:	80 e9       	ldi	r24, 0x90	; 144
    6bfc:	91 e0       	ldi	r25, 0x01	; 1
    6bfe:	98 8b       	std	Y+16, r25	; 0x10
    6c00:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6c02:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c04:	98 89       	ldd	r25, Y+16	; 0x10
    6c06:	01 97       	sbiw	r24, 0x01	; 1
    6c08:	f1 f7       	brne	.-4      	; 0x6c06 <getUltrasonic_2_Distance+0x2b6>
    6c0a:	98 8b       	std	Y+16, r25	; 0x10
    6c0c:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c10:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c12:	01 97       	sbiw	r24, 0x01	; 1
    6c14:	9e 87       	std	Y+14, r25	; 0x0e
    6c16:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c1c:	89 2b       	or	r24, r25
    6c1e:	69 f7       	brne	.-38     	; 0x6bfa <getUltrasonic_2_Distance+0x2aa>
    6c20:	14 c0       	rjmp	.+40     	; 0x6c4a <getUltrasonic_2_Distance+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c22:	69 85       	ldd	r22, Y+9	; 0x09
    6c24:	7a 85       	ldd	r23, Y+10	; 0x0a
    6c26:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c28:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c2a:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6c2e:	dc 01       	movw	r26, r24
    6c30:	cb 01       	movw	r24, r22
    6c32:	9e 87       	std	Y+14, r25	; 0x0e
    6c34:	8d 87       	std	Y+13, r24	; 0x0d
    6c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c3a:	9a 8b       	std	Y+18, r25	; 0x12
    6c3c:	89 8b       	std	Y+17, r24	; 0x11
    6c3e:	89 89       	ldd	r24, Y+17	; 0x11
    6c40:	9a 89       	ldd	r25, Y+18	; 0x12
    6c42:	01 97       	sbiw	r24, 0x01	; 1
    6c44:	f1 f7       	brne	.-4      	; 0x6c42 <getUltrasonic_2_Distance+0x2f2>
    6c46:	9a 8b       	std	Y+18, r25	; 0x12
    6c48:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(1000);
	return ult2_count;
    6c4a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <ult2_count>
    6c4e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <ult2_count+0x1>
}
    6c52:	ae 96       	adiw	r28, 0x2e	; 46
    6c54:	0f b6       	in	r0, 0x3f	; 63
    6c56:	f8 94       	cli
    6c58:	de bf       	out	0x3e, r29	; 62
    6c5a:	0f be       	out	0x3f, r0	; 63
    6c5c:	cd bf       	out	0x3d, r28	; 61
    6c5e:	df 91       	pop	r29
    6c60:	cf 91       	pop	r28
    6c62:	08 95       	ret

00006c64 <getUltrasonic_3_Distance>:

int getUltrasonic_3_Distance()
{
    6c64:	cf 93       	push	r28
    6c66:	df 93       	push	r29
    6c68:	cd b7       	in	r28, 0x3d	; 61
    6c6a:	de b7       	in	r29, 0x3e	; 62
    6c6c:	ae 97       	sbiw	r28, 0x2e	; 46
    6c6e:	0f b6       	in	r0, 0x3f	; 63
    6c70:	f8 94       	cli
    6c72:	de bf       	out	0x3e, r29	; 62
    6c74:	0f be       	out	0x3f, r0	; 63
    6c76:	cd bf       	out	0x3d, r28	; 61
	PORTB |= (1 << PB7);
    6c78:	88 e3       	ldi	r24, 0x38	; 56
    6c7a:	90 e0       	ldi	r25, 0x00	; 0
    6c7c:	28 e3       	ldi	r18, 0x38	; 56
    6c7e:	30 e0       	ldi	r19, 0x00	; 0
    6c80:	f9 01       	movw	r30, r18
    6c82:	20 81       	ld	r18, Z
    6c84:	20 68       	ori	r18, 0x80	; 128
    6c86:	fc 01       	movw	r30, r24
    6c88:	20 83       	st	Z, r18
    6c8a:	80 e0       	ldi	r24, 0x00	; 0
    6c8c:	90 e0       	ldi	r25, 0x00	; 0
    6c8e:	a0 e7       	ldi	r26, 0x70	; 112
    6c90:	b1 e4       	ldi	r27, 0x41	; 65
    6c92:	89 83       	std	Y+1, r24	; 0x01
    6c94:	9a 83       	std	Y+2, r25	; 0x02
    6c96:	ab 83       	std	Y+3, r26	; 0x03
    6c98:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    6c9a:	2b ea       	ldi	r18, 0xAB	; 171
    6c9c:	3a ea       	ldi	r19, 0xAA	; 170
    6c9e:	4a ea       	ldi	r20, 0xAA	; 170
    6ca0:	50 e4       	ldi	r21, 0x40	; 64
    6ca2:	69 81       	ldd	r22, Y+1	; 0x01
    6ca4:	7a 81       	ldd	r23, Y+2	; 0x02
    6ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    6ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    6caa:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    6cae:	dc 01       	movw	r26, r24
    6cb0:	cb 01       	movw	r24, r22
    6cb2:	8b 8b       	std	Y+19, r24	; 0x13
    6cb4:	9c 8b       	std	Y+20, r25	; 0x14
    6cb6:	ad 8b       	std	Y+21, r26	; 0x15
    6cb8:	be 8b       	std	Y+22, r27	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
    6cba:	20 e0       	ldi	r18, 0x00	; 0
    6cbc:	30 e0       	ldi	r19, 0x00	; 0
    6cbe:	40 e8       	ldi	r20, 0x80	; 128
    6cc0:	50 e4       	ldi	r21, 0x40	; 64
    6cc2:	69 81       	ldd	r22, Y+1	; 0x01
    6cc4:	7a 81       	ldd	r23, Y+2	; 0x02
    6cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    6cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    6cca:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    6cce:	dc 01       	movw	r26, r24
    6cd0:	cb 01       	movw	r24, r22
    6cd2:	8f 8b       	std	Y+23, r24	; 0x17
    6cd4:	98 8f       	std	Y+24, r25	; 0x18
    6cd6:	a9 8f       	std	Y+25, r26	; 0x19
    6cd8:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    6cda:	20 e0       	ldi	r18, 0x00	; 0
    6cdc:	30 e0       	ldi	r19, 0x00	; 0
    6cde:	40 e8       	ldi	r20, 0x80	; 128
    6ce0:	5f e3       	ldi	r21, 0x3F	; 63
    6ce2:	6b 89       	ldd	r22, Y+19	; 0x13
    6ce4:	7c 89       	ldd	r23, Y+20	; 0x14
    6ce6:	8d 89       	ldd	r24, Y+21	; 0x15
    6ce8:	9e 89       	ldd	r25, Y+22	; 0x16
    6cea:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    6cee:	88 23       	and	r24, r24
    6cf0:	1c f4       	brge	.+6      	; 0x6cf8 <getUltrasonic_3_Distance+0x94>
		__ticks = 1;
    6cf2:	81 e0       	ldi	r24, 0x01	; 1
    6cf4:	8b 8f       	std	Y+27, r24	; 0x1b
    6cf6:	b2 c0       	rjmp	.+356    	; 0x6e5c <getUltrasonic_3_Distance+0x1f8>
	else if (__tmp2 > 65535)
    6cf8:	20 e0       	ldi	r18, 0x00	; 0
    6cfa:	3f ef       	ldi	r19, 0xFF	; 255
    6cfc:	4f e7       	ldi	r20, 0x7F	; 127
    6cfe:	57 e4       	ldi	r21, 0x47	; 71
    6d00:	6f 89       	ldd	r22, Y+23	; 0x17
    6d02:	78 8d       	ldd	r23, Y+24	; 0x18
    6d04:	89 8d       	ldd	r24, Y+25	; 0x19
    6d06:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6d08:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    6d0c:	18 16       	cp	r1, r24
    6d0e:	0c f0       	brlt	.+2      	; 0x6d12 <getUltrasonic_3_Distance+0xae>
    6d10:	7b c0       	rjmp	.+246    	; 0x6e08 <getUltrasonic_3_Distance+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    6d12:	20 e0       	ldi	r18, 0x00	; 0
    6d14:	30 e0       	ldi	r19, 0x00	; 0
    6d16:	4a e7       	ldi	r20, 0x7A	; 122
    6d18:	54 e4       	ldi	r21, 0x44	; 68
    6d1a:	69 81       	ldd	r22, Y+1	; 0x01
    6d1c:	7a 81       	ldd	r23, Y+2	; 0x02
    6d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    6d20:	9c 81       	ldd	r25, Y+4	; 0x04
    6d22:	0e 94 8c 3c 	call	0x7918	; 0x7918 <__divsf3>
    6d26:	dc 01       	movw	r26, r24
    6d28:	cb 01       	movw	r24, r22
    6d2a:	8c 8f       	std	Y+28, r24	; 0x1c
    6d2c:	9d 8f       	std	Y+29, r25	; 0x1d
    6d2e:	ae 8f       	std	Y+30, r26	; 0x1e
    6d30:	bf 8f       	std	Y+31, r27	; 0x1f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6d32:	20 e0       	ldi	r18, 0x00	; 0
    6d34:	30 e0       	ldi	r19, 0x00	; 0
    6d36:	4a e7       	ldi	r20, 0x7A	; 122
    6d38:	55 e4       	ldi	r21, 0x45	; 69
    6d3a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    6d3c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    6d3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6d40:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6d42:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    6d46:	dc 01       	movw	r26, r24
    6d48:	cb 01       	movw	r24, r22
    6d4a:	88 a3       	std	Y+32, r24	; 0x20
    6d4c:	99 a3       	std	Y+33, r25	; 0x21
    6d4e:	aa a3       	std	Y+34, r26	; 0x22
    6d50:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    6d52:	20 e0       	ldi	r18, 0x00	; 0
    6d54:	30 e0       	ldi	r19, 0x00	; 0
    6d56:	40 e8       	ldi	r20, 0x80	; 128
    6d58:	5f e3       	ldi	r21, 0x3F	; 63
    6d5a:	68 a1       	ldd	r22, Y+32	; 0x20
    6d5c:	79 a1       	ldd	r23, Y+33	; 0x21
    6d5e:	8a a1       	ldd	r24, Y+34	; 0x22
    6d60:	9b a1       	ldd	r25, Y+35	; 0x23
    6d62:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    6d66:	88 23       	and	r24, r24
    6d68:	2c f4       	brge	.+10     	; 0x6d74 <getUltrasonic_3_Distance+0x110>
		__ticks = 1;
    6d6a:	81 e0       	ldi	r24, 0x01	; 1
    6d6c:	90 e0       	ldi	r25, 0x00	; 0
    6d6e:	9d a3       	std	Y+37, r25	; 0x25
    6d70:	8c a3       	std	Y+36, r24	; 0x24
    6d72:	3f c0       	rjmp	.+126    	; 0x6df2 <getUltrasonic_3_Distance+0x18e>
	else if (__tmp > 65535)
    6d74:	20 e0       	ldi	r18, 0x00	; 0
    6d76:	3f ef       	ldi	r19, 0xFF	; 255
    6d78:	4f e7       	ldi	r20, 0x7F	; 127
    6d7a:	57 e4       	ldi	r21, 0x47	; 71
    6d7c:	68 a1       	ldd	r22, Y+32	; 0x20
    6d7e:	79 a1       	ldd	r23, Y+33	; 0x21
    6d80:	8a a1       	ldd	r24, Y+34	; 0x22
    6d82:	9b a1       	ldd	r25, Y+35	; 0x23
    6d84:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    6d88:	18 16       	cp	r1, r24
    6d8a:	4c f5       	brge	.+82     	; 0x6dde <getUltrasonic_3_Distance+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d8c:	20 e0       	ldi	r18, 0x00	; 0
    6d8e:	30 e0       	ldi	r19, 0x00	; 0
    6d90:	40 e2       	ldi	r20, 0x20	; 32
    6d92:	51 e4       	ldi	r21, 0x41	; 65
    6d94:	6c 8d       	ldd	r22, Y+28	; 0x1c
    6d96:	7d 8d       	ldd	r23, Y+29	; 0x1d
    6d98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6d9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6d9c:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    6da0:	dc 01       	movw	r26, r24
    6da2:	cb 01       	movw	r24, r22
    6da4:	bc 01       	movw	r22, r24
    6da6:	cd 01       	movw	r24, r26
    6da8:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6dac:	dc 01       	movw	r26, r24
    6dae:	cb 01       	movw	r24, r22
    6db0:	9d a3       	std	Y+37, r25	; 0x25
    6db2:	8c a3       	std	Y+36, r24	; 0x24
    6db4:	0f c0       	rjmp	.+30     	; 0x6dd4 <getUltrasonic_3_Distance+0x170>
    6db6:	80 e9       	ldi	r24, 0x90	; 144
    6db8:	91 e0       	ldi	r25, 0x01	; 1
    6dba:	9f a3       	std	Y+39, r25	; 0x27
    6dbc:	8e a3       	std	Y+38, r24	; 0x26
    6dbe:	8e a1       	ldd	r24, Y+38	; 0x26
    6dc0:	9f a1       	ldd	r25, Y+39	; 0x27
    6dc2:	01 97       	sbiw	r24, 0x01	; 1
    6dc4:	f1 f7       	brne	.-4      	; 0x6dc2 <getUltrasonic_3_Distance+0x15e>
    6dc6:	9f a3       	std	Y+39, r25	; 0x27
    6dc8:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6dca:	8c a1       	ldd	r24, Y+36	; 0x24
    6dcc:	9d a1       	ldd	r25, Y+37	; 0x25
    6dce:	01 97       	sbiw	r24, 0x01	; 1
    6dd0:	9d a3       	std	Y+37, r25	; 0x25
    6dd2:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6dd4:	8c a1       	ldd	r24, Y+36	; 0x24
    6dd6:	9d a1       	ldd	r25, Y+37	; 0x25
    6dd8:	89 2b       	or	r24, r25
    6dda:	69 f7       	brne	.-38     	; 0x6db6 <getUltrasonic_3_Distance+0x152>
    6ddc:	3f c0       	rjmp	.+126    	; 0x6e5c <getUltrasonic_3_Distance+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6dde:	68 a1       	ldd	r22, Y+32	; 0x20
    6de0:	79 a1       	ldd	r23, Y+33	; 0x21
    6de2:	8a a1       	ldd	r24, Y+34	; 0x22
    6de4:	9b a1       	ldd	r25, Y+35	; 0x23
    6de6:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6dea:	dc 01       	movw	r26, r24
    6dec:	cb 01       	movw	r24, r22
    6dee:	9d a3       	std	Y+37, r25	; 0x25
    6df0:	8c a3       	std	Y+36, r24	; 0x24
    6df2:	8c a1       	ldd	r24, Y+36	; 0x24
    6df4:	9d a1       	ldd	r25, Y+37	; 0x25
    6df6:	99 a7       	std	Y+41, r25	; 0x29
    6df8:	88 a7       	std	Y+40, r24	; 0x28
    6dfa:	88 a5       	ldd	r24, Y+40	; 0x28
    6dfc:	99 a5       	ldd	r25, Y+41	; 0x29
    6dfe:	01 97       	sbiw	r24, 0x01	; 1
    6e00:	f1 f7       	brne	.-4      	; 0x6dfe <getUltrasonic_3_Distance+0x19a>
    6e02:	99 a7       	std	Y+41, r25	; 0x29
    6e04:	88 a7       	std	Y+40, r24	; 0x28
    6e06:	2a c0       	rjmp	.+84     	; 0x6e5c <getUltrasonic_3_Distance+0x1f8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    6e08:	20 e0       	ldi	r18, 0x00	; 0
    6e0a:	30 e0       	ldi	r19, 0x00	; 0
    6e0c:	4f e7       	ldi	r20, 0x7F	; 127
    6e0e:	53 e4       	ldi	r21, 0x43	; 67
    6e10:	6b 89       	ldd	r22, Y+19	; 0x13
    6e12:	7c 89       	ldd	r23, Y+20	; 0x14
    6e14:	8d 89       	ldd	r24, Y+21	; 0x15
    6e16:	9e 89       	ldd	r25, Y+22	; 0x16
    6e18:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    6e1c:	18 16       	cp	r1, r24
    6e1e:	ac f4       	brge	.+42     	; 0x6e4a <getUltrasonic_3_Distance+0x1e6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    6e20:	6f 89       	ldd	r22, Y+23	; 0x17
    6e22:	78 8d       	ldd	r23, Y+24	; 0x18
    6e24:	89 8d       	ldd	r24, Y+25	; 0x19
    6e26:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6e28:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6e2c:	dc 01       	movw	r26, r24
    6e2e:	cb 01       	movw	r24, r22
    6e30:	9b a7       	std	Y+43, r25	; 0x2b
    6e32:	8a a7       	std	Y+42, r24	; 0x2a
    6e34:	8a a5       	ldd	r24, Y+42	; 0x2a
    6e36:	9b a5       	ldd	r25, Y+43	; 0x2b
    6e38:	9d a7       	std	Y+45, r25	; 0x2d
    6e3a:	8c a7       	std	Y+44, r24	; 0x2c
    6e3c:	8c a5       	ldd	r24, Y+44	; 0x2c
    6e3e:	9d a5       	ldd	r25, Y+45	; 0x2d
    6e40:	01 97       	sbiw	r24, 0x01	; 1
    6e42:	f1 f7       	brne	.-4      	; 0x6e40 <getUltrasonic_3_Distance+0x1dc>
    6e44:	9d a7       	std	Y+45, r25	; 0x2d
    6e46:	8c a7       	std	Y+44, r24	; 0x2c
    6e48:	0f c0       	rjmp	.+30     	; 0x6e68 <getUltrasonic_3_Distance+0x204>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6e4a:	6b 89       	ldd	r22, Y+19	; 0x13
    6e4c:	7c 89       	ldd	r23, Y+20	; 0x14
    6e4e:	8d 89       	ldd	r24, Y+21	; 0x15
    6e50:	9e 89       	ldd	r25, Y+22	; 0x16
    6e52:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6e56:	dc 01       	movw	r26, r24
    6e58:	cb 01       	movw	r24, r22
    6e5a:	8b 8f       	std	Y+27, r24	; 0x1b
    6e5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6e5e:	8e a7       	std	Y+46, r24	; 0x2e
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6e60:	8e a5       	ldd	r24, Y+46	; 0x2e
    6e62:	8a 95       	dec	r24
    6e64:	f1 f7       	brne	.-4      	; 0x6e62 <getUltrasonic_3_Distance+0x1fe>
    6e66:	8e a7       	std	Y+46, r24	; 0x2e
	_delay_us(15); // triggering the sensor for 15usec
	PORTB &= (~(1 << PB7));
    6e68:	88 e3       	ldi	r24, 0x38	; 56
    6e6a:	90 e0       	ldi	r25, 0x00	; 0
    6e6c:	28 e3       	ldi	r18, 0x38	; 56
    6e6e:	30 e0       	ldi	r19, 0x00	; 0
    6e70:	f9 01       	movw	r30, r18
    6e72:	20 81       	ld	r18, Z
    6e74:	2f 77       	andi	r18, 0x7F	; 127
    6e76:	fc 01       	movw	r30, r24
    6e78:	20 83       	st	Z, r18
    6e7a:	80 e0       	ldi	r24, 0x00	; 0
    6e7c:	90 e0       	ldi	r25, 0x00	; 0
    6e7e:	aa e7       	ldi	r26, 0x7A	; 122
    6e80:	b4 e4       	ldi	r27, 0x44	; 68
    6e82:	8d 83       	std	Y+5, r24	; 0x05
    6e84:	9e 83       	std	Y+6, r25	; 0x06
    6e86:	af 83       	std	Y+7, r26	; 0x07
    6e88:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6e8a:	20 e0       	ldi	r18, 0x00	; 0
    6e8c:	30 e0       	ldi	r19, 0x00	; 0
    6e8e:	4a e7       	ldi	r20, 0x7A	; 122
    6e90:	55 e4       	ldi	r21, 0x45	; 69
    6e92:	6d 81       	ldd	r22, Y+5	; 0x05
    6e94:	7e 81       	ldd	r23, Y+6	; 0x06
    6e96:	8f 81       	ldd	r24, Y+7	; 0x07
    6e98:	98 85       	ldd	r25, Y+8	; 0x08
    6e9a:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    6e9e:	dc 01       	movw	r26, r24
    6ea0:	cb 01       	movw	r24, r22
    6ea2:	89 87       	std	Y+9, r24	; 0x09
    6ea4:	9a 87       	std	Y+10, r25	; 0x0a
    6ea6:	ab 87       	std	Y+11, r26	; 0x0b
    6ea8:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    6eaa:	20 e0       	ldi	r18, 0x00	; 0
    6eac:	30 e0       	ldi	r19, 0x00	; 0
    6eae:	40 e8       	ldi	r20, 0x80	; 128
    6eb0:	5f e3       	ldi	r21, 0x3F	; 63
    6eb2:	69 85       	ldd	r22, Y+9	; 0x09
    6eb4:	7a 85       	ldd	r23, Y+10	; 0x0a
    6eb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    6eb8:	9c 85       	ldd	r25, Y+12	; 0x0c
    6eba:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    6ebe:	88 23       	and	r24, r24
    6ec0:	2c f4       	brge	.+10     	; 0x6ecc <getUltrasonic_3_Distance+0x268>
		__ticks = 1;
    6ec2:	81 e0       	ldi	r24, 0x01	; 1
    6ec4:	90 e0       	ldi	r25, 0x00	; 0
    6ec6:	9e 87       	std	Y+14, r25	; 0x0e
    6ec8:	8d 87       	std	Y+13, r24	; 0x0d
    6eca:	3f c0       	rjmp	.+126    	; 0x6f4a <getUltrasonic_3_Distance+0x2e6>
	else if (__tmp > 65535)
    6ecc:	20 e0       	ldi	r18, 0x00	; 0
    6ece:	3f ef       	ldi	r19, 0xFF	; 255
    6ed0:	4f e7       	ldi	r20, 0x7F	; 127
    6ed2:	57 e4       	ldi	r21, 0x47	; 71
    6ed4:	69 85       	ldd	r22, Y+9	; 0x09
    6ed6:	7a 85       	ldd	r23, Y+10	; 0x0a
    6ed8:	8b 85       	ldd	r24, Y+11	; 0x0b
    6eda:	9c 85       	ldd	r25, Y+12	; 0x0c
    6edc:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    6ee0:	18 16       	cp	r1, r24
    6ee2:	4c f5       	brge	.+82     	; 0x6f36 <getUltrasonic_3_Distance+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ee4:	20 e0       	ldi	r18, 0x00	; 0
    6ee6:	30 e0       	ldi	r19, 0x00	; 0
    6ee8:	40 e2       	ldi	r20, 0x20	; 32
    6eea:	51 e4       	ldi	r21, 0x41	; 65
    6eec:	6d 81       	ldd	r22, Y+5	; 0x05
    6eee:	7e 81       	ldd	r23, Y+6	; 0x06
    6ef0:	8f 81       	ldd	r24, Y+7	; 0x07
    6ef2:	98 85       	ldd	r25, Y+8	; 0x08
    6ef4:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    6ef8:	dc 01       	movw	r26, r24
    6efa:	cb 01       	movw	r24, r22
    6efc:	bc 01       	movw	r22, r24
    6efe:	cd 01       	movw	r24, r26
    6f00:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6f04:	dc 01       	movw	r26, r24
    6f06:	cb 01       	movw	r24, r22
    6f08:	9e 87       	std	Y+14, r25	; 0x0e
    6f0a:	8d 87       	std	Y+13, r24	; 0x0d
    6f0c:	0f c0       	rjmp	.+30     	; 0x6f2c <getUltrasonic_3_Distance+0x2c8>
    6f0e:	80 e9       	ldi	r24, 0x90	; 144
    6f10:	91 e0       	ldi	r25, 0x01	; 1
    6f12:	98 8b       	std	Y+16, r25	; 0x10
    6f14:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6f16:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f18:	98 89       	ldd	r25, Y+16	; 0x10
    6f1a:	01 97       	sbiw	r24, 0x01	; 1
    6f1c:	f1 f7       	brne	.-4      	; 0x6f1a <getUltrasonic_3_Distance+0x2b6>
    6f1e:	98 8b       	std	Y+16, r25	; 0x10
    6f20:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f26:	01 97       	sbiw	r24, 0x01	; 1
    6f28:	9e 87       	std	Y+14, r25	; 0x0e
    6f2a:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f30:	89 2b       	or	r24, r25
    6f32:	69 f7       	brne	.-38     	; 0x6f0e <getUltrasonic_3_Distance+0x2aa>
    6f34:	14 c0       	rjmp	.+40     	; 0x6f5e <getUltrasonic_3_Distance+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f36:	69 85       	ldd	r22, Y+9	; 0x09
    6f38:	7a 85       	ldd	r23, Y+10	; 0x0a
    6f3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    6f3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    6f3e:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    6f42:	dc 01       	movw	r26, r24
    6f44:	cb 01       	movw	r24, r22
    6f46:	9e 87       	std	Y+14, r25	; 0x0e
    6f48:	8d 87       	std	Y+13, r24	; 0x0d
    6f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f4e:	9a 8b       	std	Y+18, r25	; 0x12
    6f50:	89 8b       	std	Y+17, r24	; 0x11
    6f52:	89 89       	ldd	r24, Y+17	; 0x11
    6f54:	9a 89       	ldd	r25, Y+18	; 0x12
    6f56:	01 97       	sbiw	r24, 0x01	; 1
    6f58:	f1 f7       	brne	.-4      	; 0x6f56 <getUltrasonic_3_Distance+0x2f2>
    6f5a:	9a 8b       	std	Y+18, r25	; 0x12
    6f5c:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(1000);
	return ult3_count;
    6f5e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <ult3_count>
    6f62:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <ult3_count+0x1>
}
    6f66:	ae 96       	adiw	r28, 0x2e	; 46
    6f68:	0f b6       	in	r0, 0x3f	; 63
    6f6a:	f8 94       	cli
    6f6c:	de bf       	out	0x3e, r29	; 62
    6f6e:	0f be       	out	0x3f, r0	; 63
    6f70:	cd bf       	out	0x3d, r28	; 61
    6f72:	df 91       	pop	r29
    6f74:	cf 91       	pop	r28
    6f76:	08 95       	ret

00006f78 <__vector_1>:

ISR(INT0_vect) // interrupt service routine when there is a change in logic level
{
    6f78:	1f 92       	push	r1
    6f7a:	0f 92       	push	r0
    6f7c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    6f80:	0f 92       	push	r0
    6f82:	11 24       	eor	r1, r1
    6f84:	2f 93       	push	r18
    6f86:	3f 93       	push	r19
    6f88:	5f 93       	push	r21
    6f8a:	6f 93       	push	r22
    6f8c:	7f 93       	push	r23
    6f8e:	8f 93       	push	r24
    6f90:	9f 93       	push	r25
    6f92:	af 93       	push	r26
    6f94:	bf 93       	push	r27
    6f96:	ef 93       	push	r30
    6f98:	ff 93       	push	r31
    6f9a:	cf 93       	push	r28
    6f9c:	df 93       	push	r29
    6f9e:	cd b7       	in	r28, 0x3d	; 61
    6fa0:	de b7       	in	r29, 0x3e	; 62

	if (i == 0)
    6fa2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <i>
    6fa6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <i+0x1>
    6faa:	89 2b       	or	r24, r25
    6fac:	79 f4       	brne	.+30     	; 0x6fcc <__vector_1+0x54>
	{ // when logic change from LOW to HIGH

		TCCR1B |= (1 << CS10); // enabling counter
    6fae:	8e e4       	ldi	r24, 0x4E	; 78
    6fb0:	90 e0       	ldi	r25, 0x00	; 0
    6fb2:	2e e4       	ldi	r18, 0x4E	; 78
    6fb4:	30 e0       	ldi	r19, 0x00	; 0
    6fb6:	f9 01       	movw	r30, r18
    6fb8:	20 81       	ld	r18, Z
    6fba:	21 60       	ori	r18, 0x01	; 1
    6fbc:	fc 01       	movw	r30, r24
    6fbe:	20 83       	st	Z, r18

		i = 1;
    6fc0:	81 e0       	ldi	r24, 0x01	; 1
    6fc2:	90 e0       	ldi	r25, 0x00	; 0
    6fc4:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <i+0x1>
    6fc8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <i>
	}
	if (i == 1)
    6fcc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <i>
    6fd0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <i+0x1>
    6fd4:	01 97       	sbiw	r24, 0x01	; 1
    6fd6:	29 f5       	brne	.+74     	; 0x7022 <__vector_1+0xaa>
	{
		TCCR1B = 0; // disabling counter
    6fd8:	8e e4       	ldi	r24, 0x4E	; 78
    6fda:	90 e0       	ldi	r25, 0x00	; 0
    6fdc:	fc 01       	movw	r30, r24
    6fde:	10 82       	st	Z, r1

		pulse1 = TCNT1; // count memory is updated to intege
    6fe0:	8c e4       	ldi	r24, 0x4C	; 76
    6fe2:	90 e0       	ldi	r25, 0x00	; 0
    6fe4:	fc 01       	movw	r30, r24
    6fe6:	80 81       	ld	r24, Z
    6fe8:	91 81       	ldd	r25, Z+1	; 0x01
    6fea:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
    6fee:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>

		TCNT1 = 0; // resetting the counter memory
    6ff2:	8c e4       	ldi	r24, 0x4C	; 76
    6ff4:	90 e0       	ldi	r25, 0x00	; 0
    6ff6:	fc 01       	movw	r30, r24
    6ff8:	11 82       	std	Z+1, r1	; 0x01
    6ffa:	10 82       	st	Z, r1
		ult1_count = (pulse1 / 58) + 1;
    6ffc:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
    7000:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
    7004:	2a e3       	ldi	r18, 0x3A	; 58
    7006:	30 e0       	ldi	r19, 0x00	; 0
    7008:	b9 01       	movw	r22, r18
    700a:	0e 94 a5 3e 	call	0x7d4a	; 0x7d4a <__divmodhi4>
    700e:	cb 01       	movw	r24, r22
    7010:	01 96       	adiw	r24, 0x01	; 1
    7012:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <ult1_count+0x1>
    7016:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <ult1_count>
		i = 0;
    701a:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <i+0x1>
    701e:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <i>
	}
}
    7022:	00 00       	nop
    7024:	df 91       	pop	r29
    7026:	cf 91       	pop	r28
    7028:	ff 91       	pop	r31
    702a:	ef 91       	pop	r30
    702c:	bf 91       	pop	r27
    702e:	af 91       	pop	r26
    7030:	9f 91       	pop	r25
    7032:	8f 91       	pop	r24
    7034:	7f 91       	pop	r23
    7036:	6f 91       	pop	r22
    7038:	5f 91       	pop	r21
    703a:	3f 91       	pop	r19
    703c:	2f 91       	pop	r18
    703e:	0f 90       	pop	r0
    7040:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    7044:	0f 90       	pop	r0
    7046:	1f 90       	pop	r1
    7048:	18 95       	reti

0000704a <__vector_2>:

ISR(INT1_vect) // interrupt service routine when there is a change in logic level
{
    704a:	1f 92       	push	r1
    704c:	0f 92       	push	r0
    704e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    7052:	0f 92       	push	r0
    7054:	11 24       	eor	r1, r1
    7056:	2f 93       	push	r18
    7058:	3f 93       	push	r19
    705a:	5f 93       	push	r21
    705c:	6f 93       	push	r22
    705e:	7f 93       	push	r23
    7060:	8f 93       	push	r24
    7062:	9f 93       	push	r25
    7064:	af 93       	push	r26
    7066:	bf 93       	push	r27
    7068:	ef 93       	push	r30
    706a:	ff 93       	push	r31
    706c:	cf 93       	push	r28
    706e:	df 93       	push	r29
    7070:	cd b7       	in	r28, 0x3d	; 61
    7072:	de b7       	in	r29, 0x3e	; 62

	if (j == 0)
    7074:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <j>
    7078:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <j+0x1>
    707c:	89 2b       	or	r24, r25
    707e:	79 f4       	brne	.+30     	; 0x709e <__vector_2+0x54>
	{ // when logic change from LOW to HIGH

		TCCR1B |= (1 << CS10); // enabling counter
    7080:	8e e4       	ldi	r24, 0x4E	; 78
    7082:	90 e0       	ldi	r25, 0x00	; 0
    7084:	2e e4       	ldi	r18, 0x4E	; 78
    7086:	30 e0       	ldi	r19, 0x00	; 0
    7088:	f9 01       	movw	r30, r18
    708a:	20 81       	ld	r18, Z
    708c:	21 60       	ori	r18, 0x01	; 1
    708e:	fc 01       	movw	r30, r24
    7090:	20 83       	st	Z, r18

		i = 1;
    7092:	81 e0       	ldi	r24, 0x01	; 1
    7094:	90 e0       	ldi	r25, 0x00	; 0
    7096:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <i+0x1>
    709a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <i>
	}
	if (j == 1)
    709e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <j>
    70a2:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <j+0x1>
    70a6:	01 97       	sbiw	r24, 0x01	; 1
    70a8:	29 f5       	brne	.+74     	; 0x70f4 <__vector_2+0xaa>
	{
		TCCR1B = 0; // disabling counter
    70aa:	8e e4       	ldi	r24, 0x4E	; 78
    70ac:	90 e0       	ldi	r25, 0x00	; 0
    70ae:	fc 01       	movw	r30, r24
    70b0:	10 82       	st	Z, r1

		pulse2 = TCNT1; // count memory is updated to intege
    70b2:	8c e4       	ldi	r24, 0x4C	; 76
    70b4:	90 e0       	ldi	r25, 0x00	; 0
    70b6:	fc 01       	movw	r30, r24
    70b8:	80 81       	ld	r24, Z
    70ba:	91 81       	ldd	r25, Z+1	; 0x01
    70bc:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <pulse2+0x1>
    70c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <pulse2>

		TCNT1 = 0; // resetting the counter memory
    70c4:	8c e4       	ldi	r24, 0x4C	; 76
    70c6:	90 e0       	ldi	r25, 0x00	; 0
    70c8:	fc 01       	movw	r30, r24
    70ca:	11 82       	std	Z+1, r1	; 0x01
    70cc:	10 82       	st	Z, r1
		ult2_count = (pulse2 / 58) + 1;
    70ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <pulse2>
    70d2:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <pulse2+0x1>
    70d6:	2a e3       	ldi	r18, 0x3A	; 58
    70d8:	30 e0       	ldi	r19, 0x00	; 0
    70da:	b9 01       	movw	r22, r18
    70dc:	0e 94 a5 3e 	call	0x7d4a	; 0x7d4a <__divmodhi4>
    70e0:	cb 01       	movw	r24, r22
    70e2:	01 96       	adiw	r24, 0x01	; 1
    70e4:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <ult2_count+0x1>
    70e8:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <ult2_count>
		j = 0;
    70ec:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <j+0x1>
    70f0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <j>
	}
}
    70f4:	00 00       	nop
    70f6:	df 91       	pop	r29
    70f8:	cf 91       	pop	r28
    70fa:	ff 91       	pop	r31
    70fc:	ef 91       	pop	r30
    70fe:	bf 91       	pop	r27
    7100:	af 91       	pop	r26
    7102:	9f 91       	pop	r25
    7104:	8f 91       	pop	r24
    7106:	7f 91       	pop	r23
    7108:	6f 91       	pop	r22
    710a:	5f 91       	pop	r21
    710c:	3f 91       	pop	r19
    710e:	2f 91       	pop	r18
    7110:	0f 90       	pop	r0
    7112:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    7116:	0f 90       	pop	r0
    7118:	1f 90       	pop	r1
    711a:	18 95       	reti

0000711c <__vector_3>:

ISR(INT2_vect) // interrupt service routine when there is a change in logic level
{
    711c:	1f 92       	push	r1
    711e:	0f 92       	push	r0
    7120:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    7124:	0f 92       	push	r0
    7126:	11 24       	eor	r1, r1
    7128:	2f 93       	push	r18
    712a:	3f 93       	push	r19
    712c:	4f 93       	push	r20
    712e:	5f 93       	push	r21
    7130:	6f 93       	push	r22
    7132:	7f 93       	push	r23
    7134:	8f 93       	push	r24
    7136:	9f 93       	push	r25
    7138:	af 93       	push	r26
    713a:	bf 93       	push	r27
    713c:	ef 93       	push	r30
    713e:	ff 93       	push	r31
    7140:	cf 93       	push	r28
    7142:	df 93       	push	r29
    7144:	cd b7       	in	r28, 0x3d	; 61
    7146:	de b7       	in	r29, 0x3e	; 62

	if ((MCUCSR & (1 << ISC2)))
    7148:	84 e5       	ldi	r24, 0x54	; 84
    714a:	90 e0       	ldi	r25, 0x00	; 0
    714c:	fc 01       	movw	r30, r24
    714e:	80 81       	ld	r24, Z
    7150:	88 2f       	mov	r24, r24
    7152:	90 e0       	ldi	r25, 0x00	; 0
    7154:	80 74       	andi	r24, 0x40	; 64
    7156:	99 27       	eor	r25, r25
    7158:	89 2b       	or	r24, r25
    715a:	99 f0       	breq	.+38     	; 0x7182 <__vector_3+0x66>
	{ // when logic change from LOW to HIGH

		TCCR1B |= (1 << CS10);	// enabling counter
    715c:	8e e4       	ldi	r24, 0x4E	; 78
    715e:	90 e0       	ldi	r25, 0x00	; 0
    7160:	2e e4       	ldi	r18, 0x4E	; 78
    7162:	30 e0       	ldi	r19, 0x00	; 0
    7164:	f9 01       	movw	r30, r18
    7166:	20 81       	ld	r18, Z
    7168:	21 60       	ori	r18, 0x01	; 1
    716a:	fc 01       	movw	r30, r24
    716c:	20 83       	st	Z, r18
		MCUCSR &= ~(1 << ISC2); // HIGH to LOW
    716e:	84 e5       	ldi	r24, 0x54	; 84
    7170:	90 e0       	ldi	r25, 0x00	; 0
    7172:	24 e5       	ldi	r18, 0x54	; 84
    7174:	30 e0       	ldi	r19, 0x00	; 0
    7176:	f9 01       	movw	r30, r18
    7178:	20 81       	ld	r18, Z
    717a:	2f 7b       	andi	r18, 0xBF	; 191
    717c:	fc 01       	movw	r30, r24
    717e:	20 83       	st	Z, r18
		pulse3 = TCNT1; // count memory is updated to integer
		ult3_count = round(pulse3 / 58.3);
		TCNT1 = 0; // resetting the counter memory
		MCUCSR |= (1 << ISC2);
	}
    7180:	43 c0       	rjmp	.+134    	; 0x7208 <__vector_3+0xec>
		MCUCSR &= ~(1 << ISC2); // HIGH to LOW
	}
	else
	{ // when logic from HIGH to LOW

		TCCR1B = 0; // disabling counter
    7182:	8e e4       	ldi	r24, 0x4E	; 78
    7184:	90 e0       	ldi	r25, 0x00	; 0
    7186:	fc 01       	movw	r30, r24
    7188:	10 82       	st	Z, r1

		pulse3 = TCNT1; // count memory is updated to integer
    718a:	8c e4       	ldi	r24, 0x4C	; 76
    718c:	90 e0       	ldi	r25, 0x00	; 0
    718e:	fc 01       	movw	r30, r24
    7190:	80 81       	ld	r24, Z
    7192:	91 81       	ldd	r25, Z+1	; 0x01
    7194:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <pulse3+0x1>
    7198:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <pulse3>
		ult3_count = round(pulse3 / 58.3);
    719c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <pulse3>
    71a0:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <pulse3+0x1>
    71a4:	09 2e       	mov	r0, r25
    71a6:	00 0c       	add	r0, r0
    71a8:	aa 0b       	sbc	r26, r26
    71aa:	bb 0b       	sbc	r27, r27
    71ac:	bc 01       	movw	r22, r24
    71ae:	cd 01       	movw	r24, r26
    71b0:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    71b4:	dc 01       	movw	r26, r24
    71b6:	cb 01       	movw	r24, r22
    71b8:	23 e3       	ldi	r18, 0x33	; 51
    71ba:	33 e3       	ldi	r19, 0x33	; 51
    71bc:	49 e6       	ldi	r20, 0x69	; 105
    71be:	52 e4       	ldi	r21, 0x42	; 66
    71c0:	bc 01       	movw	r22, r24
    71c2:	cd 01       	movw	r24, r26
    71c4:	0e 94 8c 3c 	call	0x7918	; 0x7918 <__divsf3>
    71c8:	dc 01       	movw	r26, r24
    71ca:	cb 01       	movw	r24, r22
    71cc:	bc 01       	movw	r22, r24
    71ce:	cd 01       	movw	r24, r26
    71d0:	0e 94 58 3e 	call	0x7cb0	; 0x7cb0 <round>
    71d4:	dc 01       	movw	r26, r24
    71d6:	cb 01       	movw	r24, r22
    71d8:	bc 01       	movw	r22, r24
    71da:	cd 01       	movw	r24, r26
    71dc:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <__fixsfsi>
    71e0:	dc 01       	movw	r26, r24
    71e2:	cb 01       	movw	r24, r22
    71e4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <ult3_count+0x1>
    71e8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <ult3_count>
		TCNT1 = 0; // resetting the counter memory
    71ec:	8c e4       	ldi	r24, 0x4C	; 76
    71ee:	90 e0       	ldi	r25, 0x00	; 0
    71f0:	fc 01       	movw	r30, r24
    71f2:	11 82       	std	Z+1, r1	; 0x01
    71f4:	10 82       	st	Z, r1
		MCUCSR |= (1 << ISC2);
    71f6:	84 e5       	ldi	r24, 0x54	; 84
    71f8:	90 e0       	ldi	r25, 0x00	; 0
    71fa:	24 e5       	ldi	r18, 0x54	; 84
    71fc:	30 e0       	ldi	r19, 0x00	; 0
    71fe:	f9 01       	movw	r30, r18
    7200:	20 81       	ld	r18, Z
    7202:	20 64       	ori	r18, 0x40	; 64
    7204:	fc 01       	movw	r30, r24
    7206:	20 83       	st	Z, r18
	}
    7208:	00 00       	nop
    720a:	df 91       	pop	r29
    720c:	cf 91       	pop	r28
    720e:	ff 91       	pop	r31
    7210:	ef 91       	pop	r30
    7212:	bf 91       	pop	r27
    7214:	af 91       	pop	r26
    7216:	9f 91       	pop	r25
    7218:	8f 91       	pop	r24
    721a:	7f 91       	pop	r23
    721c:	6f 91       	pop	r22
    721e:	5f 91       	pop	r21
    7220:	4f 91       	pop	r20
    7222:	3f 91       	pop	r19
    7224:	2f 91       	pop	r18
    7226:	0f 90       	pop	r0
    7228:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    722c:	0f 90       	pop	r0
    722e:	1f 90       	pop	r1
    7230:	18 95       	reti

00007232 <__vector_13>:
int isInputDataRecevied;




ISR(USART_RXC_vect){
    7232:	1f 92       	push	r1
    7234:	0f 92       	push	r0
    7236:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    723a:	0f 92       	push	r0
    723c:	11 24       	eor	r1, r1
    723e:	8f 93       	push	r24
    7240:	9f 93       	push	r25
    7242:	ef 93       	push	r30
    7244:	ff 93       	push	r31
    7246:	cf 93       	push	r28
    7248:	df 93       	push	r29
    724a:	cd b7       	in	r28, 0x3d	; 61
    724c:	de b7       	in	r29, 0x3e	; 62
	receivedData=UDR;
    724e:	8c e2       	ldi	r24, 0x2C	; 44
    7250:	90 e0       	ldi	r25, 0x00	; 0
    7252:	fc 01       	movw	r30, r24
    7254:	80 81       	ld	r24, Z
    7256:	88 2f       	mov	r24, r24
    7258:	90 e0       	ldi	r25, 0x00	; 0
    725a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <receivedData+0x1>
    725e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <receivedData>
	isInputDataRecevied=1;
    7262:	81 e0       	ldi	r24, 0x01	; 1
    7264:	90 e0       	ldi	r25, 0x00	; 0
    7266:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <isInputDataRecevied+0x1>
    726a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <isInputDataRecevied>
}
    726e:	00 00       	nop
    7270:	df 91       	pop	r29
    7272:	cf 91       	pop	r28
    7274:	ff 91       	pop	r31
    7276:	ef 91       	pop	r30
    7278:	9f 91       	pop	r25
    727a:	8f 91       	pop	r24
    727c:	0f 90       	pop	r0
    727e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    7282:	0f 90       	pop	r0
    7284:	1f 90       	pop	r1
    7286:	18 95       	reti

00007288 <main>:

int main(void)
{
    7288:	cf 93       	push	r28
    728a:	df 93       	push	r29
    728c:	cd b7       	in	r28, 0x3d	; 61
    728e:	de b7       	in	r29, 0x3e	; 62
    7290:	aa 97       	sbiw	r28, 0x2a	; 42
    7292:	0f b6       	in	r0, 0x3f	; 63
    7294:	f8 94       	cli
    7296:	de bf       	out	0x3e, r29	; 62
    7298:	0f be       	out	0x3f, r0	; 63
    729a:	cd bf       	out	0x3d, r28	; 61
	int ult2_distance;
	int ult3_distance;
	int rounds;
	int length;
	int isMetal;
	isInputDataRecevied=0;
    729c:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <isInputDataRecevied+0x1>
    72a0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <isInputDataRecevied>
	initUltrasonic();
    72a4:	0e 94 9e 32 	call	0x653c	; 0x653c <initUltrasonic>
	initUSART();
    72a8:	0e 94 ce 31 	call	0x639c	; 0x639c <initUSART>
	initSteppers();
    72ac:	0e 94 99 00 	call	0x132	; 0x132 <initSteppers>
	sei(); //enable global interrupts
    72b0:	78 94       	sei
	while (1)
	{
		while (!(PIND & 1 << PD4)); // Wait until pipe place
    72b2:	00 00       	nop
    72b4:	80 e3       	ldi	r24, 0x30	; 48
    72b6:	90 e0       	ldi	r25, 0x00	; 0
    72b8:	fc 01       	movw	r30, r24
    72ba:	80 81       	ld	r24, Z
    72bc:	88 2f       	mov	r24, r24
    72be:	90 e0       	ldi	r25, 0x00	; 0
    72c0:	80 71       	andi	r24, 0x10	; 16
    72c2:	99 27       	eor	r25, r25
    72c4:	89 2b       	or	r24, r25
    72c6:	b1 f3       	breq	.-20     	; 0x72b4 <main+0x2c>

		if (PINB & 1 << PB5){ // Change DC motor speed
    72c8:	86 e3       	ldi	r24, 0x36	; 54
    72ca:	90 e0       	ldi	r25, 0x00	; 0
    72cc:	fc 01       	movw	r30, r24
    72ce:	80 81       	ld	r24, Z
    72d0:	88 2f       	mov	r24, r24
    72d2:	90 e0       	ldi	r25, 0x00	; 0
    72d4:	80 72       	andi	r24, 0x20	; 32
    72d6:	99 27       	eor	r25, r25
    72d8:	89 2b       	or	r24, r25
    72da:	49 f0       	breq	.+18     	; 0x72ee <main+0x66>
			// metal
			isMetal = 1;
    72dc:	81 e0       	ldi	r24, 0x01	; 1
    72de:	90 e0       	ldi	r25, 0x00	; 0
    72e0:	9a 83       	std	Y+2, r25	; 0x02
    72e2:	89 83       	std	Y+1, r24	; 0x01
			sendData("HIGH");
    72e4:	86 e6       	ldi	r24, 0x66	; 102
    72e6:	90 e0       	ldi	r25, 0x00	; 0
    72e8:	0e 94 07 32 	call	0x640e	; 0x640e <sendData>
    72ec:	06 c0       	rjmp	.+12     	; 0x72fa <main+0x72>
			
			}else{
			// PVC
			isMetal = 0;
    72ee:	1a 82       	std	Y+2, r1	; 0x02
    72f0:	19 82       	std	Y+1, r1	; 0x01
			sendData("LOW");
    72f2:	8b e6       	ldi	r24, 0x6B	; 107
    72f4:	90 e0       	ldi	r25, 0x00	; 0
    72f6:	0e 94 07 32 	call	0x640e	; 0x640e <sendData>

		// TODO USART send message

		// tight clutches1&2
		// Check ultrasonic sensor output
		ult2_distance = getUltrasonic_2_Distance();
    72fa:	0e 94 a8 34 	call	0x6950	; 0x6950 <getUltrasonic_2_Distance>
    72fe:	9e 83       	std	Y+6, r25	; 0x06
    7300:	8d 83       	std	Y+5, r24	; 0x05
		ult3_distance = getUltrasonic_3_Distance();
    7302:	0e 94 32 36 	call	0x6c64	; 0x6c64 <getUltrasonic_3_Distance>
    7306:	98 87       	std	Y+8, r25	; 0x08
    7308:	8f 83       	std	Y+7, r24	; 0x07
		// move both clutches forward until ultrasonic output smallest number
		rotateStepper_1(1, ult2_distance);
    730a:	8d 81       	ldd	r24, Y+5	; 0x05
    730c:	9e 81       	ldd	r25, Y+6	; 0x06
    730e:	09 2e       	mov	r0, r25
    7310:	00 0c       	add	r0, r0
    7312:	aa 0b       	sbc	r26, r26
    7314:	bb 0b       	sbc	r27, r27
    7316:	bc 01       	movw	r22, r24
    7318:	cd 01       	movw	r24, r26
    731a:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    731e:	dc 01       	movw	r26, r24
    7320:	cb 01       	movw	r24, r22
    7322:	ac 01       	movw	r20, r24
    7324:	bd 01       	movw	r22, r26
    7326:	81 e0       	ldi	r24, 0x01	; 1
    7328:	90 e0       	ldi	r25, 0x00	; 0
    732a:	0e 94 ab 00 	call	0x156	; 0x156 <rotateStepper_1>
		rotateStepper_2(1, ult3_distance);
    732e:	8f 81       	ldd	r24, Y+7	; 0x07
    7330:	98 85       	ldd	r25, Y+8	; 0x08
    7332:	09 2e       	mov	r0, r25
    7334:	00 0c       	add	r0, r0
    7336:	aa 0b       	sbc	r26, r26
    7338:	bb 0b       	sbc	r27, r27
    733a:	bc 01       	movw	r22, r24
    733c:	cd 01       	movw	r24, r26
    733e:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    7342:	dc 01       	movw	r26, r24
    7344:	cb 01       	movw	r24, r22
    7346:	ac 01       	movw	r20, r24
    7348:	bd 01       	movw	r22, r26
    734a:	81 e0       	ldi	r24, 0x01	; 1
    734c:	90 e0       	ldi	r25, 0x00	; 0
    734e:	0e 94 02 0c 	call	0x1804	; 0x1804 <rotateStepper_2>
		while ((getUltrasonic_2_Distance() >= 3) && (getUltrasonic_3_Distance() >= 3));
    7352:	00 00       	nop
    7354:	0e 94 a8 34 	call	0x6950	; 0x6950 <getUltrasonic_2_Distance>
    7358:	03 97       	sbiw	r24, 0x03	; 3
    735a:	24 f0       	brlt	.+8      	; 0x7364 <main+0xdc>
    735c:	0e 94 32 36 	call	0x6c64	; 0x6c64 <getUltrasonic_3_Distance>
    7360:	03 97       	sbiw	r24, 0x03	; 3
    7362:	c4 f7       	brge	.-16     	; 0x7354 <main+0xcc>

		// move clutches through rail to align

		if ((PIND & 1 << PD5) && (PIND && 1 << PD6)){ // if both Ir sensor-2,3 are detected pipe
    7364:	80 e3       	ldi	r24, 0x30	; 48
    7366:	90 e0       	ldi	r25, 0x00	; 0
    7368:	fc 01       	movw	r30, r24
    736a:	80 81       	ld	r24, Z
    736c:	88 2f       	mov	r24, r24
    736e:	90 e0       	ldi	r25, 0x00	; 0
    7370:	80 72       	andi	r24, 0x20	; 32
    7372:	99 27       	eor	r25, r25
    7374:	89 2b       	or	r24, r25
    7376:	a1 f0       	breq	.+40     	; 0x73a0 <main+0x118>
    7378:	80 e3       	ldi	r24, 0x30	; 48
    737a:	90 e0       	ldi	r25, 0x00	; 0
    737c:	fc 01       	movw	r30, r24
    737e:	80 81       	ld	r24, Z
    7380:	88 23       	and	r24, r24
    7382:	71 f0       	breq	.+28     	; 0x73a0 <main+0x118>
			rotateDCMotors(1);
    7384:	81 e0       	ldi	r24, 0x01	; 1
    7386:	90 e0       	ldi	r25, 0x00	; 0
    7388:	0e 94 49 00 	call	0x92	; 0x92 <rotateDCMotors>
			while (PIND && 1 << PD6);
    738c:	00 00       	nop
    738e:	80 e3       	ldi	r24, 0x30	; 48
    7390:	90 e0       	ldi	r25, 0x00	; 0
    7392:	fc 01       	movw	r30, r24
    7394:	80 81       	ld	r24, Z
    7396:	88 23       	and	r24, r24
    7398:	d1 f7       	brne	.-12     	; 0x738e <main+0x106>
			stopDCMotors();
    739a:	0e 94 7f 00 	call	0xfe	; 0xfe <stopDCMotors>
    739e:	21 c0       	rjmp	.+66     	; 0x73e2 <main+0x15a>
		}
		else if (!(PIND & 1 << PD5) && !(PIND && 1 << PD6)){ // else if both Ir sensor-2,3 are not detected pipe
    73a0:	80 e3       	ldi	r24, 0x30	; 48
    73a2:	90 e0       	ldi	r25, 0x00	; 0
    73a4:	fc 01       	movw	r30, r24
    73a6:	80 81       	ld	r24, Z
    73a8:	88 2f       	mov	r24, r24
    73aa:	90 e0       	ldi	r25, 0x00	; 0
    73ac:	80 72       	andi	r24, 0x20	; 32
    73ae:	99 27       	eor	r25, r25
    73b0:	89 2b       	or	r24, r25
    73b2:	b9 f4       	brne	.+46     	; 0x73e2 <main+0x15a>
    73b4:	80 e3       	ldi	r24, 0x30	; 48
    73b6:	90 e0       	ldi	r25, 0x00	; 0
    73b8:	fc 01       	movw	r30, r24
    73ba:	80 81       	ld	r24, Z
    73bc:	88 23       	and	r24, r24
    73be:	89 f4       	brne	.+34     	; 0x73e2 <main+0x15a>
			rotateDCMotors(0);
    73c0:	80 e0       	ldi	r24, 0x00	; 0
    73c2:	90 e0       	ldi	r25, 0x00	; 0
    73c4:	0e 94 49 00 	call	0x92	; 0x92 <rotateDCMotors>
			while (!(PIND & 1 << PD5));
    73c8:	00 00       	nop
    73ca:	80 e3       	ldi	r24, 0x30	; 48
    73cc:	90 e0       	ldi	r25, 0x00	; 0
    73ce:	fc 01       	movw	r30, r24
    73d0:	80 81       	ld	r24, Z
    73d2:	88 2f       	mov	r24, r24
    73d4:	90 e0       	ldi	r25, 0x00	; 0
    73d6:	80 72       	andi	r24, 0x20	; 32
    73d8:	99 27       	eor	r25, r25
    73da:	89 2b       	or	r24, r25
    73dc:	b1 f3       	breq	.-20     	; 0x73ca <main+0x142>
			stopDCMotors();
    73de:	0e 94 7f 00 	call	0xfe	; 0xfe <stopDCMotors>
		}

		while(!isInputDataRecevied);
    73e2:	00 00       	nop
    73e4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <isInputDataRecevied>
    73e8:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <isInputDataRecevied+0x1>
    73ec:	89 2b       	or	r24, r25
    73ee:	d1 f3       	breq	.-12     	; 0x73e4 <main+0x15c>
		length=receivedData;
    73f0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <receivedData>
    73f4:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <receivedData+0x1>
    73f8:	9a 87       	std	Y+10, r25	; 0x0a
    73fa:	89 87       	std	Y+9, r24	; 0x09
		isInputDataRecevied=0;
    73fc:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <isInputDataRecevied+0x1>
    7400:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <isInputDataRecevied>
		while(!isInputDataRecevied);
    7404:	00 00       	nop
    7406:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <isInputDataRecevied>
    740a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <isInputDataRecevied+0x1>
    740e:	89 2b       	or	r24, r25
    7410:	d1 f3       	breq	.-12     	; 0x7406 <main+0x17e>
		rounds=receivedData;
    7412:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <receivedData>
    7416:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <receivedData+0x1>
    741a:	9c 87       	std	Y+12, r25	; 0x0c
    741c:	8b 87       	std	Y+11, r24	; 0x0b
		isInputDataRecevied=0;
    741e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <isInputDataRecevied+0x1>
    7422:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <isInputDataRecevied>

		// repeat cutting process(loop rounds time)
		for (int i = 0; i < rounds; i++)
    7426:	1c 82       	std	Y+4, r1	; 0x04
    7428:	1b 82       	std	Y+3, r1	; 0x03
    742a:	c2 c0       	rjmp	.+388    	; 0x75b0 <main+0x328>
		{
			//rotate stepper motor2 and 1 backwards
			rotateStepper_1(0,maxRadius);
    742c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <maxRadius>
    7430:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <maxRadius+0x1>
    7434:	09 2e       	mov	r0, r25
    7436:	00 0c       	add	r0, r0
    7438:	aa 0b       	sbc	r26, r26
    743a:	bb 0b       	sbc	r27, r27
    743c:	bc 01       	movw	r22, r24
    743e:	cd 01       	movw	r24, r26
    7440:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    7444:	dc 01       	movw	r26, r24
    7446:	cb 01       	movw	r24, r22
    7448:	ac 01       	movw	r20, r24
    744a:	bd 01       	movw	r22, r26
    744c:	80 e0       	ldi	r24, 0x00	; 0
    744e:	90 e0       	ldi	r25, 0x00	; 0
    7450:	0e 94 ab 00 	call	0x156	; 0x156 <rotateStepper_1>
			rotateStepper_2(0,maxRadius);
    7454:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <maxRadius>
    7458:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <maxRadius+0x1>
    745c:	09 2e       	mov	r0, r25
    745e:	00 0c       	add	r0, r0
    7460:	aa 0b       	sbc	r26, r26
    7462:	bb 0b       	sbc	r27, r27
    7464:	bc 01       	movw	r22, r24
    7466:	cd 01       	movw	r24, r26
    7468:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    746c:	dc 01       	movw	r26, r24
    746e:	cb 01       	movw	r24, r22
    7470:	ac 01       	movw	r20, r24
    7472:	bd 01       	movw	r22, r26
    7474:	80 e0       	ldi	r24, 0x00	; 0
    7476:	90 e0       	ldi	r25, 0x00	; 0
    7478:	0e 94 02 0c 	call	0x1804	; 0x1804 <rotateStepper_2>
			while ((getUltrasonic_2_Distance() < maxRadius) && (getUltrasonic_3_Distance() < maxRadius));
    747c:	00 00       	nop
    747e:	0e 94 a8 34 	call	0x6950	; 0x6950 <getUltrasonic_2_Distance>
    7482:	9c 01       	movw	r18, r24
    7484:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <maxRadius>
    7488:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <maxRadius+0x1>
    748c:	28 17       	cp	r18, r24
    748e:	39 07       	cpc	r19, r25
    7490:	54 f4       	brge	.+20     	; 0x74a6 <main+0x21e>
    7492:	0e 94 32 36 	call	0x6c64	; 0x6c64 <getUltrasonic_3_Distance>
    7496:	9c 01       	movw	r18, r24
    7498:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <maxRadius>
    749c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <maxRadius+0x1>
    74a0:	28 17       	cp	r18, r24
    74a2:	39 07       	cpc	r19, r25
    74a4:	64 f3       	brlt	.-40     	; 0x747e <main+0x1f6>
			// move pipe forward according to the calculated length
			rotateDCMotors(0);
    74a6:	80 e0       	ldi	r24, 0x00	; 0
    74a8:	90 e0       	ldi	r25, 0x00	; 0
    74aa:	0e 94 49 00 	call	0x92	; 0x92 <rotateDCMotors>
			while(getUltrasonic_1_Distance()>3);
    74ae:	00 00       	nop
    74b0:	0e 94 1e 33 	call	0x663c	; 0x663c <getUltrasonic_1_Distance>
    74b4:	04 97       	sbiw	r24, 0x04	; 4
    74b6:	e4 f7       	brge	.-8      	; 0x74b0 <main+0x228>
			// Check ultrasonic sensor output
			ult2_distance = getUltrasonic_2_Distance();
    74b8:	0e 94 a8 34 	call	0x6950	; 0x6950 <getUltrasonic_2_Distance>
    74bc:	9e 83       	std	Y+6, r25	; 0x06
    74be:	8d 83       	std	Y+5, r24	; 0x05
			ult3_distance = getUltrasonic_3_Distance();
    74c0:	0e 94 32 36 	call	0x6c64	; 0x6c64 <getUltrasonic_3_Distance>
    74c4:	98 87       	std	Y+8, r25	; 0x08
    74c6:	8f 83       	std	Y+7, r24	; 0x07
			//rotate stepper motor2 and 1 forward
			rotateStepper_1(1, ult2_distance);
    74c8:	8d 81       	ldd	r24, Y+5	; 0x05
    74ca:	9e 81       	ldd	r25, Y+6	; 0x06
    74cc:	09 2e       	mov	r0, r25
    74ce:	00 0c       	add	r0, r0
    74d0:	aa 0b       	sbc	r26, r26
    74d2:	bb 0b       	sbc	r27, r27
    74d4:	bc 01       	movw	r22, r24
    74d6:	cd 01       	movw	r24, r26
    74d8:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    74dc:	dc 01       	movw	r26, r24
    74de:	cb 01       	movw	r24, r22
    74e0:	ac 01       	movw	r20, r24
    74e2:	bd 01       	movw	r22, r26
    74e4:	81 e0       	ldi	r24, 0x01	; 1
    74e6:	90 e0       	ldi	r25, 0x00	; 0
    74e8:	0e 94 ab 00 	call	0x156	; 0x156 <rotateStepper_1>
			rotateStepper_2(1, ult3_distance);
    74ec:	8f 81       	ldd	r24, Y+7	; 0x07
    74ee:	98 85       	ldd	r25, Y+8	; 0x08
    74f0:	09 2e       	mov	r0, r25
    74f2:	00 0c       	add	r0, r0
    74f4:	aa 0b       	sbc	r26, r26
    74f6:	bb 0b       	sbc	r27, r27
    74f8:	bc 01       	movw	r22, r24
    74fa:	cd 01       	movw	r24, r26
    74fc:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    7500:	dc 01       	movw	r26, r24
    7502:	cb 01       	movw	r24, r22
    7504:	ac 01       	movw	r20, r24
    7506:	bd 01       	movw	r22, r26
    7508:	81 e0       	ldi	r24, 0x01	; 1
    750a:	90 e0       	ldi	r25, 0x00	; 0
    750c:	0e 94 02 0c 	call	0x1804	; 0x1804 <rotateStepper_2>

			// get ultrasonic1 output distance (distance1)
			ult1_distance=getUltrasonic_1_Distance();
    7510:	0e 94 1e 33 	call	0x663c	; 0x663c <getUltrasonic_1_Distance>
    7514:	9e 87       	std	Y+14, r25	; 0x0e
    7516:	8d 87       	std	Y+13, r24	; 0x0d
			// move clutches though rail until ult1_distance-instantDistance==length
			rotateDCMotors(1);
    7518:	81 e0       	ldi	r24, 0x01	; 1
    751a:	90 e0       	ldi	r25, 0x00	; 0
    751c:	0e 94 49 00 	call	0x92	; 0x92 <rotateDCMotors>
			while((getUltrasonic_1_Distance()-ult1_distance)<length)
    7520:	02 c0       	rjmp	.+4      	; 0x7526 <main+0x29e>
			stopDCMotors();
    7522:	0e 94 7f 00 	call	0xfe	; 0xfe <stopDCMotors>

			// get ultrasonic1 output distance (distance1)
			ult1_distance=getUltrasonic_1_Distance();
			// move clutches though rail until ult1_distance-instantDistance==length
			rotateDCMotors(1);
			while((getUltrasonic_1_Distance()-ult1_distance)<length)
    7526:	0e 94 1e 33 	call	0x663c	; 0x663c <getUltrasonic_1_Distance>
    752a:	9c 01       	movw	r18, r24
    752c:	8d 85       	ldd	r24, Y+13	; 0x0d
    752e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7530:	28 1b       	sub	r18, r24
    7532:	39 0b       	sbc	r19, r25
    7534:	89 85       	ldd	r24, Y+9	; 0x09
    7536:	9a 85       	ldd	r25, Y+10	; 0x0a
    7538:	28 17       	cp	r18, r24
    753a:	39 07       	cpc	r19, r25
    753c:	94 f3       	brlt	.-28     	; 0x7522 <main+0x29a>
			stopDCMotors();
			// rotate stepper motor3 forward
			rotateStepper_3(1,maxRadius);
    753e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <maxRadius>
    7542:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <maxRadius+0x1>
    7546:	09 2e       	mov	r0, r25
    7548:	00 0c       	add	r0, r0
    754a:	aa 0b       	sbc	r26, r26
    754c:	bb 0b       	sbc	r27, r27
    754e:	bc 01       	movw	r22, r24
    7550:	cd 01       	movw	r24, r26
    7552:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    7556:	dc 01       	movw	r26, r24
    7558:	cb 01       	movw	r24, r22
    755a:	ac 01       	movw	r20, r24
    755c:	bd 01       	movw	r22, r26
    755e:	81 e0       	ldi	r24, 0x01	; 1
    7560:	90 e0       	ldi	r25, 0x00	; 0
    7562:	0e 94 9e 18 	call	0x313c	; 0x313c <rotateStepper_3>
			// pipe cutting process
			// start rotating cutting blade DC motor
			sendData("START");
    7566:	8f e6       	ldi	r24, 0x6F	; 111
    7568:	90 e0       	ldi	r25, 0x00	; 0
    756a:	0e 94 07 32 	call	0x640e	; 0x640e <sendData>
			// rotate stepper motor4
			rotateStepper_4(1);
    756e:	81 e0       	ldi	r24, 0x01	; 1
    7570:	90 e0       	ldi	r25, 0x00	; 0
    7572:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <rotateStepper_4>
			rotateStepper_4(0);
    7576:	80 e0       	ldi	r24, 0x00	; 0
    7578:	90 e0       	ldi	r25, 0x00	; 0
    757a:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <rotateStepper_4>
			rotateStepper_3(0,maxRadius);
    757e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <maxRadius>
    7582:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <maxRadius+0x1>
    7586:	09 2e       	mov	r0, r25
    7588:	00 0c       	add	r0, r0
    758a:	aa 0b       	sbc	r26, r26
    758c:	bb 0b       	sbc	r27, r27
    758e:	bc 01       	movw	r22, r24
    7590:	cd 01       	movw	r24, r26
    7592:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    7596:	dc 01       	movw	r26, r24
    7598:	cb 01       	movw	r24, r22
    759a:	ac 01       	movw	r20, r24
    759c:	bd 01       	movw	r22, r26
    759e:	80 e0       	ldi	r24, 0x00	; 0
    75a0:	90 e0       	ldi	r25, 0x00	; 0
    75a2:	0e 94 9e 18 	call	0x313c	; 0x313c <rotateStepper_3>
		while(!isInputDataRecevied);
		rounds=receivedData;
		isInputDataRecevied=0;

		// repeat cutting process(loop rounds time)
		for (int i = 0; i < rounds; i++)
    75a6:	8b 81       	ldd	r24, Y+3	; 0x03
    75a8:	9c 81       	ldd	r25, Y+4	; 0x04
    75aa:	01 96       	adiw	r24, 0x01	; 1
    75ac:	9c 83       	std	Y+4, r25	; 0x04
    75ae:	8b 83       	std	Y+3, r24	; 0x03
    75b0:	2b 81       	ldd	r18, Y+3	; 0x03
    75b2:	3c 81       	ldd	r19, Y+4	; 0x04
    75b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    75b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    75b8:	28 17       	cp	r18, r24
    75ba:	39 07       	cpc	r19, r25
    75bc:	0c f4       	brge	.+2      	; 0x75c0 <main+0x338>
    75be:	36 cf       	rjmp	.-404    	; 0x742c <main+0x1a4>
			rotateStepper_4(0);
			rotateStepper_3(0,maxRadius);
		}

		// check if leftover pipe is waste or not
		if (!(PIND & 1 << PD4)){
    75c0:	80 e3       	ldi	r24, 0x30	; 48
    75c2:	90 e0       	ldi	r25, 0x00	; 0
    75c4:	fc 01       	movw	r30, r24
    75c6:	80 81       	ld	r24, Z
    75c8:	88 2f       	mov	r24, r24
    75ca:	90 e0       	ldi	r25, 0x00	; 0
    75cc:	80 71       	andi	r24, 0x10	; 16
    75ce:	99 27       	eor	r25, r25
    75d0:	89 2b       	or	r24, r25
    75d2:	09 f0       	breq	.+2      	; 0x75d6 <main+0x34e>
    75d4:	6e ce       	rjmp	.-804    	; 0x72b2 <main+0x2a>
			// move both clutches backward though rail
			rotateDCMotors(0);
    75d6:	80 e0       	ldi	r24, 0x00	; 0
    75d8:	90 e0       	ldi	r25, 0x00	; 0
    75da:	0e 94 49 00 	call	0x92	; 0x92 <rotateDCMotors>
			while (getUltrasonic_1_Distance() == wasteBinDistance1)
    75de:	00 00       	nop
    75e0:	0e 94 1e 33 	call	0x663c	; 0x663c <getUltrasonic_1_Distance>
    75e4:	9c 01       	movw	r18, r24
    75e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    75ea:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    75ee:	28 17       	cp	r18, r24
    75f0:	39 07       	cpc	r19, r25
    75f2:	b1 f3       	breq	.-20     	; 0x75e0 <main+0x358>
			;
			stopDCMotors();
    75f4:	0e 94 7f 00 	call	0xfe	; 0xfe <stopDCMotors>
			if (isMetal){
    75f8:	89 81       	ldd	r24, Y+1	; 0x01
    75fa:	9a 81       	ldd	r25, Y+2	; 0x02
    75fc:	89 2b       	or	r24, r25
    75fe:	09 f4       	brne	.+2      	; 0x7602 <main+0x37a>
    7600:	c3 c0       	rjmp	.+390    	; 0x7788 <main+0x500>
				// move clutch1 backward && clutch2 forward
				rotateStepper_1(0,wasteBinDistance2);
    7602:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <wasteBinDistance2>
    7606:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <wasteBinDistance2+0x1>
    760a:	09 2e       	mov	r0, r25
    760c:	00 0c       	add	r0, r0
    760e:	aa 0b       	sbc	r26, r26
    7610:	bb 0b       	sbc	r27, r27
    7612:	bc 01       	movw	r22, r24
    7614:	cd 01       	movw	r24, r26
    7616:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    761a:	dc 01       	movw	r26, r24
    761c:	cb 01       	movw	r24, r22
    761e:	ac 01       	movw	r20, r24
    7620:	bd 01       	movw	r22, r26
    7622:	80 e0       	ldi	r24, 0x00	; 0
    7624:	90 e0       	ldi	r25, 0x00	; 0
    7626:	0e 94 ab 00 	call	0x156	; 0x156 <rotateStepper_1>
				rotateStepper_2(1,wasteBinDistance2);
    762a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <wasteBinDistance2>
    762e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <wasteBinDistance2+0x1>
    7632:	09 2e       	mov	r0, r25
    7634:	00 0c       	add	r0, r0
    7636:	aa 0b       	sbc	r26, r26
    7638:	bb 0b       	sbc	r27, r27
    763a:	bc 01       	movw	r22, r24
    763c:	cd 01       	movw	r24, r26
    763e:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    7642:	dc 01       	movw	r26, r24
    7644:	cb 01       	movw	r24, r22
    7646:	ac 01       	movw	r20, r24
    7648:	bd 01       	movw	r22, r26
    764a:	81 e0       	ldi	r24, 0x01	; 1
    764c:	90 e0       	ldi	r25, 0x00	; 0
    764e:	0e 94 02 0c 	call	0x1804	; 0x1804 <rotateStepper_2>
				// when position correctly, drop wastage
				rotateStepper_2(0,wasteBinDistance2);
    7652:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <wasteBinDistance2>
    7656:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <wasteBinDistance2+0x1>
    765a:	09 2e       	mov	r0, r25
    765c:	00 0c       	add	r0, r0
    765e:	aa 0b       	sbc	r26, r26
    7660:	bb 0b       	sbc	r27, r27
    7662:	bc 01       	movw	r22, r24
    7664:	cd 01       	movw	r24, r26
    7666:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    766a:	dc 01       	movw	r26, r24
    766c:	cb 01       	movw	r24, r22
    766e:	ac 01       	movw	r20, r24
    7670:	bd 01       	movw	r22, r26
    7672:	80 e0       	ldi	r24, 0x00	; 0
    7674:	90 e0       	ldi	r25, 0x00	; 0
    7676:	0e 94 02 0c 	call	0x1804	; 0x1804 <rotateStepper_2>
    767a:	80 e0       	ldi	r24, 0x00	; 0
    767c:	90 e0       	ldi	r25, 0x00	; 0
    767e:	a8 ec       	ldi	r26, 0xC8	; 200
    7680:	b2 e4       	ldi	r27, 0x42	; 66
    7682:	8b 8b       	std	Y+19, r24	; 0x13
    7684:	9c 8b       	std	Y+20, r25	; 0x14
    7686:	ad 8b       	std	Y+21, r26	; 0x15
    7688:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    768a:	20 e0       	ldi	r18, 0x00	; 0
    768c:	30 e0       	ldi	r19, 0x00	; 0
    768e:	4a e7       	ldi	r20, 0x7A	; 122
    7690:	55 e4       	ldi	r21, 0x45	; 69
    7692:	6b 89       	ldd	r22, Y+19	; 0x13
    7694:	7c 89       	ldd	r23, Y+20	; 0x14
    7696:	8d 89       	ldd	r24, Y+21	; 0x15
    7698:	9e 89       	ldd	r25, Y+22	; 0x16
    769a:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    769e:	dc 01       	movw	r26, r24
    76a0:	cb 01       	movw	r24, r22
    76a2:	8f 8b       	std	Y+23, r24	; 0x17
    76a4:	98 8f       	std	Y+24, r25	; 0x18
    76a6:	a9 8f       	std	Y+25, r26	; 0x19
    76a8:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    76aa:	20 e0       	ldi	r18, 0x00	; 0
    76ac:	30 e0       	ldi	r19, 0x00	; 0
    76ae:	40 e8       	ldi	r20, 0x80	; 128
    76b0:	5f e3       	ldi	r21, 0x3F	; 63
    76b2:	6f 89       	ldd	r22, Y+23	; 0x17
    76b4:	78 8d       	ldd	r23, Y+24	; 0x18
    76b6:	89 8d       	ldd	r24, Y+25	; 0x19
    76b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    76ba:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    76be:	88 23       	and	r24, r24
    76c0:	2c f4       	brge	.+10     	; 0x76cc <main+0x444>
		__ticks = 1;
    76c2:	81 e0       	ldi	r24, 0x01	; 1
    76c4:	90 e0       	ldi	r25, 0x00	; 0
    76c6:	9c 8f       	std	Y+28, r25	; 0x1c
    76c8:	8b 8f       	std	Y+27, r24	; 0x1b
    76ca:	3f c0       	rjmp	.+126    	; 0x774a <main+0x4c2>
	else if (__tmp > 65535)
    76cc:	20 e0       	ldi	r18, 0x00	; 0
    76ce:	3f ef       	ldi	r19, 0xFF	; 255
    76d0:	4f e7       	ldi	r20, 0x7F	; 127
    76d2:	57 e4       	ldi	r21, 0x47	; 71
    76d4:	6f 89       	ldd	r22, Y+23	; 0x17
    76d6:	78 8d       	ldd	r23, Y+24	; 0x18
    76d8:	89 8d       	ldd	r24, Y+25	; 0x19
    76da:	9a 8d       	ldd	r25, Y+26	; 0x1a
    76dc:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    76e0:	18 16       	cp	r1, r24
    76e2:	4c f5       	brge	.+82     	; 0x7736 <main+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    76e4:	20 e0       	ldi	r18, 0x00	; 0
    76e6:	30 e0       	ldi	r19, 0x00	; 0
    76e8:	40 e2       	ldi	r20, 0x20	; 32
    76ea:	51 e4       	ldi	r21, 0x41	; 65
    76ec:	6b 89       	ldd	r22, Y+19	; 0x13
    76ee:	7c 89       	ldd	r23, Y+20	; 0x14
    76f0:	8d 89       	ldd	r24, Y+21	; 0x15
    76f2:	9e 89       	ldd	r25, Y+22	; 0x16
    76f4:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    76f8:	dc 01       	movw	r26, r24
    76fa:	cb 01       	movw	r24, r22
    76fc:	bc 01       	movw	r22, r24
    76fe:	cd 01       	movw	r24, r26
    7700:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    7704:	dc 01       	movw	r26, r24
    7706:	cb 01       	movw	r24, r22
    7708:	9c 8f       	std	Y+28, r25	; 0x1c
    770a:	8b 8f       	std	Y+27, r24	; 0x1b
    770c:	0f c0       	rjmp	.+30     	; 0x772c <main+0x4a4>
    770e:	80 e9       	ldi	r24, 0x90	; 144
    7710:	91 e0       	ldi	r25, 0x01	; 1
    7712:	9e 8f       	std	Y+30, r25	; 0x1e
    7714:	8d 8f       	std	Y+29, r24	; 0x1d
    7716:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7718:	9e 8d       	ldd	r25, Y+30	; 0x1e
    771a:	01 97       	sbiw	r24, 0x01	; 1
    771c:	f1 f7       	brne	.-4      	; 0x771a <main+0x492>
    771e:	9e 8f       	std	Y+30, r25	; 0x1e
    7720:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7722:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7724:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7726:	01 97       	sbiw	r24, 0x01	; 1
    7728:	9c 8f       	std	Y+28, r25	; 0x1c
    772a:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    772c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    772e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7730:	89 2b       	or	r24, r25
    7732:	69 f7       	brne	.-38     	; 0x770e <main+0x486>
    7734:	14 c0       	rjmp	.+40     	; 0x775e <main+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7736:	6f 89       	ldd	r22, Y+23	; 0x17
    7738:	78 8d       	ldd	r23, Y+24	; 0x18
    773a:	89 8d       	ldd	r24, Y+25	; 0x19
    773c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    773e:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    7742:	dc 01       	movw	r26, r24
    7744:	cb 01       	movw	r24, r22
    7746:	9c 8f       	std	Y+28, r25	; 0x1c
    7748:	8b 8f       	std	Y+27, r24	; 0x1b
    774a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    774c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    774e:	98 a3       	std	Y+32, r25	; 0x20
    7750:	8f 8f       	std	Y+31, r24	; 0x1f
    7752:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7754:	98 a1       	ldd	r25, Y+32	; 0x20
    7756:	01 97       	sbiw	r24, 0x01	; 1
    7758:	f1 f7       	brne	.-4      	; 0x7756 <main+0x4ce>
    775a:	98 a3       	std	Y+32, r25	; 0x20
    775c:	8f 8f       	std	Y+31, r24	; 0x1f
				_delay_ms(100);
				rotateStepper_1(1,wasteBinDistance2);
    775e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <wasteBinDistance2>
    7762:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <wasteBinDistance2+0x1>
    7766:	09 2e       	mov	r0, r25
    7768:	00 0c       	add	r0, r0
    776a:	aa 0b       	sbc	r26, r26
    776c:	bb 0b       	sbc	r27, r27
    776e:	bc 01       	movw	r22, r24
    7770:	cd 01       	movw	r24, r26
    7772:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    7776:	dc 01       	movw	r26, r24
    7778:	cb 01       	movw	r24, r22
    777a:	ac 01       	movw	r20, r24
    777c:	bd 01       	movw	r22, r26
    777e:	81 e0       	ldi	r24, 0x01	; 1
    7780:	90 e0       	ldi	r25, 0x00	; 0
    7782:	0e 94 ab 00 	call	0x156	; 0x156 <rotateStepper_1>
    7786:	95 cd       	rjmp	.-1238   	; 0x72b2 <main+0x2a>
				}else{
				// move clutch2 backward && clutch1 forward
				rotateStepper_1(1,wasteBinDistance2);
    7788:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <wasteBinDistance2>
    778c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <wasteBinDistance2+0x1>
    7790:	09 2e       	mov	r0, r25
    7792:	00 0c       	add	r0, r0
    7794:	aa 0b       	sbc	r26, r26
    7796:	bb 0b       	sbc	r27, r27
    7798:	bc 01       	movw	r22, r24
    779a:	cd 01       	movw	r24, r26
    779c:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    77a0:	dc 01       	movw	r26, r24
    77a2:	cb 01       	movw	r24, r22
    77a4:	ac 01       	movw	r20, r24
    77a6:	bd 01       	movw	r22, r26
    77a8:	81 e0       	ldi	r24, 0x01	; 1
    77aa:	90 e0       	ldi	r25, 0x00	; 0
    77ac:	0e 94 ab 00 	call	0x156	; 0x156 <rotateStepper_1>
				rotateStepper_2(0,wasteBinDistance2);
    77b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <wasteBinDistance2>
    77b4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <wasteBinDistance2+0x1>
    77b8:	09 2e       	mov	r0, r25
    77ba:	00 0c       	add	r0, r0
    77bc:	aa 0b       	sbc	r26, r26
    77be:	bb 0b       	sbc	r27, r27
    77c0:	bc 01       	movw	r22, r24
    77c2:	cd 01       	movw	r24, r26
    77c4:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    77c8:	dc 01       	movw	r26, r24
    77ca:	cb 01       	movw	r24, r22
    77cc:	ac 01       	movw	r20, r24
    77ce:	bd 01       	movw	r22, r26
    77d0:	80 e0       	ldi	r24, 0x00	; 0
    77d2:	90 e0       	ldi	r25, 0x00	; 0
    77d4:	0e 94 02 0c 	call	0x1804	; 0x1804 <rotateStepper_2>
				// when position correctly, drop wastage
				rotateStepper_1(0,wasteBinDistance2);
    77d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <wasteBinDistance2>
    77dc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <wasteBinDistance2+0x1>
    77e0:	09 2e       	mov	r0, r25
    77e2:	00 0c       	add	r0, r0
    77e4:	aa 0b       	sbc	r26, r26
    77e6:	bb 0b       	sbc	r27, r27
    77e8:	bc 01       	movw	r22, r24
    77ea:	cd 01       	movw	r24, r26
    77ec:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    77f0:	dc 01       	movw	r26, r24
    77f2:	cb 01       	movw	r24, r22
    77f4:	ac 01       	movw	r20, r24
    77f6:	bd 01       	movw	r22, r26
    77f8:	80 e0       	ldi	r24, 0x00	; 0
    77fa:	90 e0       	ldi	r25, 0x00	; 0
    77fc:	0e 94 ab 00 	call	0x156	; 0x156 <rotateStepper_1>
    7800:	80 e0       	ldi	r24, 0x00	; 0
    7802:	90 e0       	ldi	r25, 0x00	; 0
    7804:	a8 ec       	ldi	r26, 0xC8	; 200
    7806:	b2 e4       	ldi	r27, 0x42	; 66
    7808:	8f 87       	std	Y+15, r24	; 0x0f
    780a:	98 8b       	std	Y+16, r25	; 0x10
    780c:	a9 8b       	std	Y+17, r26	; 0x11
    780e:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    7810:	20 e0       	ldi	r18, 0x00	; 0
    7812:	30 e0       	ldi	r19, 0x00	; 0
    7814:	4a e7       	ldi	r20, 0x7A	; 122
    7816:	55 e4       	ldi	r21, 0x45	; 69
    7818:	6f 85       	ldd	r22, Y+15	; 0x0f
    781a:	78 89       	ldd	r23, Y+16	; 0x10
    781c:	89 89       	ldd	r24, Y+17	; 0x11
    781e:	9a 89       	ldd	r25, Y+18	; 0x12
    7820:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    7824:	dc 01       	movw	r26, r24
    7826:	cb 01       	movw	r24, r22
    7828:	89 a3       	std	Y+33, r24	; 0x21
    782a:	9a a3       	std	Y+34, r25	; 0x22
    782c:	ab a3       	std	Y+35, r26	; 0x23
    782e:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    7830:	20 e0       	ldi	r18, 0x00	; 0
    7832:	30 e0       	ldi	r19, 0x00	; 0
    7834:	40 e8       	ldi	r20, 0x80	; 128
    7836:	5f e3       	ldi	r21, 0x3F	; 63
    7838:	69 a1       	ldd	r22, Y+33	; 0x21
    783a:	7a a1       	ldd	r23, Y+34	; 0x22
    783c:	8b a1       	ldd	r24, Y+35	; 0x23
    783e:	9c a1       	ldd	r25, Y+36	; 0x24
    7840:	0e 94 87 3c 	call	0x790e	; 0x790e <__cmpsf2>
    7844:	88 23       	and	r24, r24
    7846:	2c f4       	brge	.+10     	; 0x7852 <main+0x5ca>
		__ticks = 1;
    7848:	81 e0       	ldi	r24, 0x01	; 1
    784a:	90 e0       	ldi	r25, 0x00	; 0
    784c:	9e a3       	std	Y+38, r25	; 0x26
    784e:	8d a3       	std	Y+37, r24	; 0x25
    7850:	3f c0       	rjmp	.+126    	; 0x78d0 <main+0x648>
	else if (__tmp > 65535)
    7852:	20 e0       	ldi	r18, 0x00	; 0
    7854:	3f ef       	ldi	r19, 0xFF	; 255
    7856:	4f e7       	ldi	r20, 0x7F	; 127
    7858:	57 e4       	ldi	r21, 0x47	; 71
    785a:	69 a1       	ldd	r22, Y+33	; 0x21
    785c:	7a a1       	ldd	r23, Y+34	; 0x22
    785e:	8b a1       	ldd	r24, Y+35	; 0x23
    7860:	9c a1       	ldd	r25, Y+36	; 0x24
    7862:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__gesf2>
    7866:	18 16       	cp	r1, r24
    7868:	4c f5       	brge	.+82     	; 0x78bc <main+0x634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    786a:	20 e0       	ldi	r18, 0x00	; 0
    786c:	30 e0       	ldi	r19, 0x00	; 0
    786e:	40 e2       	ldi	r20, 0x20	; 32
    7870:	51 e4       	ldi	r21, 0x41	; 65
    7872:	6f 85       	ldd	r22, Y+15	; 0x0f
    7874:	78 89       	ldd	r23, Y+16	; 0x10
    7876:	89 89       	ldd	r24, Y+17	; 0x11
    7878:	9a 89       	ldd	r25, Y+18	; 0x12
    787a:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <__mulsf3>
    787e:	dc 01       	movw	r26, r24
    7880:	cb 01       	movw	r24, r22
    7882:	bc 01       	movw	r22, r24
    7884:	cd 01       	movw	r24, r26
    7886:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    788a:	dc 01       	movw	r26, r24
    788c:	cb 01       	movw	r24, r22
    788e:	9e a3       	std	Y+38, r25	; 0x26
    7890:	8d a3       	std	Y+37, r24	; 0x25
    7892:	0f c0       	rjmp	.+30     	; 0x78b2 <main+0x62a>
    7894:	80 e9       	ldi	r24, 0x90	; 144
    7896:	91 e0       	ldi	r25, 0x01	; 1
    7898:	98 a7       	std	Y+40, r25	; 0x28
    789a:	8f a3       	std	Y+39, r24	; 0x27
    789c:	8f a1       	ldd	r24, Y+39	; 0x27
    789e:	98 a5       	ldd	r25, Y+40	; 0x28
    78a0:	01 97       	sbiw	r24, 0x01	; 1
    78a2:	f1 f7       	brne	.-4      	; 0x78a0 <main+0x618>
    78a4:	98 a7       	std	Y+40, r25	; 0x28
    78a6:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    78a8:	8d a1       	ldd	r24, Y+37	; 0x25
    78aa:	9e a1       	ldd	r25, Y+38	; 0x26
    78ac:	01 97       	sbiw	r24, 0x01	; 1
    78ae:	9e a3       	std	Y+38, r25	; 0x26
    78b0:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    78b2:	8d a1       	ldd	r24, Y+37	; 0x25
    78b4:	9e a1       	ldd	r25, Y+38	; 0x26
    78b6:	89 2b       	or	r24, r25
    78b8:	69 f7       	brne	.-38     	; 0x7894 <main+0x60c>
    78ba:	14 c0       	rjmp	.+40     	; 0x78e4 <main+0x65c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    78bc:	69 a1       	ldd	r22, Y+33	; 0x21
    78be:	7a a1       	ldd	r23, Y+34	; 0x22
    78c0:	8b a1       	ldd	r24, Y+35	; 0x23
    78c2:	9c a1       	ldd	r25, Y+36	; 0x24
    78c4:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    78c8:	dc 01       	movw	r26, r24
    78ca:	cb 01       	movw	r24, r22
    78cc:	9e a3       	std	Y+38, r25	; 0x26
    78ce:	8d a3       	std	Y+37, r24	; 0x25
    78d0:	8d a1       	ldd	r24, Y+37	; 0x25
    78d2:	9e a1       	ldd	r25, Y+38	; 0x26
    78d4:	9a a7       	std	Y+42, r25	; 0x2a
    78d6:	89 a7       	std	Y+41, r24	; 0x29
    78d8:	89 a5       	ldd	r24, Y+41	; 0x29
    78da:	9a a5       	ldd	r25, Y+42	; 0x2a
    78dc:	01 97       	sbiw	r24, 0x01	; 1
    78de:	f1 f7       	brne	.-4      	; 0x78dc <main+0x654>
    78e0:	9a a7       	std	Y+42, r25	; 0x2a
    78e2:	89 a7       	std	Y+41, r24	; 0x29
				_delay_ms(100);
				rotateStepper_2(1,wasteBinDistance2);
    78e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <wasteBinDistance2>
    78e8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <wasteBinDistance2+0x1>
    78ec:	09 2e       	mov	r0, r25
    78ee:	00 0c       	add	r0, r0
    78f0:	aa 0b       	sbc	r26, r26
    78f2:	bb 0b       	sbc	r27, r27
    78f4:	bc 01       	movw	r22, r24
    78f6:	cd 01       	movw	r24, r26
    78f8:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <__floatsisf>
    78fc:	dc 01       	movw	r26, r24
    78fe:	cb 01       	movw	r24, r22
    7900:	ac 01       	movw	r20, r24
    7902:	bd 01       	movw	r22, r26
    7904:	81 e0       	ldi	r24, 0x01	; 1
    7906:	90 e0       	ldi	r25, 0x00	; 0
    7908:	0e 94 02 0c 	call	0x1804	; 0x1804 <rotateStepper_2>
			}
		}
	}
    790c:	d2 cc       	rjmp	.-1628   	; 0x72b2 <main+0x2a>

0000790e <__cmpsf2>:
    790e:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <__fp_cmp>
    7912:	08 f4       	brcc	.+2      	; 0x7916 <__cmpsf2+0x8>
    7914:	81 e0       	ldi	r24, 0x01	; 1
    7916:	08 95       	ret

00007918 <__divsf3>:
    7918:	0e 94 a0 3c 	call	0x7940	; 0x7940 <__divsf3x>
    791c:	0c 94 ac 3d 	jmp	0x7b58	; 0x7b58 <__fp_round>
    7920:	0e 94 a5 3d 	call	0x7b4a	; 0x7b4a <__fp_pscB>
    7924:	58 f0       	brcs	.+22     	; 0x793c <__divsf3+0x24>
    7926:	0e 94 9e 3d 	call	0x7b3c	; 0x7b3c <__fp_pscA>
    792a:	40 f0       	brcs	.+16     	; 0x793c <__divsf3+0x24>
    792c:	29 f4       	brne	.+10     	; 0x7938 <__divsf3+0x20>
    792e:	5f 3f       	cpi	r21, 0xFF	; 255
    7930:	29 f0       	breq	.+10     	; 0x793c <__divsf3+0x24>
    7932:	0c 94 95 3d 	jmp	0x7b2a	; 0x7b2a <__fp_inf>
    7936:	51 11       	cpse	r21, r1
    7938:	0c 94 e0 3d 	jmp	0x7bc0	; 0x7bc0 <__fp_szero>
    793c:	0c 94 9b 3d 	jmp	0x7b36	; 0x7b36 <__fp_nan>

00007940 <__divsf3x>:
    7940:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <__fp_split3>
    7944:	68 f3       	brcs	.-38     	; 0x7920 <__divsf3+0x8>

00007946 <__divsf3_pse>:
    7946:	99 23       	and	r25, r25
    7948:	b1 f3       	breq	.-20     	; 0x7936 <__divsf3+0x1e>
    794a:	55 23       	and	r21, r21
    794c:	91 f3       	breq	.-28     	; 0x7932 <__divsf3+0x1a>
    794e:	95 1b       	sub	r25, r21
    7950:	55 0b       	sbc	r21, r21
    7952:	bb 27       	eor	r27, r27
    7954:	aa 27       	eor	r26, r26
    7956:	62 17       	cp	r22, r18
    7958:	73 07       	cpc	r23, r19
    795a:	84 07       	cpc	r24, r20
    795c:	38 f0       	brcs	.+14     	; 0x796c <__divsf3_pse+0x26>
    795e:	9f 5f       	subi	r25, 0xFF	; 255
    7960:	5f 4f       	sbci	r21, 0xFF	; 255
    7962:	22 0f       	add	r18, r18
    7964:	33 1f       	adc	r19, r19
    7966:	44 1f       	adc	r20, r20
    7968:	aa 1f       	adc	r26, r26
    796a:	a9 f3       	breq	.-22     	; 0x7956 <__divsf3_pse+0x10>
    796c:	35 d0       	rcall	.+106    	; 0x79d8 <__divsf3_pse+0x92>
    796e:	0e 2e       	mov	r0, r30
    7970:	3a f0       	brmi	.+14     	; 0x7980 <__divsf3_pse+0x3a>
    7972:	e0 e8       	ldi	r30, 0x80	; 128
    7974:	32 d0       	rcall	.+100    	; 0x79da <__divsf3_pse+0x94>
    7976:	91 50       	subi	r25, 0x01	; 1
    7978:	50 40       	sbci	r21, 0x00	; 0
    797a:	e6 95       	lsr	r30
    797c:	00 1c       	adc	r0, r0
    797e:	ca f7       	brpl	.-14     	; 0x7972 <__divsf3_pse+0x2c>
    7980:	2b d0       	rcall	.+86     	; 0x79d8 <__divsf3_pse+0x92>
    7982:	fe 2f       	mov	r31, r30
    7984:	29 d0       	rcall	.+82     	; 0x79d8 <__divsf3_pse+0x92>
    7986:	66 0f       	add	r22, r22
    7988:	77 1f       	adc	r23, r23
    798a:	88 1f       	adc	r24, r24
    798c:	bb 1f       	adc	r27, r27
    798e:	26 17       	cp	r18, r22
    7990:	37 07       	cpc	r19, r23
    7992:	48 07       	cpc	r20, r24
    7994:	ab 07       	cpc	r26, r27
    7996:	b0 e8       	ldi	r27, 0x80	; 128
    7998:	09 f0       	breq	.+2      	; 0x799c <__divsf3_pse+0x56>
    799a:	bb 0b       	sbc	r27, r27
    799c:	80 2d       	mov	r24, r0
    799e:	bf 01       	movw	r22, r30
    79a0:	ff 27       	eor	r31, r31
    79a2:	93 58       	subi	r25, 0x83	; 131
    79a4:	5f 4f       	sbci	r21, 0xFF	; 255
    79a6:	3a f0       	brmi	.+14     	; 0x79b6 <__divsf3_pse+0x70>
    79a8:	9e 3f       	cpi	r25, 0xFE	; 254
    79aa:	51 05       	cpc	r21, r1
    79ac:	78 f0       	brcs	.+30     	; 0x79cc <__divsf3_pse+0x86>
    79ae:	0c 94 95 3d 	jmp	0x7b2a	; 0x7b2a <__fp_inf>
    79b2:	0c 94 e0 3d 	jmp	0x7bc0	; 0x7bc0 <__fp_szero>
    79b6:	5f 3f       	cpi	r21, 0xFF	; 255
    79b8:	e4 f3       	brlt	.-8      	; 0x79b2 <__divsf3_pse+0x6c>
    79ba:	98 3e       	cpi	r25, 0xE8	; 232
    79bc:	d4 f3       	brlt	.-12     	; 0x79b2 <__divsf3_pse+0x6c>
    79be:	86 95       	lsr	r24
    79c0:	77 95       	ror	r23
    79c2:	67 95       	ror	r22
    79c4:	b7 95       	ror	r27
    79c6:	f7 95       	ror	r31
    79c8:	9f 5f       	subi	r25, 0xFF	; 255
    79ca:	c9 f7       	brne	.-14     	; 0x79be <__divsf3_pse+0x78>
    79cc:	88 0f       	add	r24, r24
    79ce:	91 1d       	adc	r25, r1
    79d0:	96 95       	lsr	r25
    79d2:	87 95       	ror	r24
    79d4:	97 f9       	bld	r25, 7
    79d6:	08 95       	ret
    79d8:	e1 e0       	ldi	r30, 0x01	; 1
    79da:	66 0f       	add	r22, r22
    79dc:	77 1f       	adc	r23, r23
    79de:	88 1f       	adc	r24, r24
    79e0:	bb 1f       	adc	r27, r27
    79e2:	62 17       	cp	r22, r18
    79e4:	73 07       	cpc	r23, r19
    79e6:	84 07       	cpc	r24, r20
    79e8:	ba 07       	cpc	r27, r26
    79ea:	20 f0       	brcs	.+8      	; 0x79f4 <__divsf3_pse+0xae>
    79ec:	62 1b       	sub	r22, r18
    79ee:	73 0b       	sbc	r23, r19
    79f0:	84 0b       	sbc	r24, r20
    79f2:	ba 0b       	sbc	r27, r26
    79f4:	ee 1f       	adc	r30, r30
    79f6:	88 f7       	brcc	.-30     	; 0x79da <__divsf3_pse+0x94>
    79f8:	e0 95       	com	r30
    79fa:	08 95       	ret

000079fc <__fixsfsi>:
    79fc:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <__fixunssfsi>
    7a00:	68 94       	set
    7a02:	b1 11       	cpse	r27, r1
    7a04:	0c 94 e0 3d 	jmp	0x7bc0	; 0x7bc0 <__fp_szero>
    7a08:	08 95       	ret

00007a0a <__fixunssfsi>:
    7a0a:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <__fp_splitA>
    7a0e:	88 f0       	brcs	.+34     	; 0x7a32 <__fixunssfsi+0x28>
    7a10:	9f 57       	subi	r25, 0x7F	; 127
    7a12:	98 f0       	brcs	.+38     	; 0x7a3a <__fixunssfsi+0x30>
    7a14:	b9 2f       	mov	r27, r25
    7a16:	99 27       	eor	r25, r25
    7a18:	b7 51       	subi	r27, 0x17	; 23
    7a1a:	b0 f0       	brcs	.+44     	; 0x7a48 <__fixunssfsi+0x3e>
    7a1c:	e1 f0       	breq	.+56     	; 0x7a56 <__fixunssfsi+0x4c>
    7a1e:	66 0f       	add	r22, r22
    7a20:	77 1f       	adc	r23, r23
    7a22:	88 1f       	adc	r24, r24
    7a24:	99 1f       	adc	r25, r25
    7a26:	1a f0       	brmi	.+6      	; 0x7a2e <__fixunssfsi+0x24>
    7a28:	ba 95       	dec	r27
    7a2a:	c9 f7       	brne	.-14     	; 0x7a1e <__fixunssfsi+0x14>
    7a2c:	14 c0       	rjmp	.+40     	; 0x7a56 <__fixunssfsi+0x4c>
    7a2e:	b1 30       	cpi	r27, 0x01	; 1
    7a30:	91 f0       	breq	.+36     	; 0x7a56 <__fixunssfsi+0x4c>
    7a32:	0e 94 df 3d 	call	0x7bbe	; 0x7bbe <__fp_zero>
    7a36:	b1 e0       	ldi	r27, 0x01	; 1
    7a38:	08 95       	ret
    7a3a:	0c 94 df 3d 	jmp	0x7bbe	; 0x7bbe <__fp_zero>
    7a3e:	67 2f       	mov	r22, r23
    7a40:	78 2f       	mov	r23, r24
    7a42:	88 27       	eor	r24, r24
    7a44:	b8 5f       	subi	r27, 0xF8	; 248
    7a46:	39 f0       	breq	.+14     	; 0x7a56 <__fixunssfsi+0x4c>
    7a48:	b9 3f       	cpi	r27, 0xF9	; 249
    7a4a:	cc f3       	brlt	.-14     	; 0x7a3e <__fixunssfsi+0x34>
    7a4c:	86 95       	lsr	r24
    7a4e:	77 95       	ror	r23
    7a50:	67 95       	ror	r22
    7a52:	b3 95       	inc	r27
    7a54:	d9 f7       	brne	.-10     	; 0x7a4c <__fixunssfsi+0x42>
    7a56:	3e f4       	brtc	.+14     	; 0x7a66 <__fixunssfsi+0x5c>
    7a58:	90 95       	com	r25
    7a5a:	80 95       	com	r24
    7a5c:	70 95       	com	r23
    7a5e:	61 95       	neg	r22
    7a60:	7f 4f       	sbci	r23, 0xFF	; 255
    7a62:	8f 4f       	sbci	r24, 0xFF	; 255
    7a64:	9f 4f       	sbci	r25, 0xFF	; 255
    7a66:	08 95       	ret

00007a68 <__floatunsisf>:
    7a68:	e8 94       	clt
    7a6a:	09 c0       	rjmp	.+18     	; 0x7a7e <__floatsisf+0x12>

00007a6c <__floatsisf>:
    7a6c:	97 fb       	bst	r25, 7
    7a6e:	3e f4       	brtc	.+14     	; 0x7a7e <__floatsisf+0x12>
    7a70:	90 95       	com	r25
    7a72:	80 95       	com	r24
    7a74:	70 95       	com	r23
    7a76:	61 95       	neg	r22
    7a78:	7f 4f       	sbci	r23, 0xFF	; 255
    7a7a:	8f 4f       	sbci	r24, 0xFF	; 255
    7a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    7a7e:	99 23       	and	r25, r25
    7a80:	a9 f0       	breq	.+42     	; 0x7aac <__floatsisf+0x40>
    7a82:	f9 2f       	mov	r31, r25
    7a84:	96 e9       	ldi	r25, 0x96	; 150
    7a86:	bb 27       	eor	r27, r27
    7a88:	93 95       	inc	r25
    7a8a:	f6 95       	lsr	r31
    7a8c:	87 95       	ror	r24
    7a8e:	77 95       	ror	r23
    7a90:	67 95       	ror	r22
    7a92:	b7 95       	ror	r27
    7a94:	f1 11       	cpse	r31, r1
    7a96:	f8 cf       	rjmp	.-16     	; 0x7a88 <__floatsisf+0x1c>
    7a98:	fa f4       	brpl	.+62     	; 0x7ad8 <__floatsisf+0x6c>
    7a9a:	bb 0f       	add	r27, r27
    7a9c:	11 f4       	brne	.+4      	; 0x7aa2 <__floatsisf+0x36>
    7a9e:	60 ff       	sbrs	r22, 0
    7aa0:	1b c0       	rjmp	.+54     	; 0x7ad8 <__floatsisf+0x6c>
    7aa2:	6f 5f       	subi	r22, 0xFF	; 255
    7aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    7aa6:	8f 4f       	sbci	r24, 0xFF	; 255
    7aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    7aaa:	16 c0       	rjmp	.+44     	; 0x7ad8 <__floatsisf+0x6c>
    7aac:	88 23       	and	r24, r24
    7aae:	11 f0       	breq	.+4      	; 0x7ab4 <__floatsisf+0x48>
    7ab0:	96 e9       	ldi	r25, 0x96	; 150
    7ab2:	11 c0       	rjmp	.+34     	; 0x7ad6 <__floatsisf+0x6a>
    7ab4:	77 23       	and	r23, r23
    7ab6:	21 f0       	breq	.+8      	; 0x7ac0 <__floatsisf+0x54>
    7ab8:	9e e8       	ldi	r25, 0x8E	; 142
    7aba:	87 2f       	mov	r24, r23
    7abc:	76 2f       	mov	r23, r22
    7abe:	05 c0       	rjmp	.+10     	; 0x7aca <__floatsisf+0x5e>
    7ac0:	66 23       	and	r22, r22
    7ac2:	71 f0       	breq	.+28     	; 0x7ae0 <__floatsisf+0x74>
    7ac4:	96 e8       	ldi	r25, 0x86	; 134
    7ac6:	86 2f       	mov	r24, r22
    7ac8:	70 e0       	ldi	r23, 0x00	; 0
    7aca:	60 e0       	ldi	r22, 0x00	; 0
    7acc:	2a f0       	brmi	.+10     	; 0x7ad8 <__floatsisf+0x6c>
    7ace:	9a 95       	dec	r25
    7ad0:	66 0f       	add	r22, r22
    7ad2:	77 1f       	adc	r23, r23
    7ad4:	88 1f       	adc	r24, r24
    7ad6:	da f7       	brpl	.-10     	; 0x7ace <__floatsisf+0x62>
    7ad8:	88 0f       	add	r24, r24
    7ada:	96 95       	lsr	r25
    7adc:	87 95       	ror	r24
    7ade:	97 f9       	bld	r25, 7
    7ae0:	08 95       	ret

00007ae2 <__fp_cmp>:
    7ae2:	99 0f       	add	r25, r25
    7ae4:	00 08       	sbc	r0, r0
    7ae6:	55 0f       	add	r21, r21
    7ae8:	aa 0b       	sbc	r26, r26
    7aea:	e0 e8       	ldi	r30, 0x80	; 128
    7aec:	fe ef       	ldi	r31, 0xFE	; 254
    7aee:	16 16       	cp	r1, r22
    7af0:	17 06       	cpc	r1, r23
    7af2:	e8 07       	cpc	r30, r24
    7af4:	f9 07       	cpc	r31, r25
    7af6:	c0 f0       	brcs	.+48     	; 0x7b28 <__fp_cmp+0x46>
    7af8:	12 16       	cp	r1, r18
    7afa:	13 06       	cpc	r1, r19
    7afc:	e4 07       	cpc	r30, r20
    7afe:	f5 07       	cpc	r31, r21
    7b00:	98 f0       	brcs	.+38     	; 0x7b28 <__fp_cmp+0x46>
    7b02:	62 1b       	sub	r22, r18
    7b04:	73 0b       	sbc	r23, r19
    7b06:	84 0b       	sbc	r24, r20
    7b08:	95 0b       	sbc	r25, r21
    7b0a:	39 f4       	brne	.+14     	; 0x7b1a <__fp_cmp+0x38>
    7b0c:	0a 26       	eor	r0, r26
    7b0e:	61 f0       	breq	.+24     	; 0x7b28 <__fp_cmp+0x46>
    7b10:	23 2b       	or	r18, r19
    7b12:	24 2b       	or	r18, r20
    7b14:	25 2b       	or	r18, r21
    7b16:	21 f4       	brne	.+8      	; 0x7b20 <__fp_cmp+0x3e>
    7b18:	08 95       	ret
    7b1a:	0a 26       	eor	r0, r26
    7b1c:	09 f4       	brne	.+2      	; 0x7b20 <__fp_cmp+0x3e>
    7b1e:	a1 40       	sbci	r26, 0x01	; 1
    7b20:	a6 95       	lsr	r26
    7b22:	8f ef       	ldi	r24, 0xFF	; 255
    7b24:	81 1d       	adc	r24, r1
    7b26:	81 1d       	adc	r24, r1
    7b28:	08 95       	ret

00007b2a <__fp_inf>:
    7b2a:	97 f9       	bld	r25, 7
    7b2c:	9f 67       	ori	r25, 0x7F	; 127
    7b2e:	80 e8       	ldi	r24, 0x80	; 128
    7b30:	70 e0       	ldi	r23, 0x00	; 0
    7b32:	60 e0       	ldi	r22, 0x00	; 0
    7b34:	08 95       	ret

00007b36 <__fp_nan>:
    7b36:	9f ef       	ldi	r25, 0xFF	; 255
    7b38:	80 ec       	ldi	r24, 0xC0	; 192
    7b3a:	08 95       	ret

00007b3c <__fp_pscA>:
    7b3c:	00 24       	eor	r0, r0
    7b3e:	0a 94       	dec	r0
    7b40:	16 16       	cp	r1, r22
    7b42:	17 06       	cpc	r1, r23
    7b44:	18 06       	cpc	r1, r24
    7b46:	09 06       	cpc	r0, r25
    7b48:	08 95       	ret

00007b4a <__fp_pscB>:
    7b4a:	00 24       	eor	r0, r0
    7b4c:	0a 94       	dec	r0
    7b4e:	12 16       	cp	r1, r18
    7b50:	13 06       	cpc	r1, r19
    7b52:	14 06       	cpc	r1, r20
    7b54:	05 06       	cpc	r0, r21
    7b56:	08 95       	ret

00007b58 <__fp_round>:
    7b58:	09 2e       	mov	r0, r25
    7b5a:	03 94       	inc	r0
    7b5c:	00 0c       	add	r0, r0
    7b5e:	11 f4       	brne	.+4      	; 0x7b64 <__fp_round+0xc>
    7b60:	88 23       	and	r24, r24
    7b62:	52 f0       	brmi	.+20     	; 0x7b78 <__fp_round+0x20>
    7b64:	bb 0f       	add	r27, r27
    7b66:	40 f4       	brcc	.+16     	; 0x7b78 <__fp_round+0x20>
    7b68:	bf 2b       	or	r27, r31
    7b6a:	11 f4       	brne	.+4      	; 0x7b70 <__fp_round+0x18>
    7b6c:	60 ff       	sbrs	r22, 0
    7b6e:	04 c0       	rjmp	.+8      	; 0x7b78 <__fp_round+0x20>
    7b70:	6f 5f       	subi	r22, 0xFF	; 255
    7b72:	7f 4f       	sbci	r23, 0xFF	; 255
    7b74:	8f 4f       	sbci	r24, 0xFF	; 255
    7b76:	9f 4f       	sbci	r25, 0xFF	; 255
    7b78:	08 95       	ret

00007b7a <__fp_split3>:
    7b7a:	57 fd       	sbrc	r21, 7
    7b7c:	90 58       	subi	r25, 0x80	; 128
    7b7e:	44 0f       	add	r20, r20
    7b80:	55 1f       	adc	r21, r21
    7b82:	59 f0       	breq	.+22     	; 0x7b9a <__fp_splitA+0x10>
    7b84:	5f 3f       	cpi	r21, 0xFF	; 255
    7b86:	71 f0       	breq	.+28     	; 0x7ba4 <__fp_splitA+0x1a>
    7b88:	47 95       	ror	r20

00007b8a <__fp_splitA>:
    7b8a:	88 0f       	add	r24, r24
    7b8c:	97 fb       	bst	r25, 7
    7b8e:	99 1f       	adc	r25, r25
    7b90:	61 f0       	breq	.+24     	; 0x7baa <__fp_splitA+0x20>
    7b92:	9f 3f       	cpi	r25, 0xFF	; 255
    7b94:	79 f0       	breq	.+30     	; 0x7bb4 <__fp_splitA+0x2a>
    7b96:	87 95       	ror	r24
    7b98:	08 95       	ret
    7b9a:	12 16       	cp	r1, r18
    7b9c:	13 06       	cpc	r1, r19
    7b9e:	14 06       	cpc	r1, r20
    7ba0:	55 1f       	adc	r21, r21
    7ba2:	f2 cf       	rjmp	.-28     	; 0x7b88 <__fp_split3+0xe>
    7ba4:	46 95       	lsr	r20
    7ba6:	f1 df       	rcall	.-30     	; 0x7b8a <__fp_splitA>
    7ba8:	08 c0       	rjmp	.+16     	; 0x7bba <__fp_splitA+0x30>
    7baa:	16 16       	cp	r1, r22
    7bac:	17 06       	cpc	r1, r23
    7bae:	18 06       	cpc	r1, r24
    7bb0:	99 1f       	adc	r25, r25
    7bb2:	f1 cf       	rjmp	.-30     	; 0x7b96 <__fp_splitA+0xc>
    7bb4:	86 95       	lsr	r24
    7bb6:	71 05       	cpc	r23, r1
    7bb8:	61 05       	cpc	r22, r1
    7bba:	08 94       	sec
    7bbc:	08 95       	ret

00007bbe <__fp_zero>:
    7bbe:	e8 94       	clt

00007bc0 <__fp_szero>:
    7bc0:	bb 27       	eor	r27, r27
    7bc2:	66 27       	eor	r22, r22
    7bc4:	77 27       	eor	r23, r23
    7bc6:	cb 01       	movw	r24, r22
    7bc8:	97 f9       	bld	r25, 7
    7bca:	08 95       	ret

00007bcc <__gesf2>:
    7bcc:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <__fp_cmp>
    7bd0:	08 f4       	brcc	.+2      	; 0x7bd4 <__gesf2+0x8>
    7bd2:	8f ef       	ldi	r24, 0xFF	; 255
    7bd4:	08 95       	ret

00007bd6 <__mulsf3>:
    7bd6:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <__mulsf3x>
    7bda:	0c 94 ac 3d 	jmp	0x7b58	; 0x7b58 <__fp_round>
    7bde:	0e 94 9e 3d 	call	0x7b3c	; 0x7b3c <__fp_pscA>
    7be2:	38 f0       	brcs	.+14     	; 0x7bf2 <__mulsf3+0x1c>
    7be4:	0e 94 a5 3d 	call	0x7b4a	; 0x7b4a <__fp_pscB>
    7be8:	20 f0       	brcs	.+8      	; 0x7bf2 <__mulsf3+0x1c>
    7bea:	95 23       	and	r25, r21
    7bec:	11 f0       	breq	.+4      	; 0x7bf2 <__mulsf3+0x1c>
    7bee:	0c 94 95 3d 	jmp	0x7b2a	; 0x7b2a <__fp_inf>
    7bf2:	0c 94 9b 3d 	jmp	0x7b36	; 0x7b36 <__fp_nan>
    7bf6:	11 24       	eor	r1, r1
    7bf8:	0c 94 e0 3d 	jmp	0x7bc0	; 0x7bc0 <__fp_szero>

00007bfc <__mulsf3x>:
    7bfc:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <__fp_split3>
    7c00:	70 f3       	brcs	.-36     	; 0x7bde <__mulsf3+0x8>

00007c02 <__mulsf3_pse>:
    7c02:	95 9f       	mul	r25, r21
    7c04:	c1 f3       	breq	.-16     	; 0x7bf6 <__mulsf3+0x20>
    7c06:	95 0f       	add	r25, r21
    7c08:	50 e0       	ldi	r21, 0x00	; 0
    7c0a:	55 1f       	adc	r21, r21
    7c0c:	62 9f       	mul	r22, r18
    7c0e:	f0 01       	movw	r30, r0
    7c10:	72 9f       	mul	r23, r18
    7c12:	bb 27       	eor	r27, r27
    7c14:	f0 0d       	add	r31, r0
    7c16:	b1 1d       	adc	r27, r1
    7c18:	63 9f       	mul	r22, r19
    7c1a:	aa 27       	eor	r26, r26
    7c1c:	f0 0d       	add	r31, r0
    7c1e:	b1 1d       	adc	r27, r1
    7c20:	aa 1f       	adc	r26, r26
    7c22:	64 9f       	mul	r22, r20
    7c24:	66 27       	eor	r22, r22
    7c26:	b0 0d       	add	r27, r0
    7c28:	a1 1d       	adc	r26, r1
    7c2a:	66 1f       	adc	r22, r22
    7c2c:	82 9f       	mul	r24, r18
    7c2e:	22 27       	eor	r18, r18
    7c30:	b0 0d       	add	r27, r0
    7c32:	a1 1d       	adc	r26, r1
    7c34:	62 1f       	adc	r22, r18
    7c36:	73 9f       	mul	r23, r19
    7c38:	b0 0d       	add	r27, r0
    7c3a:	a1 1d       	adc	r26, r1
    7c3c:	62 1f       	adc	r22, r18
    7c3e:	83 9f       	mul	r24, r19
    7c40:	a0 0d       	add	r26, r0
    7c42:	61 1d       	adc	r22, r1
    7c44:	22 1f       	adc	r18, r18
    7c46:	74 9f       	mul	r23, r20
    7c48:	33 27       	eor	r19, r19
    7c4a:	a0 0d       	add	r26, r0
    7c4c:	61 1d       	adc	r22, r1
    7c4e:	23 1f       	adc	r18, r19
    7c50:	84 9f       	mul	r24, r20
    7c52:	60 0d       	add	r22, r0
    7c54:	21 1d       	adc	r18, r1
    7c56:	82 2f       	mov	r24, r18
    7c58:	76 2f       	mov	r23, r22
    7c5a:	6a 2f       	mov	r22, r26
    7c5c:	11 24       	eor	r1, r1
    7c5e:	9f 57       	subi	r25, 0x7F	; 127
    7c60:	50 40       	sbci	r21, 0x00	; 0
    7c62:	9a f0       	brmi	.+38     	; 0x7c8a <__mulsf3_pse+0x88>
    7c64:	f1 f0       	breq	.+60     	; 0x7ca2 <__mulsf3_pse+0xa0>
    7c66:	88 23       	and	r24, r24
    7c68:	4a f0       	brmi	.+18     	; 0x7c7c <__mulsf3_pse+0x7a>
    7c6a:	ee 0f       	add	r30, r30
    7c6c:	ff 1f       	adc	r31, r31
    7c6e:	bb 1f       	adc	r27, r27
    7c70:	66 1f       	adc	r22, r22
    7c72:	77 1f       	adc	r23, r23
    7c74:	88 1f       	adc	r24, r24
    7c76:	91 50       	subi	r25, 0x01	; 1
    7c78:	50 40       	sbci	r21, 0x00	; 0
    7c7a:	a9 f7       	brne	.-22     	; 0x7c66 <__mulsf3_pse+0x64>
    7c7c:	9e 3f       	cpi	r25, 0xFE	; 254
    7c7e:	51 05       	cpc	r21, r1
    7c80:	80 f0       	brcs	.+32     	; 0x7ca2 <__mulsf3_pse+0xa0>
    7c82:	0c 94 95 3d 	jmp	0x7b2a	; 0x7b2a <__fp_inf>
    7c86:	0c 94 e0 3d 	jmp	0x7bc0	; 0x7bc0 <__fp_szero>
    7c8a:	5f 3f       	cpi	r21, 0xFF	; 255
    7c8c:	e4 f3       	brlt	.-8      	; 0x7c86 <__mulsf3_pse+0x84>
    7c8e:	98 3e       	cpi	r25, 0xE8	; 232
    7c90:	d4 f3       	brlt	.-12     	; 0x7c86 <__mulsf3_pse+0x84>
    7c92:	86 95       	lsr	r24
    7c94:	77 95       	ror	r23
    7c96:	67 95       	ror	r22
    7c98:	b7 95       	ror	r27
    7c9a:	f7 95       	ror	r31
    7c9c:	e7 95       	ror	r30
    7c9e:	9f 5f       	subi	r25, 0xFF	; 255
    7ca0:	c1 f7       	brne	.-16     	; 0x7c92 <__mulsf3_pse+0x90>
    7ca2:	fe 2b       	or	r31, r30
    7ca4:	88 0f       	add	r24, r24
    7ca6:	91 1d       	adc	r25, r1
    7ca8:	96 95       	lsr	r25
    7caa:	87 95       	ror	r24
    7cac:	97 f9       	bld	r25, 7
    7cae:	08 95       	ret

00007cb0 <round>:
    7cb0:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <__fp_splitA>
    7cb4:	e8 f0       	brcs	.+58     	; 0x7cf0 <round+0x40>
    7cb6:	9e 37       	cpi	r25, 0x7E	; 126
    7cb8:	e8 f0       	brcs	.+58     	; 0x7cf4 <round+0x44>
    7cba:	96 39       	cpi	r25, 0x96	; 150
    7cbc:	b8 f4       	brcc	.+46     	; 0x7cec <round+0x3c>
    7cbe:	9e 38       	cpi	r25, 0x8E	; 142
    7cc0:	48 f4       	brcc	.+18     	; 0x7cd4 <round+0x24>
    7cc2:	67 2f       	mov	r22, r23
    7cc4:	78 2f       	mov	r23, r24
    7cc6:	88 27       	eor	r24, r24
    7cc8:	98 5f       	subi	r25, 0xF8	; 248
    7cca:	f9 cf       	rjmp	.-14     	; 0x7cbe <round+0xe>
    7ccc:	86 95       	lsr	r24
    7cce:	77 95       	ror	r23
    7cd0:	67 95       	ror	r22
    7cd2:	93 95       	inc	r25
    7cd4:	95 39       	cpi	r25, 0x95	; 149
    7cd6:	d0 f3       	brcs	.-12     	; 0x7ccc <round+0x1c>
    7cd8:	b6 2f       	mov	r27, r22
    7cda:	b1 70       	andi	r27, 0x01	; 1
    7cdc:	6b 0f       	add	r22, r27
    7cde:	71 1d       	adc	r23, r1
    7ce0:	81 1d       	adc	r24, r1
    7ce2:	20 f4       	brcc	.+8      	; 0x7cec <round+0x3c>
    7ce4:	87 95       	ror	r24
    7ce6:	77 95       	ror	r23
    7ce8:	67 95       	ror	r22
    7cea:	93 95       	inc	r25
    7cec:	0c 94 7c 3e 	jmp	0x7cf8	; 0x7cf8 <__fp_mintl>
    7cf0:	0c 94 97 3e 	jmp	0x7d2e	; 0x7d2e <__fp_mpack>
    7cf4:	0c 94 e0 3d 	jmp	0x7bc0	; 0x7bc0 <__fp_szero>

00007cf8 <__fp_mintl>:
    7cf8:	88 23       	and	r24, r24
    7cfa:	71 f4       	brne	.+28     	; 0x7d18 <__fp_mintl+0x20>
    7cfc:	77 23       	and	r23, r23
    7cfe:	21 f0       	breq	.+8      	; 0x7d08 <__fp_mintl+0x10>
    7d00:	98 50       	subi	r25, 0x08	; 8
    7d02:	87 2b       	or	r24, r23
    7d04:	76 2f       	mov	r23, r22
    7d06:	07 c0       	rjmp	.+14     	; 0x7d16 <__fp_mintl+0x1e>
    7d08:	66 23       	and	r22, r22
    7d0a:	11 f4       	brne	.+4      	; 0x7d10 <__fp_mintl+0x18>
    7d0c:	99 27       	eor	r25, r25
    7d0e:	0d c0       	rjmp	.+26     	; 0x7d2a <__fp_mintl+0x32>
    7d10:	90 51       	subi	r25, 0x10	; 16
    7d12:	86 2b       	or	r24, r22
    7d14:	70 e0       	ldi	r23, 0x00	; 0
    7d16:	60 e0       	ldi	r22, 0x00	; 0
    7d18:	2a f0       	brmi	.+10     	; 0x7d24 <__fp_mintl+0x2c>
    7d1a:	9a 95       	dec	r25
    7d1c:	66 0f       	add	r22, r22
    7d1e:	77 1f       	adc	r23, r23
    7d20:	88 1f       	adc	r24, r24
    7d22:	da f7       	brpl	.-10     	; 0x7d1a <__fp_mintl+0x22>
    7d24:	88 0f       	add	r24, r24
    7d26:	96 95       	lsr	r25
    7d28:	87 95       	ror	r24
    7d2a:	97 f9       	bld	r25, 7
    7d2c:	08 95       	ret

00007d2e <__fp_mpack>:
    7d2e:	9f 3f       	cpi	r25, 0xFF	; 255
    7d30:	31 f0       	breq	.+12     	; 0x7d3e <__fp_mpack_finite+0xc>

00007d32 <__fp_mpack_finite>:
    7d32:	91 50       	subi	r25, 0x01	; 1
    7d34:	20 f4       	brcc	.+8      	; 0x7d3e <__fp_mpack_finite+0xc>
    7d36:	87 95       	ror	r24
    7d38:	77 95       	ror	r23
    7d3a:	67 95       	ror	r22
    7d3c:	b7 95       	ror	r27
    7d3e:	88 0f       	add	r24, r24
    7d40:	91 1d       	adc	r25, r1
    7d42:	96 95       	lsr	r25
    7d44:	87 95       	ror	r24
    7d46:	97 f9       	bld	r25, 7
    7d48:	08 95       	ret

00007d4a <__divmodhi4>:
    7d4a:	97 fb       	bst	r25, 7
    7d4c:	07 2e       	mov	r0, r23
    7d4e:	16 f4       	brtc	.+4      	; 0x7d54 <__divmodhi4+0xa>
    7d50:	00 94       	com	r0
    7d52:	07 d0       	rcall	.+14     	; 0x7d62 <__divmodhi4_neg1>
    7d54:	77 fd       	sbrc	r23, 7
    7d56:	09 d0       	rcall	.+18     	; 0x7d6a <__divmodhi4_neg2>
    7d58:	0e 94 b9 3e 	call	0x7d72	; 0x7d72 <__udivmodhi4>
    7d5c:	07 fc       	sbrc	r0, 7
    7d5e:	05 d0       	rcall	.+10     	; 0x7d6a <__divmodhi4_neg2>
    7d60:	3e f4       	brtc	.+14     	; 0x7d70 <__divmodhi4_exit>

00007d62 <__divmodhi4_neg1>:
    7d62:	90 95       	com	r25
    7d64:	81 95       	neg	r24
    7d66:	9f 4f       	sbci	r25, 0xFF	; 255
    7d68:	08 95       	ret

00007d6a <__divmodhi4_neg2>:
    7d6a:	70 95       	com	r23
    7d6c:	61 95       	neg	r22
    7d6e:	7f 4f       	sbci	r23, 0xFF	; 255

00007d70 <__divmodhi4_exit>:
    7d70:	08 95       	ret

00007d72 <__udivmodhi4>:
    7d72:	aa 1b       	sub	r26, r26
    7d74:	bb 1b       	sub	r27, r27
    7d76:	51 e1       	ldi	r21, 0x11	; 17
    7d78:	07 c0       	rjmp	.+14     	; 0x7d88 <__udivmodhi4_ep>

00007d7a <__udivmodhi4_loop>:
    7d7a:	aa 1f       	adc	r26, r26
    7d7c:	bb 1f       	adc	r27, r27
    7d7e:	a6 17       	cp	r26, r22
    7d80:	b7 07       	cpc	r27, r23
    7d82:	10 f0       	brcs	.+4      	; 0x7d88 <__udivmodhi4_ep>
    7d84:	a6 1b       	sub	r26, r22
    7d86:	b7 0b       	sbc	r27, r23

00007d88 <__udivmodhi4_ep>:
    7d88:	88 1f       	adc	r24, r24
    7d8a:	99 1f       	adc	r25, r25
    7d8c:	5a 95       	dec	r21
    7d8e:	a9 f7       	brne	.-22     	; 0x7d7a <__udivmodhi4_loop>
    7d90:	80 95       	com	r24
    7d92:	90 95       	com	r25
    7d94:	bc 01       	movw	r22, r24
    7d96:	cd 01       	movw	r24, r26
    7d98:	08 95       	ret

00007d9a <_exit>:
    7d9a:	f8 94       	cli

00007d9c <__stop_program>:
    7d9c:	ff cf       	rjmp	.-2      	; 0x7d9c <__stop_program>
