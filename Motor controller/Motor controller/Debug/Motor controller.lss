
Motor controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aa8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800060  00800060  00000b1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e2c  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a27  00000000  00000000  00002abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000103a  00000000  00000000  000034e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00004520  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058f  00000000  00000000  00004794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000181d  00000000  00000000  00004d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 19 02 	jmp	0x432	; 0x432 <__vector_1>
   8:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_2>
   c:	0c 94 a8 02 	jmp	0x550	; 0x550 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 11 03 	call	0x622	; 0x622 <main>
  8a:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <rotateDCMotors>:

#include "dcmotor.h"

void rotateDCMotors(int direction)
{
	if (direction != 0)
  92:	89 2b       	or	r24, r25
  94:	39 f0       	breq	.+14     	; 0xa4 <rotateDCMotors+0x12>
	{
		// Rotate DC motor Clockwise ?
		PORTC &= ~(1 << PB0);
  96:	85 b3       	in	r24, 0x15	; 21
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	85 bb       	out	0x15, r24	; 21
		PORTC |= (1 << PB1);
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	08 95       	ret
	}
	else
	{
		// Else rotate DC motor Counterclockwise
		PORTC |= (1 << PB0);
  a4:	85 b3       	in	r24, 0x15	; 21
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1 << PB1);
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	8d 7f       	andi	r24, 0xFD	; 253
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	08 95       	ret

000000b2 <stopDCMotors>:
}

void stopDCMotors()
{
	// stop Rotation DC motor
	PORTC &= ~(1 << PB0);
  b2:	85 b3       	in	r24, 0x15	; 21
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1 << PB1);
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	85 bb       	out	0x15, r24	; 21
  be:	08 95       	ret

000000c0 <initSteppers>:
 */ 

#include "stepper.h"

void initSteppers(){
		DDRA = 0xFF;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a bb       	out	0x1a, r24	; 26
		DDRC = 0xFF;
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	08 95       	ret

000000c8 <rotateStepper_1>:
}

void rotateStepper_1(int direction, float distance)
{
  c8:	8f 92       	push	r8
  ca:	9f 92       	push	r9
  cc:	af 92       	push	r10
  ce:	bf 92       	push	r11
  d0:	cf 92       	push	r12
  d2:	df 92       	push	r13
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	4a 01       	movw	r8, r20
  de:	5b 01       	movw	r10, r22
	// Counterclockwise-0
	// 1 distance unit = 1 rotating

	int period;
	period = 10;
	if (direction == 1)
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	09 f4       	brne	.+2      	; 0xe6 <rotateStepper_1+0x1e>
  e4:	4c c0       	rjmp	.+152    	; 0x17e <rotateStepper_1+0xb6>
  e6:	c0 e0       	ldi	r28, 0x00	; 0
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	8a c0       	rjmp	.+276    	; 0x200 <rotateStepper_1+0x138>
	{
		for (int i = 0; i < round(distance); i++)
		{
			PORTA = 0x03;
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	ef e3       	ldi	r30, 0x3F	; 63
  f2:	fc e9       	ldi	r31, 0x9C	; 156
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <rotateStepper_1+0x2c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <rotateStepper_1+0x32>
  fa:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x02;
  fc:	92 e0       	ldi	r25, 0x02	; 2
  fe:	9b bb       	out	0x1b, r25	; 27
 100:	ef e3       	ldi	r30, 0x3F	; 63
 102:	fc e9       	ldi	r31, 0x9C	; 156
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <rotateStepper_1+0x3c>
 108:	00 c0       	rjmp	.+0      	; 0x10a <rotateStepper_1+0x42>
 10a:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x06;
 10c:	96 e0       	ldi	r25, 0x06	; 6
 10e:	9b bb       	out	0x1b, r25	; 27
 110:	ef e3       	ldi	r30, 0x3F	; 63
 112:	fc e9       	ldi	r31, 0x9C	; 156
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <rotateStepper_1+0x4c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <rotateStepper_1+0x52>
 11a:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x04;
 11c:	94 e0       	ldi	r25, 0x04	; 4
 11e:	9b bb       	out	0x1b, r25	; 27
 120:	ef e3       	ldi	r30, 0x3F	; 63
 122:	fc e9       	ldi	r31, 0x9C	; 156
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <rotateStepper_1+0x5c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <rotateStepper_1+0x62>
 12a:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x0c;
 12c:	9c e0       	ldi	r25, 0x0C	; 12
 12e:	9b bb       	out	0x1b, r25	; 27
 130:	ef e3       	ldi	r30, 0x3F	; 63
 132:	fc e9       	ldi	r31, 0x9C	; 156
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <rotateStepper_1+0x6c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <rotateStepper_1+0x72>
 13a:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x08;
 13c:	98 e0       	ldi	r25, 0x08	; 8
 13e:	9b bb       	out	0x1b, r25	; 27
 140:	ef e3       	ldi	r30, 0x3F	; 63
 142:	fc e9       	ldi	r31, 0x9C	; 156
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <rotateStepper_1+0x7c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <rotateStepper_1+0x82>
 14a:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x09;
 14c:	99 e0       	ldi	r25, 0x09	; 9
 14e:	9b bb       	out	0x1b, r25	; 27
 150:	ef e3       	ldi	r30, 0x3F	; 63
 152:	fc e9       	ldi	r31, 0x9C	; 156
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <rotateStepper_1+0x8c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <rotateStepper_1+0x92>
 15a:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x01;
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	9b bb       	out	0x1b, r25	; 27
 160:	ef e3       	ldi	r30, 0x3F	; 63
 162:	fc e9       	ldi	r31, 0x9C	; 156
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <rotateStepper_1+0x9c>
 168:	00 c0       	rjmp	.+0      	; 0x16a <rotateStepper_1+0xa2>
 16a:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x03;
 16c:	8b bb       	out	0x1b, r24	; 27
 16e:	8f e3       	ldi	r24, 0x3F	; 63
 170:	9c e9       	ldi	r25, 0x9C	; 156
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <rotateStepper_1+0xaa>
 176:	00 c0       	rjmp	.+0      	; 0x178 <rotateStepper_1+0xb0>
 178:	00 00       	nop

	int period;
	period = 10;
	if (direction == 1)
	{
		for (int i = 0; i < round(distance); i++)
 17a:	21 96       	adiw	r28, 0x01	; 1
 17c:	02 c0       	rjmp	.+4      	; 0x182 <rotateStepper_1+0xba>
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	d0 e0       	ldi	r29, 0x00	; 0
 182:	be 01       	movw	r22, r28
 184:	0d 2e       	mov	r0, r29
 186:	00 0c       	add	r0, r0
 188:	88 0b       	sbc	r24, r24
 18a:	99 0b       	sbc	r25, r25
 18c:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatsisf>
 190:	6b 01       	movw	r12, r22
 192:	7c 01       	movw	r14, r24
 194:	c5 01       	movw	r24, r10
 196:	b4 01       	movw	r22, r8
 198:	0e 94 dd 04 	call	0x9ba	; 0x9ba <round>
 19c:	9b 01       	movw	r18, r22
 19e:	ac 01       	movw	r20, r24
 1a0:	c7 01       	movw	r24, r14
 1a2:	b6 01       	movw	r22, r12
 1a4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__cmpsf2>
 1a8:	88 23       	and	r24, r24
 1aa:	0c f4       	brge	.+2      	; 0x1ae <rotateStepper_1+0xe6>
 1ac:	9f cf       	rjmp	.-194    	; 0xec <rotateStepper_1+0x24>
 1ae:	3d c0       	rjmp	.+122    	; 0x22a <rotateStepper_1+0x162>
	}
	else
	{
		for (int i = 0; i < round(distance); i++)
		{
			PORTA = 0x03;
 1b0:	83 e0       	ldi	r24, 0x03	; 3
 1b2:	8b bb       	out	0x1b, r24	; 27
 1b4:	ef e3       	ldi	r30, 0x3F	; 63
 1b6:	fc e9       	ldi	r31, 0x9C	; 156
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <rotateStepper_1+0xf0>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <rotateStepper_1+0xf6>
 1be:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x09;
 1c0:	99 e0       	ldi	r25, 0x09	; 9
 1c2:	9b bb       	out	0x1b, r25	; 27
 1c4:	ef e3       	ldi	r30, 0x3F	; 63
 1c6:	fc e9       	ldi	r31, 0x9C	; 156
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <rotateStepper_1+0x100>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <rotateStepper_1+0x106>
 1ce:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x0c;
 1d0:	9c e0       	ldi	r25, 0x0C	; 12
 1d2:	9b bb       	out	0x1b, r25	; 27
 1d4:	ef e3       	ldi	r30, 0x3F	; 63
 1d6:	fc e9       	ldi	r31, 0x9C	; 156
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <rotateStepper_1+0x110>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <rotateStepper_1+0x116>
 1de:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x06;
 1e0:	96 e0       	ldi	r25, 0x06	; 6
 1e2:	9b bb       	out	0x1b, r25	; 27
 1e4:	ef e3       	ldi	r30, 0x3F	; 63
 1e6:	fc e9       	ldi	r31, 0x9C	; 156
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <rotateStepper_1+0x120>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <rotateStepper_1+0x126>
 1ee:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x03;
 1f0:	8b bb       	out	0x1b, r24	; 27
 1f2:	8f e3       	ldi	r24, 0x3F	; 63
 1f4:	9c e9       	ldi	r25, 0x9C	; 156
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <rotateStepper_1+0x12e>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <rotateStepper_1+0x134>
 1fc:	00 00       	nop
			_delay_ms(period);
		}
	}
	else
	{
		for (int i = 0; i < round(distance); i++)
 1fe:	21 96       	adiw	r28, 0x01	; 1
 200:	be 01       	movw	r22, r28
 202:	0d 2e       	mov	r0, r29
 204:	00 0c       	add	r0, r0
 206:	88 0b       	sbc	r24, r24
 208:	99 0b       	sbc	r25, r25
 20a:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatsisf>
 20e:	6b 01       	movw	r12, r22
 210:	7c 01       	movw	r14, r24
 212:	c5 01       	movw	r24, r10
 214:	b4 01       	movw	r22, r8
 216:	0e 94 dd 04 	call	0x9ba	; 0x9ba <round>
 21a:	9b 01       	movw	r18, r22
 21c:	ac 01       	movw	r20, r24
 21e:	c7 01       	movw	r24, r14
 220:	b6 01       	movw	r22, r12
 222:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__cmpsf2>
 226:	88 23       	and	r24, r24
 228:	1c f2       	brlt	.-122    	; 0x1b0 <rotateStepper_1+0xe8>
			_delay_ms(period);
			PORTA = 0x03;
			_delay_ms(period);
		}
	}
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	df 90       	pop	r13
 234:	cf 90       	pop	r12
 236:	bf 90       	pop	r11
 238:	af 90       	pop	r10
 23a:	9f 90       	pop	r9
 23c:	8f 90       	pop	r8
 23e:	08 95       	ret

00000240 <rotateStepper_2>:
	// Counterclockwise-0
	// 1 distance unit = 1 rotating

	int period;
	period = 10;
	if (direction == 1)
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	09 f4       	brne	.+2      	; 0x246 <rotateStepper_2+0x6>
 244:	4c c0       	rjmp	.+152    	; 0x2de <rotateStepper_2+0x9e>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	7e c0       	rjmp	.+252    	; 0x348 <rotateStepper_2+0x108>
	{
		/* Rotate  clockwise */
		for (int i = 0; i < 50; i++)
		{
			PORTA = 0x30;
 24c:	20 e3       	ldi	r18, 0x30	; 48
 24e:	2b bb       	out	0x1b, r18	; 27
 250:	ef e3       	ldi	r30, 0x3F	; 63
 252:	fc e9       	ldi	r31, 0x9C	; 156
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <rotateStepper_2+0x14>
 258:	00 c0       	rjmp	.+0      	; 0x25a <rotateStepper_2+0x1a>
 25a:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x20;
 25c:	30 e2       	ldi	r19, 0x20	; 32
 25e:	3b bb       	out	0x1b, r19	; 27
 260:	ef e3       	ldi	r30, 0x3F	; 63
 262:	fc e9       	ldi	r31, 0x9C	; 156
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <rotateStepper_2+0x24>
 268:	00 c0       	rjmp	.+0      	; 0x26a <rotateStepper_2+0x2a>
 26a:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x60;
 26c:	30 e6       	ldi	r19, 0x60	; 96
 26e:	3b bb       	out	0x1b, r19	; 27
 270:	ef e3       	ldi	r30, 0x3F	; 63
 272:	fc e9       	ldi	r31, 0x9C	; 156
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <rotateStepper_2+0x34>
 278:	00 c0       	rjmp	.+0      	; 0x27a <rotateStepper_2+0x3a>
 27a:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x40;
 27c:	30 e4       	ldi	r19, 0x40	; 64
 27e:	3b bb       	out	0x1b, r19	; 27
 280:	ef e3       	ldi	r30, 0x3F	; 63
 282:	fc e9       	ldi	r31, 0x9C	; 156
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <rotateStepper_2+0x44>
 288:	00 c0       	rjmp	.+0      	; 0x28a <rotateStepper_2+0x4a>
 28a:	00 00       	nop
			_delay_ms(period);
			PORTA = 0xc0;
 28c:	30 ec       	ldi	r19, 0xC0	; 192
 28e:	3b bb       	out	0x1b, r19	; 27
 290:	ef e3       	ldi	r30, 0x3F	; 63
 292:	fc e9       	ldi	r31, 0x9C	; 156
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <rotateStepper_2+0x54>
 298:	00 c0       	rjmp	.+0      	; 0x29a <rotateStepper_2+0x5a>
 29a:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x80;
 29c:	30 e8       	ldi	r19, 0x80	; 128
 29e:	3b bb       	out	0x1b, r19	; 27
 2a0:	ef e3       	ldi	r30, 0x3F	; 63
 2a2:	fc e9       	ldi	r31, 0x9C	; 156
 2a4:	31 97       	sbiw	r30, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <rotateStepper_2+0x64>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <rotateStepper_2+0x6a>
 2aa:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x90;
 2ac:	30 e9       	ldi	r19, 0x90	; 144
 2ae:	3b bb       	out	0x1b, r19	; 27
 2b0:	ef e3       	ldi	r30, 0x3F	; 63
 2b2:	fc e9       	ldi	r31, 0x9C	; 156
 2b4:	31 97       	sbiw	r30, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <rotateStepper_2+0x74>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <rotateStepper_2+0x7a>
 2ba:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x10;
 2bc:	30 e1       	ldi	r19, 0x10	; 16
 2be:	3b bb       	out	0x1b, r19	; 27
 2c0:	ef e3       	ldi	r30, 0x3F	; 63
 2c2:	fc e9       	ldi	r31, 0x9C	; 156
 2c4:	31 97       	sbiw	r30, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <rotateStepper_2+0x84>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <rotateStepper_2+0x8a>
 2ca:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x30;
 2cc:	2b bb       	out	0x1b, r18	; 27
 2ce:	ef e3       	ldi	r30, 0x3F	; 63
 2d0:	fc e9       	ldi	r31, 0x9C	; 156
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <rotateStepper_2+0x92>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <rotateStepper_2+0x98>
 2d8:	00 00       	nop
	int period;
	period = 10;
	if (direction == 1)
	{
		/* Rotate  clockwise */
		for (int i = 0; i < 50; i++)
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <rotateStepper_2+0xa2>
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	82 33       	cpi	r24, 0x32	; 50
 2e4:	91 05       	cpc	r25, r1
 2e6:	0c f4       	brge	.+2      	; 0x2ea <rotateStepper_2+0xaa>
 2e8:	b1 cf       	rjmp	.-158    	; 0x24c <rotateStepper_2+0xc>
 2ea:	8f e3       	ldi	r24, 0x3F	; 63
 2ec:	9c e9       	ldi	r25, 0x9C	; 156
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <rotateStepper_2+0xae>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <rotateStepper_2+0xb4>
 2f4:	00 00       	nop
 2f6:	08 95       	ret
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < 50; i++)
		{
			PORTA = 0x30;
 2f8:	20 e3       	ldi	r18, 0x30	; 48
 2fa:	2b bb       	out	0x1b, r18	; 27
 2fc:	ef e3       	ldi	r30, 0x3F	; 63
 2fe:	fc e9       	ldi	r31, 0x9C	; 156
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <rotateStepper_2+0xc0>
 304:	00 c0       	rjmp	.+0      	; 0x306 <rotateStepper_2+0xc6>
 306:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x90;
 308:	30 e9       	ldi	r19, 0x90	; 144
 30a:	3b bb       	out	0x1b, r19	; 27
 30c:	ef e3       	ldi	r30, 0x3F	; 63
 30e:	fc e9       	ldi	r31, 0x9C	; 156
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <rotateStepper_2+0xd0>
 314:	00 c0       	rjmp	.+0      	; 0x316 <rotateStepper_2+0xd6>
 316:	00 00       	nop
			_delay_ms(period);
			PORTA = 0xc0;
 318:	30 ec       	ldi	r19, 0xC0	; 192
 31a:	3b bb       	out	0x1b, r19	; 27
 31c:	ef e3       	ldi	r30, 0x3F	; 63
 31e:	fc e9       	ldi	r31, 0x9C	; 156
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <rotateStepper_2+0xe0>
 324:	00 c0       	rjmp	.+0      	; 0x326 <rotateStepper_2+0xe6>
 326:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x60;
 328:	30 e6       	ldi	r19, 0x60	; 96
 32a:	3b bb       	out	0x1b, r19	; 27
 32c:	ef e3       	ldi	r30, 0x3F	; 63
 32e:	fc e9       	ldi	r31, 0x9C	; 156
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <rotateStepper_2+0xf0>
 334:	00 c0       	rjmp	.+0      	; 0x336 <rotateStepper_2+0xf6>
 336:	00 00       	nop
			_delay_ms(period);
			PORTA = 0x30;
 338:	2b bb       	out	0x1b, r18	; 27
 33a:	ef e3       	ldi	r30, 0x3F	; 63
 33c:	fc e9       	ldi	r31, 0x9C	; 156
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <rotateStepper_2+0xfe>
 342:	00 c0       	rjmp	.+0      	; 0x344 <rotateStepper_2+0x104>
 344:	00 00       	nop
		_delay_ms(10);
	}
	else
	{
		/* Rotate  Counterclockwise  */
		for (int i = 0; i < 50; i++)
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	82 33       	cpi	r24, 0x32	; 50
 34a:	91 05       	cpc	r25, r1
 34c:	ac f2       	brlt	.-86     	; 0x2f8 <rotateStepper_2+0xb8>
 34e:	8f e3       	ldi	r24, 0x3F	; 63
 350:	9c e9       	ldi	r25, 0x9C	; 156
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <rotateStepper_2+0x112>
 356:	00 c0       	rjmp	.+0      	; 0x358 <rotateStepper_2+0x118>
 358:	00 00       	nop
 35a:	08 95       	ret

0000035c <initUSART>:

#include "usart.h"

void initUSART(){
	
	DDRD |= 1 << PIND1;//pin1 of portD as OUTPUT
 35c:	81 b3       	in	r24, 0x11	; 17
 35e:	82 60       	ori	r24, 0x02	; 2
 360:	81 bb       	out	0x11, r24	; 17
	
	int UBBRValue = 25;//AS described before setting baud rate

	//Put the upper part of the baud number here (bits 8 to 11)

	UBRRH = (unsigned char) (UBBRValue >> 8);
 362:	10 bc       	out	0x20, r1	; 32

	//Put the remaining part of the baud number here

	UBRRL = (unsigned char) UBBRValue;
 364:	89 e1       	ldi	r24, 0x19	; 25
 366:	89 b9       	out	0x09, r24	; 9

	//Enable the receiver, transmitter and receiver interrupt
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
 368:	88 e9       	ldi	r24, 0x98	; 152
 36a:	8a b9       	out	0x0a, r24	; 10

	//Set 2 stop bits and data bit length is 8-bit

	UCSRC = (1 << USBS) | (3 << UCSZ0);
 36c:	8e e0       	ldi	r24, 0x0E	; 14
 36e:	80 bd       	out	0x20, r24	; 32
 370:	08 95       	ret

00000372 <sendData>:
	
}

void sendData(uint8_t byte){
	while (! (UCSRA & (1 << UDRE)) );
 372:	5d 9b       	sbis	0x0b, 5	; 11
 374:	fe cf       	rjmp	.-4      	; 0x372 <sendData>

	{
		UDR = byte;//once transmitter is ready sent eight bit data
 376:	8c b9       	out	0x0c, r24	; 12
 378:	8f e1       	ldi	r24, 0x1F	; 31
 37a:	9e e4       	ldi	r25, 0x4E	; 78
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <sendData+0xa>
 380:	00 c0       	rjmp	.+0      	; 0x382 <sendData+0x10>
 382:	00 00       	nop
 384:	08 95       	ret

00000386 <initUltrasonic>:
	PORTD |= (1 << PIND7);
	_delay_us(15); // triggering the sensor for 15usec
	PORTD &= (~(1 << PIND7));
	_delay_ms(1000);
	return ult1_count;
}
 386:	81 b3       	in	r24, 0x11	; 17
 388:	80 68       	ori	r24, 0x80	; 128
 38a:	81 bb       	out	0x11, r24	; 17
 38c:	81 b3       	in	r24, 0x11	; 17
 38e:	8b 7f       	andi	r24, 0xFB	; 251
 390:	81 bb       	out	0x11, r24	; 17
 392:	8b b7       	in	r24, 0x3b	; 59
 394:	80 64       	ori	r24, 0x40	; 64
 396:	8b bf       	out	0x3b, r24	; 59
 398:	85 b7       	in	r24, 0x35	; 53
 39a:	81 60       	ori	r24, 0x01	; 1
 39c:	85 bf       	out	0x35, r24	; 53
 39e:	1f bc       	out	0x2f, r1	; 47
 3a0:	87 b3       	in	r24, 0x17	; 23
 3a2:	80 64       	ori	r24, 0x40	; 64
 3a4:	87 bb       	out	0x17, r24	; 23
 3a6:	87 b3       	in	r24, 0x17	; 23
 3a8:	87 7f       	andi	r24, 0xF7	; 247
 3aa:	87 bb       	out	0x17, r24	; 23
 3ac:	8b b7       	in	r24, 0x3b	; 59
 3ae:	80 68       	ori	r24, 0x80	; 128
 3b0:	8b bf       	out	0x3b, r24	; 59
 3b2:	85 b7       	in	r24, 0x35	; 53
 3b4:	84 60       	ori	r24, 0x04	; 4
 3b6:	85 bf       	out	0x35, r24	; 53
 3b8:	13 be       	out	0x33, r1	; 51
 3ba:	87 b3       	in	r24, 0x17	; 23
 3bc:	80 68       	ori	r24, 0x80	; 128
 3be:	87 bb       	out	0x17, r24	; 23
 3c0:	87 b3       	in	r24, 0x17	; 23
 3c2:	8b 7f       	andi	r24, 0xFB	; 251
 3c4:	87 bb       	out	0x17, r24	; 23
 3c6:	8b b7       	in	r24, 0x3b	; 59
 3c8:	80 62       	ori	r24, 0x20	; 32
 3ca:	8b bf       	out	0x3b, r24	; 59
 3cc:	84 b7       	in	r24, 0x34	; 52
 3ce:	80 64       	ori	r24, 0x40	; 64
 3d0:	84 bf       	out	0x34, r24	; 52
 3d2:	15 bc       	out	0x25, r1	; 37
 3d4:	08 95       	ret

000003d6 <getUltrasonic_2_Distance>:

int getUltrasonic_2_Distance()
{
	PORTB |= (1 << PB6);
 3d6:	88 b3       	in	r24, 0x18	; 24
 3d8:	80 64       	ori	r24, 0x40	; 64
 3da:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3dc:	20 e5       	ldi	r18, 0x50	; 80
 3de:	2a 95       	dec	r18
 3e0:	f1 f7       	brne	.-4      	; 0x3de <getUltrasonic_2_Distance+0x8>
	_delay_us(15); // triggering the sensor for 15usec
	PORTB &= (~(1 << PB6));
 3e2:	88 b3       	in	r24, 0x18	; 24
 3e4:	8f 7b       	andi	r24, 0xBF	; 191
 3e6:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	93 ed       	ldi	r25, 0xD3	; 211
 3ec:	20 e3       	ldi	r18, 0x30	; 48
 3ee:	81 50       	subi	r24, 0x01	; 1
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	20 40       	sbci	r18, 0x00	; 0
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <getUltrasonic_2_Distance+0x18>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <getUltrasonic_2_Distance+0x22>
 3f8:	00 00       	nop
	_delay_ms(1000);
	return ult2_count;
 3fa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ult2_count>
 3fe:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ult2_count+0x1>
}
 402:	08 95       	ret

00000404 <getUltrasonic_3_Distance>:

int getUltrasonic_3_Distance()
{
	PORTB |= (1 << PB7);
 404:	88 b3       	in	r24, 0x18	; 24
 406:	80 68       	ori	r24, 0x80	; 128
 408:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40a:	20 e5       	ldi	r18, 0x50	; 80
 40c:	2a 95       	dec	r18
 40e:	f1 f7       	brne	.-4      	; 0x40c <getUltrasonic_3_Distance+0x8>
	_delay_us(15); // triggering the sensor for 15usec
	PORTB &= (~(1 << PB7));
 410:	88 b3       	in	r24, 0x18	; 24
 412:	8f 77       	andi	r24, 0x7F	; 127
 414:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	93 ed       	ldi	r25, 0xD3	; 211
 41a:	20 e3       	ldi	r18, 0x30	; 48
 41c:	81 50       	subi	r24, 0x01	; 1
 41e:	90 40       	sbci	r25, 0x00	; 0
 420:	20 40       	sbci	r18, 0x00	; 0
 422:	e1 f7       	brne	.-8      	; 0x41c <getUltrasonic_3_Distance+0x18>
 424:	00 c0       	rjmp	.+0      	; 0x426 <getUltrasonic_3_Distance+0x22>
 426:	00 00       	nop
	_delay_ms(1000);
	return ult3_count;
 428:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 42c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
}
 430:	08 95       	ret

00000432 <__vector_1>:

ISR(INT0_vect) // interrupt service routine when there is a change in logic level
{
 432:	1f 92       	push	r1
 434:	0f 92       	push	r0
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	0f 92       	push	r0
 43a:	11 24       	eor	r1, r1
 43c:	5f 93       	push	r21
 43e:	6f 93       	push	r22
 440:	7f 93       	push	r23
 442:	8f 93       	push	r24
 444:	9f 93       	push	r25
 446:	af 93       	push	r26
 448:	bf 93       	push	r27

	if (i == 0)
 44a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <i>
 44e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <i+0x1>
 452:	89 2b       	or	r24, r25
 454:	49 f4       	brne	.+18     	; 0x468 <__vector_1+0x36>
	{ // when logic change from LOW to HIGH

		TCCR1B |= (1 << CS10); // enabling counter
 456:	8e b5       	in	r24, 0x2e	; 46
 458:	81 60       	ori	r24, 0x01	; 1
 45a:	8e bd       	out	0x2e, r24	; 46

		i = 1;
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <i+0x1>
 464:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <i>
	}
	if (i == 1)
 468:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <i>
 46c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <i+0x1>
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	d9 f4       	brne	.+54     	; 0x4aa <__vector_1+0x78>
	{
		TCCR1B = 0; // disabling counter
 474:	1e bc       	out	0x2e, r1	; 46

		pulse1 = TCNT1; // count memory is updated to intege
 476:	8c b5       	in	r24, 0x2c	; 44
 478:	9d b5       	in	r25, 0x2d	; 45
 47a:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <pulse1+0x1>
 47e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <pulse1>

		TCNT1 = 0; // resetting the counter memory
 482:	1d bc       	out	0x2d, r1	; 45
 484:	1c bc       	out	0x2c, r1	; 44
		ult1_count = (pulse1 / 58) + 1;
 486:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <pulse1>
 48a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <pulse1+0x1>
 48e:	6a e3       	ldi	r22, 0x3A	; 58
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	0e 94 2a 05 	call	0xa54	; 0xa54 <__divmodhi4>
 496:	6f 5f       	subi	r22, 0xFF	; 255
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <ult1_count+0x1>
 49e:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <ult1_count>
		i = 0;
 4a2:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <i+0x1>
 4a6:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <i>
	}
}
 4aa:	bf 91       	pop	r27
 4ac:	af 91       	pop	r26
 4ae:	9f 91       	pop	r25
 4b0:	8f 91       	pop	r24
 4b2:	7f 91       	pop	r23
 4b4:	6f 91       	pop	r22
 4b6:	5f 91       	pop	r21
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <__vector_2>:

ISR(INT1_vect) // interrupt service routine when there is a change in logic level
{
 4c2:	1f 92       	push	r1
 4c4:	0f 92       	push	r0
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	0f 92       	push	r0
 4ca:	11 24       	eor	r1, r1
 4cc:	5f 93       	push	r21
 4ce:	6f 93       	push	r22
 4d0:	7f 93       	push	r23
 4d2:	8f 93       	push	r24
 4d4:	9f 93       	push	r25
 4d6:	af 93       	push	r26
 4d8:	bf 93       	push	r27

	if (j == 0)
 4da:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <j>
 4de:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <j+0x1>
 4e2:	89 2b       	or	r24, r25
 4e4:	49 f4       	brne	.+18     	; 0x4f8 <__vector_2+0x36>
	{ // when logic change from LOW to HIGH

		TCCR0 |= (1 << CS10); // enabling counter
 4e6:	83 b7       	in	r24, 0x33	; 51
 4e8:	81 60       	ori	r24, 0x01	; 1
 4ea:	83 bf       	out	0x33, r24	; 51

		i = 1;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <i+0x1>
 4f4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <i>
	}
	if (j == 1)
 4f8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <j>
 4fc:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <j+0x1>
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	d1 f4       	brne	.+52     	; 0x538 <__vector_2+0x76>
	{
		TCCR0 = 0; // disabling counter
 504:	13 be       	out	0x33, r1	; 51

		pulse2 = TCNT0; // count memory is updated to intege
 506:	82 b7       	in	r24, 0x32	; 50
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <pulse2+0x1>
 50e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <pulse2>

		TCNT0 = 0; // resetting the counter memory
 512:	12 be       	out	0x32, r1	; 50
		ult2_count = (pulse2 / 58) + 1;
 514:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <pulse2>
 518:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <pulse2+0x1>
 51c:	6a e3       	ldi	r22, 0x3A	; 58
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	0e 94 2a 05 	call	0xa54	; 0xa54 <__divmodhi4>
 524:	6f 5f       	subi	r22, 0xFF	; 255
 526:	7f 4f       	sbci	r23, 0xFF	; 255
 528:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <ult2_count+0x1>
 52c:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <ult2_count>
		j = 0;
 530:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <j+0x1>
 534:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <j>
	}
}
 538:	bf 91       	pop	r27
 53a:	af 91       	pop	r26
 53c:	9f 91       	pop	r25
 53e:	8f 91       	pop	r24
 540:	7f 91       	pop	r23
 542:	6f 91       	pop	r22
 544:	5f 91       	pop	r21
 546:	0f 90       	pop	r0
 548:	0f be       	out	0x3f, r0	; 63
 54a:	0f 90       	pop	r0
 54c:	1f 90       	pop	r1
 54e:	18 95       	reti

00000550 <__vector_3>:

ISR(INT2_vect) // interrupt service routine when there is a change in logic level
{
 550:	1f 92       	push	r1
 552:	0f 92       	push	r0
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	0f 92       	push	r0
 558:	11 24       	eor	r1, r1
 55a:	2f 93       	push	r18
 55c:	3f 93       	push	r19
 55e:	4f 93       	push	r20
 560:	5f 93       	push	r21
 562:	6f 93       	push	r22
 564:	7f 93       	push	r23
 566:	8f 93       	push	r24
 568:	9f 93       	push	r25
 56a:	af 93       	push	r26
 56c:	bf 93       	push	r27
 56e:	ef 93       	push	r30
 570:	ff 93       	push	r31

	if ((MCUCSR & (1 << ISC2)))
 572:	04 b6       	in	r0, 0x34	; 52
 574:	06 fe       	sbrs	r0, 6
 576:	07 c0       	rjmp	.+14     	; 0x586 <__vector_3+0x36>
	{ // when logic change from LOW to HIGH

		TCCR2 |= (1 << CS10);	// enabling counter
 578:	85 b5       	in	r24, 0x25	; 37
 57a:	81 60       	ori	r24, 0x01	; 1
 57c:	85 bd       	out	0x25, r24	; 37
		MCUCSR &= ~(1 << ISC2); // HIGH to LOW
 57e:	84 b7       	in	r24, 0x34	; 52
 580:	8f 7b       	andi	r24, 0xBF	; 191
 582:	84 bf       	out	0x34, r24	; 52
 584:	23 c0       	rjmp	.+70     	; 0x5cc <__vector_3+0x7c>
	}
	else
	{ // when logic from HIGH to LOW

		TCCR2 = 0; // disabling counter
 586:	15 bc       	out	0x25, r1	; 37

		pulse3 = TCNT2; // count memory is updated to integer
 588:	84 b5       	in	r24, 0x24	; 36
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <pulse3+0x1>
 590:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <pulse3>
		ult3_count = round(pulse3 / 58.3);
 594:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <pulse3>
 598:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <pulse3+0x1>
 59c:	07 2e       	mov	r0, r23
 59e:	00 0c       	add	r0, r0
 5a0:	88 0b       	sbc	r24, r24
 5a2:	99 0b       	sbc	r25, r25
 5a4:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatsisf>
 5a8:	23 e3       	ldi	r18, 0x33	; 51
 5aa:	33 e3       	ldi	r19, 0x33	; 51
 5ac:	49 e6       	ldi	r20, 0x69	; 105
 5ae:	52 e4       	ldi	r21, 0x42	; 66
 5b0:	0e 94 83 03 	call	0x706	; 0x706 <__divsf3>
 5b4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <round>
 5b8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
 5bc:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5c0:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
		TCNT2 = 0; // resetting the counter memory
 5c4:	14 bc       	out	0x24, r1	; 36
		MCUCSR |= (1 << ISC2);
 5c6:	84 b7       	in	r24, 0x34	; 52
 5c8:	80 64       	ori	r24, 0x40	; 64
 5ca:	84 bf       	out	0x34, r24	; 52
	}
 5cc:	ff 91       	pop	r31
 5ce:	ef 91       	pop	r30
 5d0:	bf 91       	pop	r27
 5d2:	af 91       	pop	r26
 5d4:	9f 91       	pop	r25
 5d6:	8f 91       	pop	r24
 5d8:	7f 91       	pop	r23
 5da:	6f 91       	pop	r22
 5dc:	5f 91       	pop	r21
 5de:	4f 91       	pop	r20
 5e0:	3f 91       	pop	r19
 5e2:	2f 91       	pop	r18
 5e4:	0f 90       	pop	r0
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	0f 90       	pop	r0
 5ea:	1f 90       	pop	r1
 5ec:	18 95       	reti

000005ee <__vector_13>:
int isInputDataRecevied;




ISR(USART_RXC_vect){
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
	receivedData=UDR;
 5fc:	8c b1       	in	r24, 0x0c	; 12
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <receivedData+0x1>
 604:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <receivedData>
	isInputDataRecevied=1;
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <isInputDataRecevied+0x1>
 610:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <isInputDataRecevied>
}
 614:	9f 91       	pop	r25
 616:	8f 91       	pop	r24
 618:	0f 90       	pop	r0
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	0f 90       	pop	r0
 61e:	1f 90       	pop	r1
 620:	18 95       	reti

00000622 <main>:
int main(void)
{
	int rounds;
	int length;
	int isMetal;
	isInputDataRecevied=0;
 622:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <isInputDataRecevied+0x1>
 626:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <isInputDataRecevied>
	initUltrasonic();
 62a:	0e 94 c3 01 	call	0x386	; 0x386 <initUltrasonic>
	initUSART();
 62e:	0e 94 ae 01 	call	0x35c	; 0x35c <initUSART>
	initSteppers();
 632:	0e 94 60 00 	call	0xc0	; 0xc0 <initSteppers>
	sei(); //enable global interrupts
 636:	78 94       	sei
	while (1)
	{
		while (!(PIND & 1 << PD4)); // Wait until pipe place
 638:	84 9b       	sbis	0x10, 4	; 16
 63a:	fe cf       	rjmp	.-4      	; 0x638 <main+0x16>

		if (PINB & 1 << PB5){ // Change DC motor speed
 63c:	b5 9b       	sbis	0x16, 5	; 22
 63e:	04 c0       	rjmp	.+8      	; 0x648 <main+0x26>
			// metal
			isMetal = 1;
			sendData(HIGH_SPEED);
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	0e 94 b9 01 	call	0x372	; 0x372 <sendData>
 646:	03 c0       	rjmp	.+6      	; 0x64e <main+0x2c>
			
			}else{
			// PVC
			isMetal = 0;
			sendData(LOW_SPEED);
 648:	83 e0       	ldi	r24, 0x03	; 3
 64a:	0e 94 b9 01 	call	0x372	; 0x372 <sendData>

		// TODO USART send message

		// tight clutches1&2
		// Check ultrasonic sensor output
		ult2_distance = getUltrasonic_2_Distance();
 64e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <getUltrasonic_2_Distance>
 652:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <ult2_distance+0x1>
 656:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <ult2_distance>
		ult3_distance = getUltrasonic_3_Distance();
 65a:	0e 94 02 02 	call	0x404	; 0x404 <getUltrasonic_3_Distance>
 65e:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <ult3_distance+0x1>
 662:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <ult3_distance>
		// move both clutches forward until ultrasonic output smallest number
		rotateStepper_1(1, ult2_distance);
 666:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <ult2_distance>
 66a:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <ult2_distance+0x1>
 66e:	07 2e       	mov	r0, r23
 670:	00 0c       	add	r0, r0
 672:	88 0b       	sbc	r24, r24
 674:	99 0b       	sbc	r25, r25
 676:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatsisf>
 67a:	ab 01       	movw	r20, r22
 67c:	bc 01       	movw	r22, r24
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	0e 94 64 00 	call	0xc8	; 0xc8 <rotateStepper_1>
		rotateStepper_2(1, ult3_distance);
 686:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <ult3_distance>
 68a:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <ult3_distance+0x1>
 68e:	07 2e       	mov	r0, r23
 690:	00 0c       	add	r0, r0
 692:	88 0b       	sbc	r24, r24
 694:	99 0b       	sbc	r25, r25
 696:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatsisf>
 69a:	ab 01       	movw	r20, r22
 69c:	bc 01       	movw	r22, r24
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 20 01 	call	0x240	; 0x240 <rotateStepper_2>
		while ((getUltrasonic_2_Distance() >= 3) && (getUltrasonic_3_Distance() >= 3));
 6a6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <getUltrasonic_2_Distance>
 6aa:	03 97       	sbiw	r24, 0x03	; 3
 6ac:	24 f0       	brlt	.+8      	; 0x6b6 <main+0x94>
 6ae:	0e 94 02 02 	call	0x404	; 0x404 <getUltrasonic_3_Distance>
 6b2:	03 97       	sbiw	r24, 0x03	; 3
 6b4:	c4 f7       	brge	.-16     	; 0x6a6 <main+0x84>

		// move clutches through rail to align

		if ((PIND & 1 << PD5) && (PIND && 1 << PD6)){ // if both Ir sensor-2,3 are detected pipe
 6b6:	85 9b       	sbis	0x10, 5	; 16
 6b8:	0d c0       	rjmp	.+26     	; 0x6d4 <main+0xb2>
 6ba:	80 b3       	in	r24, 0x10	; 16
 6bc:	88 23       	and	r24, r24
 6be:	51 f0       	breq	.+20     	; 0x6d4 <main+0xb2>
			rotateDCMotors(1);
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 49 00 	call	0x92	; 0x92 <rotateDCMotors>
			while (PIND && 1 << PD6);
 6c8:	80 b3       	in	r24, 0x10	; 16
 6ca:	81 11       	cpse	r24, r1
 6cc:	fd cf       	rjmp	.-6      	; 0x6c8 <main+0xa6>
			stopDCMotors();
 6ce:	0e 94 59 00 	call	0xb2	; 0xb2 <stopDCMotors>
 6d2:	0d c0       	rjmp	.+26     	; 0x6ee <main+0xcc>
		}
		else if (!(PIND & 1 << PD5) && !(PIND && 1 << PD6)){ // else if both Ir sensor-2,3 are not detected pipe
 6d4:	85 99       	sbic	0x10, 5	; 16
 6d6:	0b c0       	rjmp	.+22     	; 0x6ee <main+0xcc>
 6d8:	80 b3       	in	r24, 0x10	; 16
 6da:	81 11       	cpse	r24, r1
 6dc:	08 c0       	rjmp	.+16     	; 0x6ee <main+0xcc>
			rotateDCMotors(0);
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 49 00 	call	0x92	; 0x92 <rotateDCMotors>
			while (!(PIND & 1 << PD5));
 6e6:	85 9b       	sbis	0x10, 5	; 16
 6e8:	fe cf       	rjmp	.-4      	; 0x6e6 <main+0xc4>
			stopDCMotors();
 6ea:	0e 94 59 00 	call	0xb2	; 0xb2 <stopDCMotors>
		}

		while(!isInputDataRecevied);//get length value from user input
 6ee:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <isInputDataRecevied>
 6f2:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <isInputDataRecevied+0x1>
 6f6:	89 2b       	or	r24, r25
 6f8:	d1 f3       	breq	.-12     	; 0x6ee <main+0xcc>
 6fa:	ff cf       	rjmp	.-2      	; 0x6fa <main+0xd8>

000006fc <__cmpsf2>:
 6fc:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__fp_cmp>
 700:	08 f4       	brcc	.+2      	; 0x704 <__cmpsf2+0x8>
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	08 95       	ret

00000706 <__divsf3>:
 706:	0e 94 97 03 	call	0x72e	; 0x72e <__divsf3x>
 70a:	0c 94 a3 04 	jmp	0x946	; 0x946 <__fp_round>
 70e:	0e 94 9c 04 	call	0x938	; 0x938 <__fp_pscB>
 712:	58 f0       	brcs	.+22     	; 0x72a <__divsf3+0x24>
 714:	0e 94 95 04 	call	0x92a	; 0x92a <__fp_pscA>
 718:	40 f0       	brcs	.+16     	; 0x72a <__divsf3+0x24>
 71a:	29 f4       	brne	.+10     	; 0x726 <__divsf3+0x20>
 71c:	5f 3f       	cpi	r21, 0xFF	; 255
 71e:	29 f0       	breq	.+10     	; 0x72a <__divsf3+0x24>
 720:	0c 94 8c 04 	jmp	0x918	; 0x918 <__fp_inf>
 724:	51 11       	cpse	r21, r1
 726:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__fp_szero>
 72a:	0c 94 92 04 	jmp	0x924	; 0x924 <__fp_nan>

0000072e <__divsf3x>:
 72e:	0e 94 b4 04 	call	0x968	; 0x968 <__fp_split3>
 732:	68 f3       	brcs	.-38     	; 0x70e <__divsf3+0x8>

00000734 <__divsf3_pse>:
 734:	99 23       	and	r25, r25
 736:	b1 f3       	breq	.-20     	; 0x724 <__divsf3+0x1e>
 738:	55 23       	and	r21, r21
 73a:	91 f3       	breq	.-28     	; 0x720 <__divsf3+0x1a>
 73c:	95 1b       	sub	r25, r21
 73e:	55 0b       	sbc	r21, r21
 740:	bb 27       	eor	r27, r27
 742:	aa 27       	eor	r26, r26
 744:	62 17       	cp	r22, r18
 746:	73 07       	cpc	r23, r19
 748:	84 07       	cpc	r24, r20
 74a:	38 f0       	brcs	.+14     	; 0x75a <__divsf3_pse+0x26>
 74c:	9f 5f       	subi	r25, 0xFF	; 255
 74e:	5f 4f       	sbci	r21, 0xFF	; 255
 750:	22 0f       	add	r18, r18
 752:	33 1f       	adc	r19, r19
 754:	44 1f       	adc	r20, r20
 756:	aa 1f       	adc	r26, r26
 758:	a9 f3       	breq	.-22     	; 0x744 <__divsf3_pse+0x10>
 75a:	35 d0       	rcall	.+106    	; 0x7c6 <__divsf3_pse+0x92>
 75c:	0e 2e       	mov	r0, r30
 75e:	3a f0       	brmi	.+14     	; 0x76e <__divsf3_pse+0x3a>
 760:	e0 e8       	ldi	r30, 0x80	; 128
 762:	32 d0       	rcall	.+100    	; 0x7c8 <__divsf3_pse+0x94>
 764:	91 50       	subi	r25, 0x01	; 1
 766:	50 40       	sbci	r21, 0x00	; 0
 768:	e6 95       	lsr	r30
 76a:	00 1c       	adc	r0, r0
 76c:	ca f7       	brpl	.-14     	; 0x760 <__divsf3_pse+0x2c>
 76e:	2b d0       	rcall	.+86     	; 0x7c6 <__divsf3_pse+0x92>
 770:	fe 2f       	mov	r31, r30
 772:	29 d0       	rcall	.+82     	; 0x7c6 <__divsf3_pse+0x92>
 774:	66 0f       	add	r22, r22
 776:	77 1f       	adc	r23, r23
 778:	88 1f       	adc	r24, r24
 77a:	bb 1f       	adc	r27, r27
 77c:	26 17       	cp	r18, r22
 77e:	37 07       	cpc	r19, r23
 780:	48 07       	cpc	r20, r24
 782:	ab 07       	cpc	r26, r27
 784:	b0 e8       	ldi	r27, 0x80	; 128
 786:	09 f0       	breq	.+2      	; 0x78a <__divsf3_pse+0x56>
 788:	bb 0b       	sbc	r27, r27
 78a:	80 2d       	mov	r24, r0
 78c:	bf 01       	movw	r22, r30
 78e:	ff 27       	eor	r31, r31
 790:	93 58       	subi	r25, 0x83	; 131
 792:	5f 4f       	sbci	r21, 0xFF	; 255
 794:	3a f0       	brmi	.+14     	; 0x7a4 <__divsf3_pse+0x70>
 796:	9e 3f       	cpi	r25, 0xFE	; 254
 798:	51 05       	cpc	r21, r1
 79a:	78 f0       	brcs	.+30     	; 0x7ba <__divsf3_pse+0x86>
 79c:	0c 94 8c 04 	jmp	0x918	; 0x918 <__fp_inf>
 7a0:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__fp_szero>
 7a4:	5f 3f       	cpi	r21, 0xFF	; 255
 7a6:	e4 f3       	brlt	.-8      	; 0x7a0 <__divsf3_pse+0x6c>
 7a8:	98 3e       	cpi	r25, 0xE8	; 232
 7aa:	d4 f3       	brlt	.-12     	; 0x7a0 <__divsf3_pse+0x6c>
 7ac:	86 95       	lsr	r24
 7ae:	77 95       	ror	r23
 7b0:	67 95       	ror	r22
 7b2:	b7 95       	ror	r27
 7b4:	f7 95       	ror	r31
 7b6:	9f 5f       	subi	r25, 0xFF	; 255
 7b8:	c9 f7       	brne	.-14     	; 0x7ac <__divsf3_pse+0x78>
 7ba:	88 0f       	add	r24, r24
 7bc:	91 1d       	adc	r25, r1
 7be:	96 95       	lsr	r25
 7c0:	87 95       	ror	r24
 7c2:	97 f9       	bld	r25, 7
 7c4:	08 95       	ret
 7c6:	e1 e0       	ldi	r30, 0x01	; 1
 7c8:	66 0f       	add	r22, r22
 7ca:	77 1f       	adc	r23, r23
 7cc:	88 1f       	adc	r24, r24
 7ce:	bb 1f       	adc	r27, r27
 7d0:	62 17       	cp	r22, r18
 7d2:	73 07       	cpc	r23, r19
 7d4:	84 07       	cpc	r24, r20
 7d6:	ba 07       	cpc	r27, r26
 7d8:	20 f0       	brcs	.+8      	; 0x7e2 <__divsf3_pse+0xae>
 7da:	62 1b       	sub	r22, r18
 7dc:	73 0b       	sbc	r23, r19
 7de:	84 0b       	sbc	r24, r20
 7e0:	ba 0b       	sbc	r27, r26
 7e2:	ee 1f       	adc	r30, r30
 7e4:	88 f7       	brcc	.-30     	; 0x7c8 <__divsf3_pse+0x94>
 7e6:	e0 95       	com	r30
 7e8:	08 95       	ret

000007ea <__fixsfsi>:
 7ea:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__fixunssfsi>
 7ee:	68 94       	set
 7f0:	b1 11       	cpse	r27, r1
 7f2:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__fp_szero>
 7f6:	08 95       	ret

000007f8 <__fixunssfsi>:
 7f8:	0e 94 bc 04 	call	0x978	; 0x978 <__fp_splitA>
 7fc:	88 f0       	brcs	.+34     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7fe:	9f 57       	subi	r25, 0x7F	; 127
 800:	98 f0       	brcs	.+38     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 802:	b9 2f       	mov	r27, r25
 804:	99 27       	eor	r25, r25
 806:	b7 51       	subi	r27, 0x17	; 23
 808:	b0 f0       	brcs	.+44     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 80a:	e1 f0       	breq	.+56     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 80c:	66 0f       	add	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	1a f0       	brmi	.+6      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 816:	ba 95       	dec	r27
 818:	c9 f7       	brne	.-14     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 81a:	14 c0       	rjmp	.+40     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 81c:	b1 30       	cpi	r27, 0x01	; 1
 81e:	91 f0       	breq	.+36     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 820:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fp_zero>
 824:	b1 e0       	ldi	r27, 0x01	; 1
 826:	08 95       	ret
 828:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__fp_zero>
 82c:	67 2f       	mov	r22, r23
 82e:	78 2f       	mov	r23, r24
 830:	88 27       	eor	r24, r24
 832:	b8 5f       	subi	r27, 0xF8	; 248
 834:	39 f0       	breq	.+14     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 836:	b9 3f       	cpi	r27, 0xF9	; 249
 838:	cc f3       	brlt	.-14     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 83a:	86 95       	lsr	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b3 95       	inc	r27
 842:	d9 f7       	brne	.-10     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 844:	3e f4       	brtc	.+14     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 846:	90 95       	com	r25
 848:	80 95       	com	r24
 84a:	70 95       	com	r23
 84c:	61 95       	neg	r22
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	8f 4f       	sbci	r24, 0xFF	; 255
 852:	9f 4f       	sbci	r25, 0xFF	; 255
 854:	08 95       	ret

00000856 <__floatunsisf>:
 856:	e8 94       	clt
 858:	09 c0       	rjmp	.+18     	; 0x86c <__stack+0xd>

0000085a <__floatsisf>:
 85a:	97 fb       	bst	r25, 7
 85c:	3e f4       	brtc	.+14     	; 0x86c <__stack+0xd>
 85e:	90 95       	com	r25
 860:	80 95       	com	r24
 862:	70 95       	com	r23
 864:	61 95       	neg	r22
 866:	7f 4f       	sbci	r23, 0xFF	; 255
 868:	8f 4f       	sbci	r24, 0xFF	; 255
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	99 23       	and	r25, r25
 86e:	a9 f0       	breq	.+42     	; 0x89a <__stack+0x3b>
 870:	f9 2f       	mov	r31, r25
 872:	96 e9       	ldi	r25, 0x96	; 150
 874:	bb 27       	eor	r27, r27
 876:	93 95       	inc	r25
 878:	f6 95       	lsr	r31
 87a:	87 95       	ror	r24
 87c:	77 95       	ror	r23
 87e:	67 95       	ror	r22
 880:	b7 95       	ror	r27
 882:	f1 11       	cpse	r31, r1
 884:	f8 cf       	rjmp	.-16     	; 0x876 <__stack+0x17>
 886:	fa f4       	brpl	.+62     	; 0x8c6 <__stack+0x67>
 888:	bb 0f       	add	r27, r27
 88a:	11 f4       	brne	.+4      	; 0x890 <__stack+0x31>
 88c:	60 ff       	sbrs	r22, 0
 88e:	1b c0       	rjmp	.+54     	; 0x8c6 <__stack+0x67>
 890:	6f 5f       	subi	r22, 0xFF	; 255
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	8f 4f       	sbci	r24, 0xFF	; 255
 896:	9f 4f       	sbci	r25, 0xFF	; 255
 898:	16 c0       	rjmp	.+44     	; 0x8c6 <__stack+0x67>
 89a:	88 23       	and	r24, r24
 89c:	11 f0       	breq	.+4      	; 0x8a2 <__stack+0x43>
 89e:	96 e9       	ldi	r25, 0x96	; 150
 8a0:	11 c0       	rjmp	.+34     	; 0x8c4 <__stack+0x65>
 8a2:	77 23       	and	r23, r23
 8a4:	21 f0       	breq	.+8      	; 0x8ae <__stack+0x4f>
 8a6:	9e e8       	ldi	r25, 0x8E	; 142
 8a8:	87 2f       	mov	r24, r23
 8aa:	76 2f       	mov	r23, r22
 8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <__stack+0x59>
 8ae:	66 23       	and	r22, r22
 8b0:	71 f0       	breq	.+28     	; 0x8ce <__stack+0x6f>
 8b2:	96 e8       	ldi	r25, 0x86	; 134
 8b4:	86 2f       	mov	r24, r22
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	60 e0       	ldi	r22, 0x00	; 0
 8ba:	2a f0       	brmi	.+10     	; 0x8c6 <__stack+0x67>
 8bc:	9a 95       	dec	r25
 8be:	66 0f       	add	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	88 1f       	adc	r24, r24
 8c4:	da f7       	brpl	.-10     	; 0x8bc <__stack+0x5d>
 8c6:	88 0f       	add	r24, r24
 8c8:	96 95       	lsr	r25
 8ca:	87 95       	ror	r24
 8cc:	97 f9       	bld	r25, 7
 8ce:	08 95       	ret

000008d0 <__fp_cmp>:
 8d0:	99 0f       	add	r25, r25
 8d2:	00 08       	sbc	r0, r0
 8d4:	55 0f       	add	r21, r21
 8d6:	aa 0b       	sbc	r26, r26
 8d8:	e0 e8       	ldi	r30, 0x80	; 128
 8da:	fe ef       	ldi	r31, 0xFE	; 254
 8dc:	16 16       	cp	r1, r22
 8de:	17 06       	cpc	r1, r23
 8e0:	e8 07       	cpc	r30, r24
 8e2:	f9 07       	cpc	r31, r25
 8e4:	c0 f0       	brcs	.+48     	; 0x916 <__fp_cmp+0x46>
 8e6:	12 16       	cp	r1, r18
 8e8:	13 06       	cpc	r1, r19
 8ea:	e4 07       	cpc	r30, r20
 8ec:	f5 07       	cpc	r31, r21
 8ee:	98 f0       	brcs	.+38     	; 0x916 <__fp_cmp+0x46>
 8f0:	62 1b       	sub	r22, r18
 8f2:	73 0b       	sbc	r23, r19
 8f4:	84 0b       	sbc	r24, r20
 8f6:	95 0b       	sbc	r25, r21
 8f8:	39 f4       	brne	.+14     	; 0x908 <__fp_cmp+0x38>
 8fa:	0a 26       	eor	r0, r26
 8fc:	61 f0       	breq	.+24     	; 0x916 <__fp_cmp+0x46>
 8fe:	23 2b       	or	r18, r19
 900:	24 2b       	or	r18, r20
 902:	25 2b       	or	r18, r21
 904:	21 f4       	brne	.+8      	; 0x90e <__fp_cmp+0x3e>
 906:	08 95       	ret
 908:	0a 26       	eor	r0, r26
 90a:	09 f4       	brne	.+2      	; 0x90e <__fp_cmp+0x3e>
 90c:	a1 40       	sbci	r26, 0x01	; 1
 90e:	a6 95       	lsr	r26
 910:	8f ef       	ldi	r24, 0xFF	; 255
 912:	81 1d       	adc	r24, r1
 914:	81 1d       	adc	r24, r1
 916:	08 95       	ret

00000918 <__fp_inf>:
 918:	97 f9       	bld	r25, 7
 91a:	9f 67       	ori	r25, 0x7F	; 127
 91c:	80 e8       	ldi	r24, 0x80	; 128
 91e:	70 e0       	ldi	r23, 0x00	; 0
 920:	60 e0       	ldi	r22, 0x00	; 0
 922:	08 95       	ret

00000924 <__fp_nan>:
 924:	9f ef       	ldi	r25, 0xFF	; 255
 926:	80 ec       	ldi	r24, 0xC0	; 192
 928:	08 95       	ret

0000092a <__fp_pscA>:
 92a:	00 24       	eor	r0, r0
 92c:	0a 94       	dec	r0
 92e:	16 16       	cp	r1, r22
 930:	17 06       	cpc	r1, r23
 932:	18 06       	cpc	r1, r24
 934:	09 06       	cpc	r0, r25
 936:	08 95       	ret

00000938 <__fp_pscB>:
 938:	00 24       	eor	r0, r0
 93a:	0a 94       	dec	r0
 93c:	12 16       	cp	r1, r18
 93e:	13 06       	cpc	r1, r19
 940:	14 06       	cpc	r1, r20
 942:	05 06       	cpc	r0, r21
 944:	08 95       	ret

00000946 <__fp_round>:
 946:	09 2e       	mov	r0, r25
 948:	03 94       	inc	r0
 94a:	00 0c       	add	r0, r0
 94c:	11 f4       	brne	.+4      	; 0x952 <__fp_round+0xc>
 94e:	88 23       	and	r24, r24
 950:	52 f0       	brmi	.+20     	; 0x966 <__fp_round+0x20>
 952:	bb 0f       	add	r27, r27
 954:	40 f4       	brcc	.+16     	; 0x966 <__fp_round+0x20>
 956:	bf 2b       	or	r27, r31
 958:	11 f4       	brne	.+4      	; 0x95e <__fp_round+0x18>
 95a:	60 ff       	sbrs	r22, 0
 95c:	04 c0       	rjmp	.+8      	; 0x966 <__fp_round+0x20>
 95e:	6f 5f       	subi	r22, 0xFF	; 255
 960:	7f 4f       	sbci	r23, 0xFF	; 255
 962:	8f 4f       	sbci	r24, 0xFF	; 255
 964:	9f 4f       	sbci	r25, 0xFF	; 255
 966:	08 95       	ret

00000968 <__fp_split3>:
 968:	57 fd       	sbrc	r21, 7
 96a:	90 58       	subi	r25, 0x80	; 128
 96c:	44 0f       	add	r20, r20
 96e:	55 1f       	adc	r21, r21
 970:	59 f0       	breq	.+22     	; 0x988 <__fp_splitA+0x10>
 972:	5f 3f       	cpi	r21, 0xFF	; 255
 974:	71 f0       	breq	.+28     	; 0x992 <__fp_splitA+0x1a>
 976:	47 95       	ror	r20

00000978 <__fp_splitA>:
 978:	88 0f       	add	r24, r24
 97a:	97 fb       	bst	r25, 7
 97c:	99 1f       	adc	r25, r25
 97e:	61 f0       	breq	.+24     	; 0x998 <__fp_splitA+0x20>
 980:	9f 3f       	cpi	r25, 0xFF	; 255
 982:	79 f0       	breq	.+30     	; 0x9a2 <__fp_splitA+0x2a>
 984:	87 95       	ror	r24
 986:	08 95       	ret
 988:	12 16       	cp	r1, r18
 98a:	13 06       	cpc	r1, r19
 98c:	14 06       	cpc	r1, r20
 98e:	55 1f       	adc	r21, r21
 990:	f2 cf       	rjmp	.-28     	; 0x976 <__fp_split3+0xe>
 992:	46 95       	lsr	r20
 994:	f1 df       	rcall	.-30     	; 0x978 <__fp_splitA>
 996:	08 c0       	rjmp	.+16     	; 0x9a8 <__fp_splitA+0x30>
 998:	16 16       	cp	r1, r22
 99a:	17 06       	cpc	r1, r23
 99c:	18 06       	cpc	r1, r24
 99e:	99 1f       	adc	r25, r25
 9a0:	f1 cf       	rjmp	.-30     	; 0x984 <__fp_splitA+0xc>
 9a2:	86 95       	lsr	r24
 9a4:	71 05       	cpc	r23, r1
 9a6:	61 05       	cpc	r22, r1
 9a8:	08 94       	sec
 9aa:	08 95       	ret

000009ac <__fp_zero>:
 9ac:	e8 94       	clt

000009ae <__fp_szero>:
 9ae:	bb 27       	eor	r27, r27
 9b0:	66 27       	eor	r22, r22
 9b2:	77 27       	eor	r23, r23
 9b4:	cb 01       	movw	r24, r22
 9b6:	97 f9       	bld	r25, 7
 9b8:	08 95       	ret

000009ba <round>:
 9ba:	0e 94 bc 04 	call	0x978	; 0x978 <__fp_splitA>
 9be:	e8 f0       	brcs	.+58     	; 0x9fa <round+0x40>
 9c0:	9e 37       	cpi	r25, 0x7E	; 126
 9c2:	e8 f0       	brcs	.+58     	; 0x9fe <round+0x44>
 9c4:	96 39       	cpi	r25, 0x96	; 150
 9c6:	b8 f4       	brcc	.+46     	; 0x9f6 <round+0x3c>
 9c8:	9e 38       	cpi	r25, 0x8E	; 142
 9ca:	48 f4       	brcc	.+18     	; 0x9de <round+0x24>
 9cc:	67 2f       	mov	r22, r23
 9ce:	78 2f       	mov	r23, r24
 9d0:	88 27       	eor	r24, r24
 9d2:	98 5f       	subi	r25, 0xF8	; 248
 9d4:	f9 cf       	rjmp	.-14     	; 0x9c8 <round+0xe>
 9d6:	86 95       	lsr	r24
 9d8:	77 95       	ror	r23
 9da:	67 95       	ror	r22
 9dc:	93 95       	inc	r25
 9de:	95 39       	cpi	r25, 0x95	; 149
 9e0:	d0 f3       	brcs	.-12     	; 0x9d6 <round+0x1c>
 9e2:	b6 2f       	mov	r27, r22
 9e4:	b1 70       	andi	r27, 0x01	; 1
 9e6:	6b 0f       	add	r22, r27
 9e8:	71 1d       	adc	r23, r1
 9ea:	81 1d       	adc	r24, r1
 9ec:	20 f4       	brcc	.+8      	; 0x9f6 <round+0x3c>
 9ee:	87 95       	ror	r24
 9f0:	77 95       	ror	r23
 9f2:	67 95       	ror	r22
 9f4:	93 95       	inc	r25
 9f6:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_mintl>
 9fa:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_mpack>
 9fe:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__fp_szero>

00000a02 <__fp_mintl>:
 a02:	88 23       	and	r24, r24
 a04:	71 f4       	brne	.+28     	; 0xa22 <__fp_mintl+0x20>
 a06:	77 23       	and	r23, r23
 a08:	21 f0       	breq	.+8      	; 0xa12 <__fp_mintl+0x10>
 a0a:	98 50       	subi	r25, 0x08	; 8
 a0c:	87 2b       	or	r24, r23
 a0e:	76 2f       	mov	r23, r22
 a10:	07 c0       	rjmp	.+14     	; 0xa20 <__fp_mintl+0x1e>
 a12:	66 23       	and	r22, r22
 a14:	11 f4       	brne	.+4      	; 0xa1a <__fp_mintl+0x18>
 a16:	99 27       	eor	r25, r25
 a18:	0d c0       	rjmp	.+26     	; 0xa34 <__fp_mintl+0x32>
 a1a:	90 51       	subi	r25, 0x10	; 16
 a1c:	86 2b       	or	r24, r22
 a1e:	70 e0       	ldi	r23, 0x00	; 0
 a20:	60 e0       	ldi	r22, 0x00	; 0
 a22:	2a f0       	brmi	.+10     	; 0xa2e <__fp_mintl+0x2c>
 a24:	9a 95       	dec	r25
 a26:	66 0f       	add	r22, r22
 a28:	77 1f       	adc	r23, r23
 a2a:	88 1f       	adc	r24, r24
 a2c:	da f7       	brpl	.-10     	; 0xa24 <__fp_mintl+0x22>
 a2e:	88 0f       	add	r24, r24
 a30:	96 95       	lsr	r25
 a32:	87 95       	ror	r24
 a34:	97 f9       	bld	r25, 7
 a36:	08 95       	ret

00000a38 <__fp_mpack>:
 a38:	9f 3f       	cpi	r25, 0xFF	; 255
 a3a:	31 f0       	breq	.+12     	; 0xa48 <__fp_mpack_finite+0xc>

00000a3c <__fp_mpack_finite>:
 a3c:	91 50       	subi	r25, 0x01	; 1
 a3e:	20 f4       	brcc	.+8      	; 0xa48 <__fp_mpack_finite+0xc>
 a40:	87 95       	ror	r24
 a42:	77 95       	ror	r23
 a44:	67 95       	ror	r22
 a46:	b7 95       	ror	r27
 a48:	88 0f       	add	r24, r24
 a4a:	91 1d       	adc	r25, r1
 a4c:	96 95       	lsr	r25
 a4e:	87 95       	ror	r24
 a50:	97 f9       	bld	r25, 7
 a52:	08 95       	ret

00000a54 <__divmodhi4>:
 a54:	97 fb       	bst	r25, 7
 a56:	07 2e       	mov	r0, r23
 a58:	16 f4       	brtc	.+4      	; 0xa5e <__divmodhi4+0xa>
 a5a:	00 94       	com	r0
 a5c:	07 d0       	rcall	.+14     	; 0xa6c <__divmodhi4_neg1>
 a5e:	77 fd       	sbrc	r23, 7
 a60:	09 d0       	rcall	.+18     	; 0xa74 <__divmodhi4_neg2>
 a62:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodhi4>
 a66:	07 fc       	sbrc	r0, 7
 a68:	05 d0       	rcall	.+10     	; 0xa74 <__divmodhi4_neg2>
 a6a:	3e f4       	brtc	.+14     	; 0xa7a <__divmodhi4_exit>

00000a6c <__divmodhi4_neg1>:
 a6c:	90 95       	com	r25
 a6e:	81 95       	neg	r24
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	08 95       	ret

00000a74 <__divmodhi4_neg2>:
 a74:	70 95       	com	r23
 a76:	61 95       	neg	r22
 a78:	7f 4f       	sbci	r23, 0xFF	; 255

00000a7a <__divmodhi4_exit>:
 a7a:	08 95       	ret

00000a7c <__udivmodhi4>:
 a7c:	aa 1b       	sub	r26, r26
 a7e:	bb 1b       	sub	r27, r27
 a80:	51 e1       	ldi	r21, 0x11	; 17
 a82:	07 c0       	rjmp	.+14     	; 0xa92 <__udivmodhi4_ep>

00000a84 <__udivmodhi4_loop>:
 a84:	aa 1f       	adc	r26, r26
 a86:	bb 1f       	adc	r27, r27
 a88:	a6 17       	cp	r26, r22
 a8a:	b7 07       	cpc	r27, r23
 a8c:	10 f0       	brcs	.+4      	; 0xa92 <__udivmodhi4_ep>
 a8e:	a6 1b       	sub	r26, r22
 a90:	b7 0b       	sbc	r27, r23

00000a92 <__udivmodhi4_ep>:
 a92:	88 1f       	adc	r24, r24
 a94:	99 1f       	adc	r25, r25
 a96:	5a 95       	dec	r21
 a98:	a9 f7       	brne	.-22     	; 0xa84 <__udivmodhi4_loop>
 a9a:	80 95       	com	r24
 a9c:	90 95       	com	r25
 a9e:	bc 01       	movw	r22, r24
 aa0:	cd 01       	movw	r24, r26
 aa2:	08 95       	ret

00000aa4 <_exit>:
 aa4:	f8 94       	cli

00000aa6 <__stop_program>:
 aa6:	ff cf       	rjmp	.-2      	; 0xaa6 <__stop_program>
