
User Input Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  000005cc  00000660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000aa  008000aa  000006aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014cf  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000993  00000000  00000000  00001cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b41  00000000  00000000  0000265a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  0000319c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000444  00000000  00000000  00003328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae5  00000000  00000000  0000376c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004251  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa ea       	ldi	r26, 0xAA	; 170
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3b       	cpi	r26, 0xB3	; 179
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b8 01 	call	0x370	; 0x370 <main>
  8a:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <rotateMotor>:
void setMotorSpeed(int bladeMotorSpeed){
	OCR0 = bladeMotorSpeed;
}

void rotateMotor(){
	PORTB |=(1<<PB1);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	82 60       	ori	r24, 0x02	; 2
  96:	88 bb       	out	0x18, r24	; 24
  98:	08 95       	ret

0000009a <stopMotor>:
}
void stopMotor(){
	PORTB &=~(1<<PB1);
  9a:	88 b3       	in	r24, 0x18	; 24
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	88 bb       	out	0x18, r24	; 24
  a0:	08 95       	ret

000000a2 <keypad>:
#include "keypad.h"

// to check whether a key is pressed and return that value
unsigned char keypad()
{
	PORTA=0b11111110;//check first row
  a2:	8e ef       	ldi	r24, 0xFE	; 254
  a4:	8b bb       	out	0x1b, r24	; 27
	if((PINA &(1<<PINA4))==0)
  a6:	cc 99       	sbic	0x19, 4	; 25
  a8:	08 c0       	rjmp	.+16     	; 0xba <keypad+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8f ed       	ldi	r24, 0xDF	; 223
  ac:	9e e2       	ldi	r25, 0x2E	; 46
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <keypad+0xc>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <keypad+0x12>
  b4:	00 00       	nop
	{
		_delay_ms(3);
		return '7';
  b6:	87 e3       	ldi	r24, 0x37	; 55
  b8:	08 95       	ret
	}
	else if((PINA & (1<<PINA5))==0)
  ba:	cd 99       	sbic	0x19, 5	; 25
  bc:	08 c0       	rjmp	.+16     	; 0xce <keypad+0x2c>
  be:	8f ed       	ldi	r24, 0xDF	; 223
  c0:	9e e2       	ldi	r25, 0x2E	; 46
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <keypad+0x20>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <keypad+0x26>
  c8:	00 00       	nop
	{
		_delay_ms(3);
		return '8';
  ca:	88 e3       	ldi	r24, 0x38	; 56
  cc:	08 95       	ret
	}
	else if((PINA & (1<<PINA6))==0)
  ce:	ce 99       	sbic	0x19, 6	; 25
  d0:	08 c0       	rjmp	.+16     	; 0xe2 <keypad+0x40>
  d2:	8f ed       	ldi	r24, 0xDF	; 223
  d4:	9e e2       	ldi	r25, 0x2E	; 46
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <keypad+0x34>
  da:	00 c0       	rjmp	.+0      	; 0xdc <keypad+0x3a>
  dc:	00 00       	nop
	{
		_delay_ms(3);
		return '9';
  de:	89 e3       	ldi	r24, 0x39	; 57
  e0:	08 95       	ret
	}
	else if((PINA & (1<<PINA7))==0)
  e2:	cf 99       	sbic	0x19, 7	; 25
  e4:	08 c0       	rjmp	.+16     	; 0xf6 <keypad+0x54>
  e6:	8f ed       	ldi	r24, 0xDF	; 223
  e8:	9e e2       	ldi	r25, 0x2E	; 46
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <keypad+0x48>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <keypad+0x4e>
  f0:	00 00       	nop
	{
		_delay_ms(3);
		return '/';
  f2:	8f e2       	ldi	r24, 0x2F	; 47
  f4:	08 95       	ret
	}
	
	PORTA=0b11111101;//check second row
  f6:	8d ef       	ldi	r24, 0xFD	; 253
  f8:	8b bb       	out	0x1b, r24	; 27
	if((PINA &(1<<PINA4))==0)
  fa:	cc 99       	sbic	0x19, 4	; 25
  fc:	08 c0       	rjmp	.+16     	; 0x10e <keypad+0x6c>
  fe:	8f ed       	ldi	r24, 0xDF	; 223
 100:	9e e2       	ldi	r25, 0x2E	; 46
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <keypad+0x60>
 106:	00 c0       	rjmp	.+0      	; 0x108 <keypad+0x66>
 108:	00 00       	nop
	{
		_delay_ms(3);
		return '4';
 10a:	84 e3       	ldi	r24, 0x34	; 52
 10c:	08 95       	ret
	}
	else if((PINA & (1<<PINA5))==0)
 10e:	cd 99       	sbic	0x19, 5	; 25
 110:	08 c0       	rjmp	.+16     	; 0x122 <keypad+0x80>
 112:	8f ed       	ldi	r24, 0xDF	; 223
 114:	9e e2       	ldi	r25, 0x2E	; 46
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <keypad+0x74>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <keypad+0x7a>
 11c:	00 00       	nop
	{
		_delay_ms(3);
		return '5';
 11e:	85 e3       	ldi	r24, 0x35	; 53
 120:	08 95       	ret
	}
	else if((PINA & (1<<PINA6))==0)
 122:	ce 99       	sbic	0x19, 6	; 25
 124:	08 c0       	rjmp	.+16     	; 0x136 <keypad+0x94>
 126:	8f ed       	ldi	r24, 0xDF	; 223
 128:	9e e2       	ldi	r25, 0x2E	; 46
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <keypad+0x88>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <keypad+0x8e>
 130:	00 00       	nop
	{
		_delay_ms(3);
		return '6';
 132:	86 e3       	ldi	r24, 0x36	; 54
 134:	08 95       	ret
	}
	else if((PINA & (1<<PINA7))==0)
 136:	cf 99       	sbic	0x19, 7	; 25
 138:	08 c0       	rjmp	.+16     	; 0x14a <keypad+0xa8>
 13a:	8f ed       	ldi	r24, 0xDF	; 223
 13c:	9e e2       	ldi	r25, 0x2E	; 46
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <keypad+0x9c>
 142:	00 c0       	rjmp	.+0      	; 0x144 <keypad+0xa2>
 144:	00 00       	nop
	{
		_delay_ms(3);
		return '*';
 146:	8a e2       	ldi	r24, 0x2A	; 42
 148:	08 95       	ret
	}
	
	PORTA=0b11111011;//check third row
 14a:	8b ef       	ldi	r24, 0xFB	; 251
 14c:	8b bb       	out	0x1b, r24	; 27
	if((PINA &(1<<PINA4))==0)
 14e:	cc 99       	sbic	0x19, 4	; 25
 150:	08 c0       	rjmp	.+16     	; 0x162 <keypad+0xc0>
 152:	8f ed       	ldi	r24, 0xDF	; 223
 154:	9e e2       	ldi	r25, 0x2E	; 46
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <keypad+0xb4>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <keypad+0xba>
 15c:	00 00       	nop
	{
		_delay_ms(3);
		return '1';
 15e:	81 e3       	ldi	r24, 0x31	; 49
 160:	08 95       	ret
	}
	else if((PINA & (1<<PINA5))==0)
 162:	cd 99       	sbic	0x19, 5	; 25
 164:	08 c0       	rjmp	.+16     	; 0x176 <keypad+0xd4>
 166:	8f ed       	ldi	r24, 0xDF	; 223
 168:	9e e2       	ldi	r25, 0x2E	; 46
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <keypad+0xc8>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <keypad+0xce>
 170:	00 00       	nop
	{
		_delay_ms(3);
		return '2';
 172:	82 e3       	ldi	r24, 0x32	; 50
 174:	08 95       	ret
	}
	else if((PINA & (1<<PINA6))==0)
 176:	ce 99       	sbic	0x19, 6	; 25
 178:	08 c0       	rjmp	.+16     	; 0x18a <keypad+0xe8>
 17a:	8f ed       	ldi	r24, 0xDF	; 223
 17c:	9e e2       	ldi	r25, 0x2E	; 46
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <keypad+0xdc>
 182:	00 c0       	rjmp	.+0      	; 0x184 <keypad+0xe2>
 184:	00 00       	nop
	{
		_delay_ms(3);
		return '3';
 186:	83 e3       	ldi	r24, 0x33	; 51
 188:	08 95       	ret
	}
	else if((PINA & (1<<PINA7))==0)
 18a:	cf 99       	sbic	0x19, 7	; 25
 18c:	08 c0       	rjmp	.+16     	; 0x19e <keypad+0xfc>
 18e:	8f ed       	ldi	r24, 0xDF	; 223
 190:	9e e2       	ldi	r25, 0x2E	; 46
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <keypad+0xf0>
 196:	00 c0       	rjmp	.+0      	; 0x198 <keypad+0xf6>
 198:	00 00       	nop
	{
		_delay_ms(3);
		return '-';
 19a:	8d e2       	ldi	r24, 0x2D	; 45
 19c:	08 95       	ret
	}
	
	PORTA=0b11110111;//check fourth row
 19e:	87 ef       	ldi	r24, 0xF7	; 247
 1a0:	8b bb       	out	0x1b, r24	; 27
	if((PINA &(1<<PINA4))==0)
 1a2:	cc 99       	sbic	0x19, 4	; 25
 1a4:	08 c0       	rjmp	.+16     	; 0x1b6 <keypad+0x114>
 1a6:	8f ed       	ldi	r24, 0xDF	; 223
 1a8:	9e e2       	ldi	r25, 0x2E	; 46
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <keypad+0x108>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <keypad+0x10e>
 1b0:	00 00       	nop
	{
		_delay_ms(3);
		return 'C';
 1b2:	83 e4       	ldi	r24, 0x43	; 67
 1b4:	08 95       	ret
	}
	else if((PINA & (1<<PINA5))==0)
 1b6:	cd 99       	sbic	0x19, 5	; 25
 1b8:	08 c0       	rjmp	.+16     	; 0x1ca <keypad+0x128>
 1ba:	8f ed       	ldi	r24, 0xDF	; 223
 1bc:	9e e2       	ldi	r25, 0x2E	; 46
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <keypad+0x11c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <keypad+0x122>
 1c4:	00 00       	nop
	{
		_delay_ms(3);
		return '0';
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	08 95       	ret
	}
	else if((PINA & (1<<PINA6))==0)
 1ca:	ce 99       	sbic	0x19, 6	; 25
 1cc:	08 c0       	rjmp	.+16     	; 0x1de <keypad+0x13c>
 1ce:	8f ed       	ldi	r24, 0xDF	; 223
 1d0:	9e e2       	ldi	r25, 0x2E	; 46
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <keypad+0x130>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <keypad+0x136>
 1d8:	00 00       	nop
	{
		_delay_ms(3);
		return 'E';
 1da:	85 e4       	ldi	r24, 0x45	; 69
 1dc:	08 95       	ret
	}
	else if((PINA & (1<<PINA7))==0)
 1de:	cf 99       	sbic	0x19, 7	; 25
 1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <keypad+0x150>
 1e2:	8f ed       	ldi	r24, 0xDF	; 223
 1e4:	9e e2       	ldi	r25, 0x2E	; 46
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <keypad+0x144>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <keypad+0x14a>
 1ec:	00 00       	nop
	{
		_delay_ms(3);
		return '.';
 1ee:	8e e2       	ldi	r24, 0x2E	; 46
 1f0:	08 95       	ret
	}
 1f2:	08 95       	ret

000001f4 <lcdcmd>:

#include "lcd.h"

void lcdcmd(unsigned char cmd)
{
	PORTC&=~(1<<RS);
 1f4:	95 b3       	in	r25, 0x15	; 21
 1f6:	9f 7d       	andi	r25, 0xDF	; 223
 1f8:	95 bb       	out	0x15, r25	; 21
	PORTC&=~(1<<RW);
 1fa:	95 b3       	in	r25, 0x15	; 21
 1fc:	9f 7b       	andi	r25, 0xBF	; 191
 1fe:	95 bb       	out	0x15, r25	; 21
	LCD=cmd & 0xF0;
 200:	98 2f       	mov	r25, r24
 202:	90 7f       	andi	r25, 0xF0	; 240
 204:	98 bb       	out	0x18, r25	; 24
	PORTD|=(1<<EN);
 206:	92 b3       	in	r25, 0x12	; 18
 208:	90 68       	ori	r25, 0x80	; 128
 20a:	92 bb       	out	0x12, r25	; 18
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	39 ef       	ldi	r19, 0xF9	; 249
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	21 50       	subi	r18, 0x01	; 1
 214:	30 40       	sbci	r19, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <lcdcmd+0x1e>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcdcmd+0x28>
 21c:	00 00       	nop
	_delay_ms(20);
	PORTD&=~(1<<EN);
 21e:	92 b3       	in	r25, 0x12	; 18
 220:	9f 77       	andi	r25, 0x7F	; 127
 222:	92 bb       	out	0x12, r25	; 18
	
	LCD=cmd<<4;
 224:	82 95       	swap	r24
 226:	80 7f       	andi	r24, 0xF0	; 240
 228:	88 bb       	out	0x18, r24	; 24
	PORTD|=(1<<EN);
 22a:	82 b3       	in	r24, 0x12	; 18
 22c:	80 68       	ori	r24, 0x80	; 128
 22e:	82 bb       	out	0x12, r24	; 18
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	39 ef       	ldi	r19, 0xF9	; 249
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	21 50       	subi	r18, 0x01	; 1
 238:	30 40       	sbci	r19, 0x00	; 0
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <lcdcmd+0x42>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcdcmd+0x4c>
 240:	00 00       	nop
	_delay_ms(20);
	PORTD&=~(1<<EN);
 242:	82 b3       	in	r24, 0x12	; 18
 244:	8f 77       	andi	r24, 0x7F	; 127
 246:	82 bb       	out	0x12, r24	; 18
 248:	08 95       	ret

0000024a <lcddata>:
}

void lcddata(unsigned char data){
	//function to display input data
	PORTC|=(1<<RS);
 24a:	95 b3       	in	r25, 0x15	; 21
 24c:	90 62       	ori	r25, 0x20	; 32
 24e:	95 bb       	out	0x15, r25	; 21
	PORTC&=~(1<<RW);
 250:	95 b3       	in	r25, 0x15	; 21
 252:	9f 7b       	andi	r25, 0xBF	; 191
 254:	95 bb       	out	0x15, r25	; 21
	LCD=data & 0xF0;
 256:	98 2f       	mov	r25, r24
 258:	90 7f       	andi	r25, 0xF0	; 240
 25a:	98 bb       	out	0x18, r25	; 24
	PORTD|=(1<<EN);
 25c:	92 b3       	in	r25, 0x12	; 18
 25e:	90 68       	ori	r25, 0x80	; 128
 260:	92 bb       	out	0x12, r25	; 18
 262:	2f ef       	ldi	r18, 0xFF	; 255
 264:	39 ef       	ldi	r19, 0xF9	; 249
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	30 40       	sbci	r19, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <lcddata+0x1e>
 270:	00 c0       	rjmp	.+0      	; 0x272 <lcddata+0x28>
 272:	00 00       	nop
	_delay_ms(20);
	PORTD&=~(1<<EN);
 274:	92 b3       	in	r25, 0x12	; 18
 276:	9f 77       	andi	r25, 0x7F	; 127
 278:	92 bb       	out	0x12, r25	; 18
	
	LCD=data << 4;
 27a:	82 95       	swap	r24
 27c:	80 7f       	andi	r24, 0xF0	; 240
 27e:	88 bb       	out	0x18, r24	; 24
	PORTD|=(1<<EN);
 280:	82 b3       	in	r24, 0x12	; 18
 282:	80 68       	ori	r24, 0x80	; 128
 284:	82 bb       	out	0x12, r24	; 18
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	39 ef       	ldi	r19, 0xF9	; 249
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	30 40       	sbci	r19, 0x00	; 0
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <lcddata+0x42>
 294:	00 c0       	rjmp	.+0      	; 0x296 <lcddata+0x4c>
 296:	00 00       	nop
	_delay_ms(20);
	PORTD&=~(1<<EN);
 298:	82 b3       	in	r24, 0x12	; 18
 29a:	8f 77       	andi	r24, 0x7F	; 127
 29c:	82 bb       	out	0x12, r24	; 18
 29e:	08 95       	ret

000002a0 <lcd_init>:
}

void lcd_init()//function to LCD initialization
{
	DDRC=0xFF;
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	84 bb       	out	0x14, r24	; 20
	DDRD=0xFF;
 2a4:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<EN);
 2a6:	82 b3       	in	r24, 0x12	; 18
 2a8:	8f 77       	andi	r24, 0x7F	; 127
 2aa:	82 bb       	out	0x12, r24	; 18
	lcdcmd(0x33);
 2ac:	83 e3       	ldi	r24, 0x33	; 51
 2ae:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
	lcdcmd(0x32);
 2b2:	82 e3       	ldi	r24, 0x32	; 50
 2b4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
	lcdcmd(0x28);
 2b8:	88 e2       	ldi	r24, 0x28	; 40
 2ba:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
	lcdcmd(0x0E);
 2be:	8e e0       	ldi	r24, 0x0E	; 14
 2c0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
	lcdcmd(0x01);
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	89 ef       	ldi	r24, 0xF9	; 249
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <lcd_init+0x30>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <lcd_init+0x3a>
 2da:	00 00       	nop
 2dc:	08 95       	ret

000002de <lcd_print>:
	_delay_ms(20);
}
void lcd_print(char *str)//function to print a given string
{
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	8c 01       	movw	r16, r24
	unsigned char i=0;
 2e6:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i]!=0)
 2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <lcd_print+0x12>
	{
		lcddata(str[i]);
 2ea:	0e 94 25 01 	call	0x24a	; 0x24a <lcddata>
		i++;
 2ee:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(20);
}
void lcd_print(char *str)//function to print a given string
{
	unsigned char i=0;
	while(str[i]!=0)
 2f0:	f8 01       	movw	r30, r16
 2f2:	ec 0f       	add	r30, r28
 2f4:	f1 1d       	adc	r31, r1
 2f6:	80 81       	ld	r24, Z
 2f8:	81 11       	cpse	r24, r1
 2fa:	f7 cf       	rjmp	.-18     	; 0x2ea <lcd_print+0xc>
	{
		lcddata(str[i]);
		i++;
	}
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	08 95       	ret

00000304 <__vector_13>:
int x1=0 ; // variable for length of the pipe
int x2=0; // variable for quantity
int8_t receivedData;
int isInputDataRecevied;

ISR(USART_RXC_vect){
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	2f 93       	push	r18
 310:	3f 93       	push	r19
 312:	4f 93       	push	r20
 314:	5f 93       	push	r21
 316:	6f 93       	push	r22
 318:	7f 93       	push	r23
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
 31e:	af 93       	push	r26
 320:	bf 93       	push	r27
 322:	ef 93       	push	r30
 324:	ff 93       	push	r31
	receivedData=UDR;
 326:	8c b1       	in	r24, 0x0c	; 12
 328:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <receivedData>
	if(receivedData=="START"){
 32c:	08 2e       	mov	r0, r24
 32e:	00 0c       	add	r0, r0
 330:	99 0b       	sbc	r25, r25
 332:	80 56       	subi	r24, 0x60	; 96
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	19 f4       	brne	.+6      	; 0x33e <__vector_13+0x3a>
		rotateMotor();
 338:	0e 94 49 00 	call	0x92	; 0x92 <rotateMotor>
 33c:	02 c0       	rjmp	.+4      	; 0x342 <__vector_13+0x3e>
	}else if("STOP"){
		stopMotor();
 33e:	0e 94 4d 00 	call	0x9a	; 0x9a <stopMotor>
		setMotorSpeed(255);
	}else if("LOW"){
		setMotorSpeed(100);
	}
	
	isInputDataRecevied=1;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <isInputDataRecevied+0x1>
 34a:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <isInputDataRecevied>
}
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	bf 91       	pop	r27
 354:	af 91       	pop	r26
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	7f 91       	pop	r23
 35c:	6f 91       	pop	r22
 35e:	5f 91       	pop	r21
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <main>:

int main(void)
{
	DDRA=0x0F;
 370:	8f e0       	ldi	r24, 0x0F	; 15
 372:	8a bb       	out	0x1a, r24	; 26
	lcd_init();
 374:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_init>
	initUSART();
 378:	0e 94 cc 02 	call	0x598	; 0x598 <initUSART>
	sei();
 37c:	78 94       	sei
	lcd_print("  HELLO USER ");
 37e:	86 e6       	ldi	r24, 0x66	; 102
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_print>
 386:	2f ef       	ldi	r18, 0xFF	; 255
 388:	81 ee       	ldi	r24, 0xE1	; 225
 38a:	94 e0       	ldi	r25, 0x04	; 4
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	80 40       	sbci	r24, 0x00	; 0
 390:	90 40       	sbci	r25, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <main+0x1c>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x26>
 396:	00 00       	nop
	_delay_ms(100);
	label1:
	lcdcmd(0x01);//clear display
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
	lcdcmd(0x0E);//blink the cursor
 39e:	8e e0       	ldi	r24, 0x0E	; 14
 3a0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	81 ee       	ldi	r24, 0xE1	; 225
 3a8:	94 e0       	ldi	r25, 0x04	; 4
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x3a>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0x44>
 3b4:	00 00       	nop
	_delay_ms(100);
	lcd_print("ENTER LENGTH");
 3b6:	84 e7       	ldi	r24, 0x74	; 116
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_print>
	lcdcmd(0xC0);//bring cursor to second row
 3be:	80 ec       	ldi	r24, 0xC0	; 192
 3c0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
	
	do
	{
		PORTA=0xF0;
 3c4:	80 ef       	ldi	r24, 0xF0	; 240
 3c6:	8b bb       	out	0x1b, r24	; 27
		if(PINA!=0xF0)
 3c8:	89 b3       	in	r24, 0x19	; 25
 3ca:	80 3f       	cpi	r24, 0xF0	; 240
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <main+0x60>
 3ce:	46 c0       	rjmp	.+140    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		{
			x=keypad();
 3d0:	0e 94 51 00 	call	0xa2	; 0xa2 <keypad>
 3d4:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <x>
			if(x=='/'||x=='*'||x=='-'||x=='C')
 3d8:	8f 32       	cpi	r24, 0x2F	; 47
 3da:	31 f0       	breq	.+12     	; 0x3e8 <main+0x78>
 3dc:	8a 32       	cpi	r24, 0x2A	; 42
 3de:	21 f0       	breq	.+8      	; 0x3e8 <main+0x78>
 3e0:	8d 32       	cpi	r24, 0x2D	; 45
 3e2:	11 f0       	breq	.+4      	; 0x3e8 <main+0x78>
 3e4:	83 34       	cpi	r24, 0x43	; 67
 3e6:	e9 f4       	brne	.+58     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			{
				lcdcmd(0x01);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
				lcdcmd(0x0E);
 3ee:	8e e0       	ldi	r24, 0x0E	; 14
 3f0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
 3f4:	2f ef       	ldi	r18, 0xFF	; 255
 3f6:	81 ee       	ldi	r24, 0xE1	; 225
 3f8:	94 e0       	ldi	r25, 0x04	; 4
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	80 40       	sbci	r24, 0x00	; 0
 3fe:	90 40       	sbci	r25, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <main+0x8a>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
				_delay_ms(100);
				lcd_print("INVALID INPUT");
 406:	81 e8       	ldi	r24, 0x81	; 129
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_print>
 40e:	2f ef       	ldi	r18, 0xFF	; 255
 410:	81 ee       	ldi	r24, 0xE1	; 225
 412:	94 e0       	ldi	r25, 0x04	; 4
 414:	21 50       	subi	r18, 0x01	; 1
 416:	80 40       	sbci	r24, 0x00	; 0
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
 420:	bb cf       	rjmp	.-138    	; 0x398 <main+0x28>
				_delay_ms(100);
				goto label1;
			}
			
			else if(x!='E')//read the input length x1
 422:	85 34       	cpi	r24, 0x45	; 69
 424:	d9 f0       	breq	.+54     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
			{
				x1=(x1*10)+(x-'0');
 426:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <x1>
 42a:	30 91 ad 00 	lds	r19, 0x00AD	; 0x8000ad <x1+0x1>
 42e:	a9 01       	movw	r20, r18
 430:	44 0f       	add	r20, r20
 432:	55 1f       	adc	r21, r21
 434:	22 0f       	add	r18, r18
 436:	33 1f       	adc	r19, r19
 438:	22 0f       	add	r18, r18
 43a:	33 1f       	adc	r19, r19
 43c:	22 0f       	add	r18, r18
 43e:	33 1f       	adc	r19, r19
 440:	24 0f       	add	r18, r20
 442:	35 1f       	adc	r19, r21
 444:	48 2f       	mov	r20, r24
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	40 53       	subi	r20, 0x30	; 48
 44a:	51 09       	sbc	r21, r1
 44c:	24 0f       	add	r18, r20
 44e:	35 1f       	adc	r19, r21
 450:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <x1+0x1>
 454:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <x1>
				lcddata(x);
 458:	0e 94 25 01 	call	0x24a	; 0x24a <lcddata>
			}
		}
		
	}while(x!='E');
 45c:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <x>
 460:	85 34       	cpi	r24, 0x45	; 69
 462:	09 f0       	breq	.+2      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 464:	af cf       	rjmp	.-162    	; 0x3c4 <main+0x54>
	
	label2:
	lcdcmd(0x01);
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
	lcdcmd(0x0E);
 46c:	8e e0       	ldi	r24, 0x0E	; 14
 46e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
 472:	2f ef       	ldi	r18, 0xFF	; 255
 474:	81 ee       	ldi	r24, 0xE1	; 225
 476:	94 e0       	ldi	r25, 0x04	; 4
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	90 40       	sbci	r25, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 480:	00 c0       	rjmp	.+0      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 482:	00 00       	nop
	_delay_ms(100);
	lcd_print("ENTER QUANTITY :");
 484:	8f e8       	ldi	r24, 0x8F	; 143
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_print>
 48c:	2f ef       	ldi	r18, 0xFF	; 255
 48e:	81 ee       	ldi	r24, 0xE1	; 225
 490:	94 e0       	ldi	r25, 0x04	; 4
 492:	21 50       	subi	r18, 0x01	; 1
 494:	80 40       	sbci	r24, 0x00	; 0
 496:	90 40       	sbci	r25, 0x00	; 0
 498:	e1 f7       	brne	.-8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 49c:	00 00       	nop
	_delay_ms(100);
	lcdcmd(0xC0);
 49e:	80 ec       	ldi	r24, 0xC0	; 192
 4a0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
	
	do
	{
		PORTA=0xF0;
 4a4:	80 ef       	ldi	r24, 0xF0	; 240
 4a6:	8b bb       	out	0x1b, r24	; 27
		if(PINA!=0xF0)
 4a8:	89 b3       	in	r24, 0x19	; 25
 4aa:	80 3f       	cpi	r24, 0xF0	; 240
 4ac:	99 f1       	breq	.+102    	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
		{
			y=keypad();
 4ae:	0e 94 51 00 	call	0xa2	; 0xa2 <keypad>
 4b2:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <y>
			if(y=='/'||y=='*'||y=='-')
 4b6:	8f 32       	cpi	r24, 0x2F	; 47
 4b8:	21 f0       	breq	.+8      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4ba:	8a 32       	cpi	r24, 0x2A	; 42
 4bc:	11 f0       	breq	.+4      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4be:	8d 32       	cpi	r24, 0x2D	; 45
 4c0:	e9 f4       	brne	.+58     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
			{
				lcdcmd(0x01);
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
				lcdcmd(0x0E);
 4c8:	8e e0       	ldi	r24, 0x0E	; 14
 4ca:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
 4ce:	2f ef       	ldi	r18, 0xFF	; 255
 4d0:	81 ee       	ldi	r24, 0xE1	; 225
 4d2:	94 e0       	ldi	r25, 0x04	; 4
 4d4:	21 50       	subi	r18, 0x01	; 1
 4d6:	80 40       	sbci	r24, 0x00	; 0
 4d8:	90 40       	sbci	r25, 0x00	; 0
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4de:	00 00       	nop
				_delay_ms(100);
				lcd_print("INVALID INPUT");
 4e0:	81 e8       	ldi	r24, 0x81	; 129
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_print>
 4e8:	2f ef       	ldi	r18, 0xFF	; 255
 4ea:	81 ee       	ldi	r24, 0xE1	; 225
 4ec:	94 e0       	ldi	r25, 0x04	; 4
 4ee:	21 50       	subi	r18, 0x01	; 1
 4f0:	80 40       	sbci	r24, 0x00	; 0
 4f2:	90 40       	sbci	r25, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 4f8:	00 00       	nop
 4fa:	b5 cf       	rjmp	.-150    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
				_delay_ms(100);
				goto label2;
			}
			else if(y!='E')//read the input quantity x2
 4fc:	85 34       	cpi	r24, 0x45	; 69
 4fe:	51 f0       	breq	.+20     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
			{
				x2=y-'0';
 500:	28 2f       	mov	r18, r24
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	20 53       	subi	r18, 0x30	; 48
 506:	31 09       	sbc	r19, r1
 508:	30 93 ab 00 	sts	0x00AB, r19	; 0x8000ab <__data_end+0x1>
 50c:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <__data_end>
				lcddata(y);
 510:	0e 94 25 01 	call	0x24a	; 0x24a <lcddata>
			}
		}
	}while(y!='E');
 514:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <y>
 518:	85 34       	cpi	r24, 0x45	; 69
 51a:	21 f6       	brne	.-120    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
	
	if(y=='E')//completion of inserting relevant inputs
 51c:	85 34       	cpi	r24, 0x45	; 69
 51e:	c9 f5       	brne	.+114    	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
	{
		//send length
		sendData(x1);
 520:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <x1>
 524:	0e 94 da 02 	call	0x5b4	; 0x5b4 <sendData>
 528:	2f ef       	ldi	r18, 0xFF	; 255
 52a:	81 ee       	ldi	r24, 0xE1	; 225
 52c:	94 e0       	ldi	r25, 0x04	; 4
 52e:	21 50       	subi	r18, 0x01	; 1
 530:	80 40       	sbci	r24, 0x00	; 0
 532:	90 40       	sbci	r25, 0x00	; 0
 534:	e1 f7       	brne	.-8      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 536:	00 c0       	rjmp	.+0      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 538:	00 00       	nop
		// wait
		_delay_ms(100);
		//send quantity
		sendData(x2);
 53a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
 53e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <sendData>
		
		lcdcmd(0x01);
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
		lcdcmd(0x0E);
 548:	8e e0       	ldi	r24, 0x0E	; 14
 54a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
 54e:	2f ef       	ldi	r18, 0xFF	; 255
 550:	81 ee       	ldi	r24, 0xE1	; 225
 552:	94 e0       	ldi	r25, 0x04	; 4
 554:	21 50       	subi	r18, 0x01	; 1
 556:	80 40       	sbci	r24, 0x00	; 0
 558:	90 40       	sbci	r25, 0x00	; 0
 55a:	e1 f7       	brne	.-8      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
 55e:	00 00       	nop
		_delay_ms(100);
		lcd_print("     Done");
 560:	80 ea       	ldi	r24, 0xA0	; 160
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_print>
 568:	2f ef       	ldi	r18, 0xFF	; 255
 56a:	81 ee       	ldi	r24, 0xE1	; 225
 56c:	94 e0       	ldi	r25, 0x04	; 4
 56e:	21 50       	subi	r18, 0x01	; 1
 570:	80 40       	sbci	r24, 0x00	; 0
 572:	90 40       	sbci	r25, 0x00	; 0
 574:	e1 f7       	brne	.-8      	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 576:	00 c0       	rjmp	.+0      	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
 578:	00 00       	nop
		_delay_ms(100);
		lcdcmd(0x01);
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdcmd>
 580:	2f ef       	ldi	r18, 0xFF	; 255
 582:	89 e6       	ldi	r24, 0x69	; 105
 584:	98 e1       	ldi	r25, 0x18	; 24
 586:	21 50       	subi	r18, 0x01	; 1
 588:	80 40       	sbci	r24, 0x00	; 0
 58a:	90 40       	sbci	r25, 0x00	; 0
 58c:	e1 f7       	brne	.-8      	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 590:	00 00       	nop
		_delay_ms(500);
	}

	return 0;
}
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	08 95       	ret

00000598 <initUSART>:

#include "usart.h"

void initUSART(){
	
	DDRD |= 1 << PIND1;//pin1 of portD as OUTPUT
 598:	81 b3       	in	r24, 0x11	; 17
 59a:	82 60       	ori	r24, 0x02	; 2
 59c:	81 bb       	out	0x11, r24	; 17

	DDRD &= ~(1 << PIND0);//pin0 of portD as INPUT
 59e:	81 b3       	in	r24, 0x11	; 17
 5a0:	8e 7f       	andi	r24, 0xFE	; 254
 5a2:	81 bb       	out	0x11, r24	; 17
	
	int UBBRValue = 25;//AS described before setting baud rate

	//Put the upper part of the baud number here (bits 8 to 11)

	UBRRH = (unsigned char) (UBBRValue >> 8);
 5a4:	10 bc       	out	0x20, r1	; 32

	//Put the remaining part of the baud number here

	UBRRL = (unsigned char) UBBRValue;
 5a6:	89 e1       	ldi	r24, 0x19	; 25
 5a8:	89 b9       	out	0x09, r24	; 9

	//Enable the receiver, transmitter and receiver interrupt
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
 5aa:	88 e9       	ldi	r24, 0x98	; 152
 5ac:	8a b9       	out	0x0a, r24	; 10

	//Set 2 stop bits and data bit length is 8-bit

	UCSRC = (1 << USBS) | (3 << UCSZ0);
 5ae:	8e e0       	ldi	r24, 0x0E	; 14
 5b0:	80 bd       	out	0x20, r24	; 32
 5b2:	08 95       	ret

000005b4 <sendData>:
	
}


void sendData(uint8_t byte){
	while (! (UCSRA & (1 << UDRE)) );
 5b4:	5d 9b       	sbis	0x0b, 5	; 11
 5b6:	fe cf       	rjmp	.-4      	; 0x5b4 <sendData>

	{
		UDR = byte;//once transmitter is ready sent eight bit data
 5b8:	8c b9       	out	0x0c, r24	; 12
 5ba:	8f e1       	ldi	r24, 0x1F	; 31
 5bc:	9e e4       	ldi	r25, 0x4E	; 78
 5be:	01 97       	sbiw	r24, 0x01	; 1
 5c0:	f1 f7       	brne	.-4      	; 0x5be <sendData+0xa>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <sendData+0x10>
 5c4:	00 00       	nop
 5c6:	08 95       	ret

000005c8 <_exit>:
 5c8:	f8 94       	cli

000005ca <__stop_program>:
 5ca:	ff cf       	rjmp	.-2      	; 0x5ca <__stop_program>
